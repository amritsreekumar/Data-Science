<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20181.18.0510.1418                               -->
<workbook source-build='2018.1.1 (20181.18.0510.1418)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SortTagCleanup />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Data (mortalityrates)' inline='true' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='mortalityrates' name='excel-direct.1lminzr1vxudjh1chy39k0isww4p'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/macbook/Desktop/mortalityrates.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
          <named-connection caption='african countries' name='excel-direct.12yn0pf1btutlr1383hcf1dmy61q'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/macbook/Desktop/african countries.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
          <named-connection caption='europe and australia' name='excel-direct.0ldl3ip0dhmv5n17ido6v0rb3csz'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/macbook/Desktop/europe and australia.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.1lminzr1vxudjh1chy39k0isww4p' name='All countries' table='[Data$]' type='table'>
          <columns gridOrigin='A1:BH265:no:A1:BH265:0' header='yes' outcome='2'>
            <column datatype='string' name='Country Name' ordinal='0' />
            <column datatype='string' name='Country Code' ordinal='1' />
            <column datatype='string' name='Indicator Name' ordinal='2' />
            <column datatype='real' name='1960' ordinal='3' />
            <column datatype='real' name='1961' ordinal='4' />
            <column datatype='real' name='1962' ordinal='5' />
            <column datatype='real' name='1963' ordinal='6' />
            <column datatype='real' name='1964' ordinal='7' />
            <column datatype='real' name='1965' ordinal='8' />
            <column datatype='real' name='1966' ordinal='9' />
            <column datatype='real' name='1967' ordinal='10' />
            <column datatype='real' name='1968' ordinal='11' />
            <column datatype='real' name='1969' ordinal='12' />
            <column datatype='real' name='1970' ordinal='13' />
            <column datatype='real' name='1971' ordinal='14' />
            <column datatype='real' name='1972' ordinal='15' />
            <column datatype='real' name='1973' ordinal='16' />
            <column datatype='real' name='1974' ordinal='17' />
            <column datatype='real' name='1975' ordinal='18' />
            <column datatype='real' name='1976' ordinal='19' />
            <column datatype='real' name='1977' ordinal='20' />
            <column datatype='real' name='1978' ordinal='21' />
            <column datatype='real' name='1979' ordinal='22' />
            <column datatype='real' name='1980' ordinal='23' />
            <column datatype='real' name='1981' ordinal='24' />
            <column datatype='real' name='1982' ordinal='25' />
            <column datatype='real' name='1983' ordinal='26' />
            <column datatype='real' name='1984' ordinal='27' />
            <column datatype='real' name='1985' ordinal='28' />
            <column datatype='real' name='1986' ordinal='29' />
            <column datatype='real' name='1987' ordinal='30' />
            <column datatype='real' name='1988' ordinal='31' />
            <column datatype='real' name='1989' ordinal='32' />
            <column datatype='real' name='1990' ordinal='33' />
            <column datatype='real' name='1991' ordinal='34' />
            <column datatype='real' name='1992' ordinal='35' />
            <column datatype='real' name='1993' ordinal='36' />
            <column datatype='real' name='1994' ordinal='37' />
            <column datatype='real' name='1995' ordinal='38' />
            <column datatype='real' name='1996' ordinal='39' />
            <column datatype='real' name='1997' ordinal='40' />
            <column datatype='real' name='1998' ordinal='41' />
            <column datatype='real' name='1999' ordinal='42' />
            <column datatype='real' name='2000' ordinal='43' />
            <column datatype='real' name='2001' ordinal='44' />
            <column datatype='real' name='2002' ordinal='45' />
            <column datatype='real' name='2003' ordinal='46' />
            <column datatype='real' name='2004' ordinal='47' />
            <column datatype='real' name='2005' ordinal='48' />
            <column datatype='real' name='2006' ordinal='49' />
            <column datatype='real' name='2007' ordinal='50' />
            <column datatype='real' name='2008' ordinal='51' />
            <column datatype='real' name='2009' ordinal='52' />
            <column datatype='real' name='2010' ordinal='53' />
            <column datatype='real' name='2011' ordinal='54' />
            <column datatype='real' name='2012' ordinal='55' />
            <column datatype='real' name='2013' ordinal='56' />
            <column datatype='real' name='2014' ordinal='57' />
            <column datatype='real' name='2015' ordinal='58' />
            <column datatype='real' name='2016' ordinal='59' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Country Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country Name]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>Country Name</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country Code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country Code]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>Country Code</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Indicator Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Indicator Name]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>Indicator Name</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1960</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1960]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1960</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1961</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1961]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1961</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1962</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1962]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1962</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1963</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1963]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1963</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1964</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1964]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1964</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1965</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1965]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1965</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1966</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1966]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1966</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1967</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1967]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1967</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1968</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1968]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1968</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1969</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1969]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1969</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1970</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1970]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1970</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1971</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1971]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1971</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1972</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1972]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1972</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1973</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1973]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1973</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1974</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1974]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1974</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1975</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1975]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1975</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1976</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1976]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1976</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1977</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1977]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1977</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1978</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1978]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1978</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1979</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1979]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1979</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1980</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1980]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1980</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1981</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1981]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1981</remote-alias>
            <ordinal>24</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1982</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1982]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1982</remote-alias>
            <ordinal>25</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1983</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1983]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1983</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1984</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1984]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1984</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1985</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1985]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1985</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1986</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1986]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1986</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1987</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1987]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1987</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1988</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1988]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1988</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1989</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1989]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1989</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1990</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1990]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1990</remote-alias>
            <ordinal>33</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1991</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1991]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1991</remote-alias>
            <ordinal>34</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1992</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1992]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1992</remote-alias>
            <ordinal>35</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1993</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1993]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1993</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1994</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1994]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1994</remote-alias>
            <ordinal>37</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1995</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1995]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1995</remote-alias>
            <ordinal>38</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1996</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1996]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1996</remote-alias>
            <ordinal>39</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1997</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1997]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1997</remote-alias>
            <ordinal>40</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1998</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1998]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1998</remote-alias>
            <ordinal>41</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1999</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1999]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1999</remote-alias>
            <ordinal>42</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2000</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2000]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2000</remote-alias>
            <ordinal>43</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2001</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2001]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2001</remote-alias>
            <ordinal>44</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2002</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2002]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2002</remote-alias>
            <ordinal>45</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2003</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2003]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2003</remote-alias>
            <ordinal>46</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2004</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2004]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2004</remote-alias>
            <ordinal>47</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2005</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2005]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2005</remote-alias>
            <ordinal>48</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2006</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2006]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2006</remote-alias>
            <ordinal>49</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2007</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2007]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2007</remote-alias>
            <ordinal>50</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2008</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2008]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2008</remote-alias>
            <ordinal>51</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2009</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2009]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2009</remote-alias>
            <ordinal>52</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2010</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2010]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2010</remote-alias>
            <ordinal>53</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2011</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2011]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2011</remote-alias>
            <ordinal>54</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2012</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2012]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2012</remote-alias>
            <ordinal>55</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2013</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2013]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2013</remote-alias>
            <ordinal>56</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2014</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2014]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2014</remote-alias>
            <ordinal>57</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2015</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2015]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2015</remote-alias>
            <ordinal>58</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2016</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2016]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2016</remote-alias>
            <ordinal>59</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[All countries]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:BH265:no:A1:BH265:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' name='[1960]' role='measure' type='quantitative' />
      <column datatype='real' name='[1961]' role='measure' type='quantitative' />
      <column datatype='real' name='[1962]' role='measure' type='quantitative' />
      <column datatype='real' name='[1963]' role='measure' type='quantitative' />
      <column datatype='real' name='[1964]' role='measure' type='quantitative' />
      <column datatype='real' name='[1965]' role='measure' type='quantitative' />
      <column datatype='real' name='[1966]' role='measure' type='quantitative' />
      <column datatype='real' name='[1967]' role='measure' type='quantitative' />
      <column datatype='real' name='[1968]' role='measure' type='quantitative' />
      <column datatype='real' name='[1969]' role='measure' type='quantitative' />
      <column datatype='real' name='[1970]' role='measure' type='quantitative' />
      <column datatype='real' name='[1971]' role='measure' type='quantitative' />
      <column datatype='real' name='[1972]' role='measure' type='quantitative' />
      <column datatype='real' name='[1973]' role='measure' type='quantitative' />
      <column datatype='real' name='[1974]' role='measure' type='quantitative' />
      <column datatype='real' name='[1975]' role='measure' type='quantitative' />
      <column datatype='real' name='[1976]' role='measure' type='quantitative' />
      <column datatype='real' name='[1977]' role='measure' type='quantitative' />
      <column datatype='real' name='[1978]' role='measure' type='quantitative' />
      <column datatype='real' name='[1979]' role='measure' type='quantitative' />
      <column caption='Percentage decrease' datatype='real' name='[Calculation_477170460220043275]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(SUM([1960])-SUM([1970]))/SUM([1960])*100' />
      </column>
      <column datatype='string' name='[Country Code]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column-instance column='[1960]' derivation='Avg' name='[avg:1960:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
      <column-instance column='[1960]' derivation='Sum' name='[pcto:sum:1960:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1960]' derivation='Sum' name='[pcto:sum:1960:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1961]' derivation='Sum' name='[pcto:sum:1961:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1961]' derivation='Sum' name='[pcto:sum:1961:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1962]' derivation='Sum' name='[pcto:sum:1962:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1962]' derivation='Sum' name='[pcto:sum:1962:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1963]' derivation='Sum' name='[pcto:sum:1963:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1963]' derivation='Sum' name='[pcto:sum:1963:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1964]' derivation='Sum' name='[pcto:sum:1964:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1964]' derivation='Sum' name='[pcto:sum:1964:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1965]' derivation='Sum' name='[pcto:sum:1965:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1965]' derivation='Sum' name='[pcto:sum:1965:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1966]' derivation='Sum' name='[pcto:sum:1966:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1966]' derivation='Sum' name='[pcto:sum:1966:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1967]' derivation='Sum' name='[pcto:sum:1967:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1967]' derivation='Sum' name='[pcto:sum:1967:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1968]' derivation='Sum' name='[pcto:sum:1968:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1968]' derivation='Sum' name='[pcto:sum:1968:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1969]' derivation='Sum' name='[pcto:sum:1969:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1969]' derivation='Sum' name='[pcto:sum:1969:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1970]' derivation='Sum' name='[pcto:sum:1970:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1970]' derivation='Sum' name='[pcto:sum:1970:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1961]' derivation='Sum' name='[sum:1961:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1962]' derivation='Sum' name='[sum:1962:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1963]' derivation='Sum' name='[sum:1963:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1964]' derivation='Sum' name='[sum:1964:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1965]' derivation='Sum' name='[sum:1965:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1966]' derivation='Sum' name='[sum:1966:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1967]' derivation='Sum' name='[sum:1967:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1968]' derivation='Sum' name='[sum:1968:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1969]' derivation='Sum' name='[sum:1969:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1970]' derivation='Sum' name='[sum:1970:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1971]' derivation='Sum' name='[sum:1971:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1972]' derivation='Sum' name='[sum:1972:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1973]' derivation='Sum' name='[sum:1973:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1974]' derivation='Sum' name='[sum:1974:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1975]' derivation='Sum' name='[sum:1975:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1976]' derivation='Sum' name='[sum:1976:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1977]' derivation='Sum' name='[sum:1977:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1978]' derivation='Sum' name='[sum:1978:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1979]' derivation='Sum' name='[sum:1979:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[usr:Calculation_477170460220043275:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.327122' measure-ordering='alphabetic' measure-percentage='0.672878' show-structure='true' user-set-layout='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Country Name:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Middle East &amp; North Africa&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;South Asia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Caribbean small states&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Central Europe and the Baltics&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Latin America &amp; Caribbean&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sub-Saharan Africa (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Syrian Arab Republic&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Korea, Dem. People’s Rep.&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Late-demographic dividend&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Not classified&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Arab World&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Early-demographic dividend&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;High income&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;IDA total&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Other small states&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Heavily indebted poor countries (HIPC)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Post-demographic dividend&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;South Asia (IDA &amp; IBRD)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;St. Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Northern Mariana Islands&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;East Asia &amp; Pacific&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Euro area&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Low income&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lower middle income&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;St. Martin (French part)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Venezuela, RB&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Europe &amp; Central Asia (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Macedonia, FYR&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Middle East &amp; North Africa (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sint Maarten (Dutch part)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sub-Saharan Africa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Swaziland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;East Asia &amp; Pacific (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kyrgyz Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pacific island small states&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;IDA &amp; IBRD total&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Virgin Islands (U.S.)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bahamas, The&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Fragile and conflict affected situations&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Iran, Islamic Rep.&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Latin America &amp; Caribbean (excluding high income)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Macao SAR, China&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;OECD members&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;European Union&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Latin America &amp; the Caribbean (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;IDA only&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Korea, Rep.&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Small states&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;St. Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sub-Saharan Africa (excluding high income)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Upper middle income&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Congo, Dem. Rep.&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hong Kong SAR, China&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;St. Lucia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;West Bank and Gaza&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Gambia, The&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Low &amp; middle income&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Europe &amp; Central Asia (excluding high income)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;IDA blend&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lao PDR&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Least developed countries: UN classification&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Pre-demographic dividend&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Congo, Rep.&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;East Asia &amp; Pacific (excluding high income)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Europe &amp; Central Asia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Faroe Islands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Middle income&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;IBRD only&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Micronesia, Fed. Sts.&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Slovak Republic&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Egypt, Arab Rep.&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Middle East &amp; North Africa (excluding high income)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Russian Federation&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Yemen, Rep.&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1968:qk:1]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1968:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1968:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[avg:1960:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1960:qk:1]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1960:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1964:qk:1]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1964:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1964:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1972:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1969:qk:1]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1969:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1969:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1965:qk:1]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1965:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1965:qk]&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1978:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1961:qk:1]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1961:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1961:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1976:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1966:qk:1]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1966:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1966:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1973:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1974:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1977:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1979:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1970:qk:1]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1970:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1967:qk:1]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1967:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1967:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1962:qk:1]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1962:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1962:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1975:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1971:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_47287801348087813:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460218281988:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1963:qk:1]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1963:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1963:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='1960-70'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='real' name='[1970]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1970]' derivation='Sum' name='[sum:1970:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country Name:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;American Samoa&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Andorra&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bermuda&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;British Virgin Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cayman Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Dominica&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Faroe Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Germany&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gibraltar&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Greenland&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Isle of Man&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kosovo&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liechtenstein&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Marshall Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Monaco&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nauru&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Northern Mariana Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Not classified&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Palau&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;San Marino&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sint Maarten (Dutch part)&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Slovenia&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;St. Kitts and Nevis&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;St. Martin (French part)&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Turks and Caicos Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tuvalu&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;West Bank and Gaza&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk] / [federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names])</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Multiple Values]</cols>
      </table>
    </worksheet>
    <worksheet name='1960-70 mortality decrease'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='real' name='[1970]' role='measure' type='quantitative' />
            <column caption='Percentage decrease' datatype='real' name='[Calculation_477170460220043275]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(SUM([1960])-SUM([1970]))/SUM([1960])*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[usr:Calculation_477170460220043275:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Armenia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belize&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Costa Rica&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cuba&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iraq&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Korea, Dem. People’s Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Libya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Macedonia, FYR&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nicaragua&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;World&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' palette='green_blue_white_diverging_10_0' type='interpolated' />
            <encoding attr='size-bar' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
          <style-rule element='refband'>
            <format attr='reverse-palette' id='refline1' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='African mortality rate'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Algeria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Angola&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Benin&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Burkina Faso&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Burundi&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cameroon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Central African Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Chad&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Comoros&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Congo, Dem. Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Congo, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cote d&apos;Ivoire&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Djibouti&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Egypt, Arab Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Equatorial Guinea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Eritrea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gabon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gambia, The&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ghana&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guinea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guinea-Bissau&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kenya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lesotho&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liberia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Libya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Madagascar&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Malawi&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mali&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mauritania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Morocco&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mozambique&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Namibia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Niger&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Rwanda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sao Tome and Principe&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Senegal&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Seychelles&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sierra Leone&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Somalia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;South Sudan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sudan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Swaziland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tanzania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Togo&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Uganda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zambia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' num-steps='15' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Europe and Australia'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Albania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Andorra&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bosnia and Herzegovina&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Channel Islands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Estonia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Faroe Islands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iceland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Isle of Man&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kosovo&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liechtenstein&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Luxembourg&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Macedonia, FYR&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Moldova&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Monaco&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Montenegro&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Portugal&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;San Marino&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Serbia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;United Kingdom&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' field-type='quantitative' max='39420307.654010266' min='-17622882.232968882' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' field-type='quantitative' max='16245471.836392201' min='-20799817.627306961' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' num-steps='15' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Mortality increase 1960-70'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='real' name='[1970]' role='measure' type='quantitative' />
            <column caption='Percentage decrease' datatype='real' name='[Calculation_477170460220043275]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(SUM([1960])-SUM([1970]))/SUM([1960])*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[usr:Calculation_477170460220043275:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iceland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Luxembourg&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Russian Federation&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Slovak Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Vietnam&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='ASC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#e15759' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='mortality 1960'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' num-steps='15' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Story 1' type='storyboard'>
      <style>
        <style-rule element='story-point-caption'>
          <format attr='width' value='235' />
        </style-rule>
      </style>
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='97310' id='1' param='vert' removable='false' type='layout-flow' w='98504' x='748' y='1345'>
            <zone h='5546' id='3' type='title' w='98504' x='748' y='1345' />
            <zone h='16975' id='4' is-fixed='true' paired-zone-id='5' removable='false' type='flipboard-nav' w='98504' x='748' y='6891' />
            <zone h='74789' id='5' paired-zone-id='4' removable='false' type='flipboard' w='98504' x='748' y='23866'>
              <flipboard active-id='1' nav-type='caption' show-nav-arrows='true'>
                <story-points>
                  <story-point caption='The mortality rates in 1960 from the data of 237 countries averages to 348.33 per 1000 adult males.' captured-sheet='mortality 1960' id='1'>
                    <capturedDeltas>
                      <worksheet name='mortality 1960'>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' field-type='quantitative' max='10390423.225400038' min='-9536380.6514069475' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' field-type='quantitative' max='20317965.393037274' min='-20421278.088434771' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='The African continent has the highest mortality rate that averages to 459.1 per 1000 adult males.' captured-sheet='African mortality rate' id='2'>
                    <capturedDeltas>
                      <worksheet name='African mortality rate'>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' field-type='quantitative' max='9410336.4245071076' min='-12634449.05338552' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' field-type='quantitative' max='12321345.517399136' min='-10445074.39860674' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='Australia and The European countries excluding Turkey and Kazakhstan have the lowest mortality rates at 200 and 203 per 1000 adult males respectively.' captured-sheet='Europe and Australia' id='3'>
                    <capturedDeltas>
                      <worksheet name='Europe and Australia'>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' field-type='quantitative' max='11855994.730702726' min='-4918827.2207441917' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' field-type='quantitative' max='21357214.885065835' min='-12950426.866321664' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='The rates compared from 1960-1970' captured-sheet='1960-70' id='5' />
                  <story-point caption='China has shown a drastic decrease in mortality rates of 47% from 1960-1970, followed by 18 other countries with more than 20% decrease. ' captured-sheet='1960-70 mortality decrease' id='4'>
                    <capturedDeltas>
                      <worksheet name='1960-70 mortality decrease'>
                        <selection-collection />
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='On the contrary, few countries have shown a more than 10% increase in the Mortality rates with Vietnam being the highest at almost 21%. being the highest at ' captured-sheet='Mortality increase 1960-70' id='6' />
                </story-points>
              </flipboard>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='dashboard' maximized='true' name='Story 1'>
      <viewpoints />
      <active id='3' />
    </window>
    <window class='worksheet' name='mortality 1960'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='African mortality rate'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Europe and Australia'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='1960-70 mortality decrease'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Calculation_47287801345564673:qk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Calculation_47287801347444739:qk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Calculation_477170460219936778:qk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='1960-70'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Mortality increase 1960-70'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='1960-70' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='1960-70 mortality decrease' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='African mortality rate' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy9aZMkyXnf+XOPiLwzK+s+u/qePma658bgJDECMCRI8VhxV7smwmiSqN19
      sbbfRLZma7t6sSIpHitKK4qSABIkQBAEiMHMYAZzH31NH9Vd3XVnXXlnHO77ItujI7Myq7Kq
      egaDYf7NuqsqDg8Pj+dxf24XGxsbOhaL0cfPHlprarUaWuuW40KInu7f2toimUwSj8fD9izL
      Cn837UopsSwLx3EACIIArTWe51Gv13Fdl2w229K267oUCgXy+TypVAqARqNBuVwmn8+jtca2
      7Z7fVQiBbdthHzqhXq+jlEIIQSwWC98FwPd9XNfd8zlaa4QQ4c922LFYjHQ63XPH+/joEP2o
      USbolQGUUti23UIoKysrCCHI5XIEQUAikWB1dZWZmRmEECQSCYQQKKWoVqsAbG5uksvlkFKG
      7SSTSWKxGMlkMmw/kUhQrVZZXl4mCAKOHz++o0+G8bTWSClDYszlcti23fXdlFL4vg9AJpMJ
      742263kelUplx4TR3o6UMrym/Xmy0019/GyglGqZqds/ePu/6DloEkqhUGBjYwPbtsnn89Tr
      dXzfx3EcyuUy169fJwgCrl+/ztzcHEIIhBBIKYnH40gpGRwcZHNzM2zX/IzFYhQKhRaCHh4e
      Znp6mkajQa1W2/FOQRBQKpXY3NykVCrheV44++/G2IZpc7kclmXtuFYIgeM45PN5EolEy7no
      GLXf1z5+va9ZfewLvu8TBAGxWCyc9WD32dz3/fB8+6xmZrLouWi7WmsSiQTDw8NYlkU6nUYI
      QTabJZFIUCwWaTQaDAwMkEqlcBwHy7JC5jAEZcQb13WpVCot0kEsFqNUKrUQlhCCcrnM4OAg
      W1tblMvlkKGEELiuGxJypVJhfX2dTCbD0NDQruPXy6pnrkkmk0gpw9Wg273RsQ2CoNnHcrms
      +yLQw4NSCs/zqNVqofwa/ShGRDGzkGVZSClxXZdisRiKJEALcUcJznEcbNvGdd1w1VBK4ThO
      i7gQnQWr1WooXlmWxfr6OgMDAwDk8/kW5jK6wOrqKrZtk81maTQazM3NkcvlmJycxPd9LMvC
      siyUUiwvLzM+Pt7SbyOSGZjVJhaLkclkHuq4a60pFossLi4SBAGO45DNZpFShjpPtB9mXPoM
      8JBRLpdpNBotx4yMbQigE4IgYGFhgWQySTabJR6PP5il7t9nZvlUKhW2o5SiXq8DEI/HWz60
      gdYa3/cplUrh39EVJp1Ok0wmw7+VUgRBgOu6zM3NMTw8zMbGBvl8PhR16vU6iUSC8fFxhBCs
      rq6SyWR26JPtK1kqlWp51sOG67rU63Wq1SqVSiUcn2w2SyqVChnSfI++CPSQ0Ule3Yv4oWmZ
      mZ2dpdFosL6+Hs7stm2jlGJ0dDSczaLtSClJpVIdl37XdfF9n2QyiRCCZDJJrVbreF105THP
      kFJy8uRJ5ufnaTQaJBIJ6vU629vbzM7OYlkWy8vLDA0NobUOxacooquZkf0/SsRiMRzHQUqJ
      sW4qpSiXy9y7dw8pJUEQkM1mGRoa6q8ADxtKKQqFAp7n7VDOdjPHdTN9aq0pFAr4vo9SivHx
      ccbGxnrqy/b2NkqpFotOvV7vqKzG4/GWlaW9b6VSiXq9zsrKCpZlEY/Hw3fNZrPYtt2xX+a9
      fN8PFez9MkEv+lM7giBge3u75Vh0IjLiXX8FeMjQWrO+vh7K89CcUaempnY110XRIqMKwejo
      aHjO2Ph76YdpK7pqmJm+UqmE56Fp0w+CINRJoiuCschYlkUmk2FgYIDr168zPj7OyZMnsSyL
      jY0NKpVKuApERTTDNMYwYMSmbv02OlTUj2HbdjievTCCeWelVMu4CiEIgoDh4WFWV1f7K8DD
      htaara2tFmJfX1/HsqxQ6ezlA7ZbegxRRglzLxhHUifRpFqthrpDO4wy3cmEWC6X8TyPhYUF
      pqenW9rb3t7GsiyCICCdTpNIJFhZWcH3fY4cORKaPjOZzA4zqLHMVKtVfN/vOOsLIUIL1m4i
      pXEozs/Ph6KkWZ2klDQaDarVan8F+Chg5FzP84AH3tLp6enQ62kcPAbGKmRmq3YnWDweDxXc
      Xonf6A/VarXFhGqQTCZxHAelVGixMvA8L1zBjBnXwFxnjrmuy9raGlpr8vl8aKGq1Wpsb2+T
      y+Uol8stVqZisYht2y26hhAinPW7EbfWmkqlEo6JZVnEYrFw1TCiVa1Ww/M8hoeHQ8a6fft2
      OBEUCgUGBweb49lfAR4+jMMHoFgsYlkWuVyOd999l6mpKXK5HPV6nXQ6HdrNM5kM29vboenO
      EG0+n99Tge7WB6M3ZLNZuoW7GAtRrVYLGTMaPmB8A7Zto7Vmc3MzbH9lZYV8Pt9UJu/30bKs
      5sx6nxi3trZwXZd0Ok0mkwkngU66iJHRofsqGTWxRpm63ezbrnwXi0UAcrkcWmtu3LjBiRMn
      +ivAR4HoDG+UP4AjR46wtbXF1tYWqVSKSqVCoVAgkUiE5sUgCEKCMmLIfokfCP0EQMvs3o6o
      X8GIN1EHk+/7lMvlkDENoRlZPpvNtsQBxWKxUFZXSjEyMhISn+d5uK6LECIUv9oJ1RyLhjBE
      rzFMYsa03ckY/TvafrtPIpvNUiqV+qEQDxtR+dXMrmaZrlarxGIxPM8LGWNgYIB8Pk8mk2F0
      dDRcpo2I0i5+BEFAEATU6/Vdlep2x89eMPK1UbJt2w59ErZth0ydTqepVqtUq9UWZ5Zt2+Ry
      uVBHCYIApVSLWNdoNMJ/nfrVzQsePd8uBnYLdzDPN22lUilKpRJLS0stq29/BXiI0Frjum74
      Uba3t3FdN1QMJycnsSyLWq1GIpHYMbtF/25Xdo0pUilFPp/v2RoE7JD/u8GyLFKpVCg6mTAJ
      IyIbAnRdt8UyBU1dx9jgzTOFEHieF9re28eqnXA3NzdJJpMt5uP2Gb7Tsfbz7SsHNFem4eFh
      FhYWuH79OoODg81VpqeR6aMnKKVavMDpdLrFBGlWBMdxwhBkM0uambJdXIku+1FP616ikWnH
      OIV6hRGJgiCgXC7veJZlWczOzoZEGtUXzAoVvceYVqMyeifil1KyvLxMLBYLx3Fzc5Pl5WXW
      1tZCT3m7lajTahE9F2WOSqVCPp9ndnaWWCzWdCz2PDKfUJjl7pOC6Mc1ntt25awT8bbPbkZB
      jC7jxurRi0gTi8XIZrNks9mO4RGmr+3EYvoppewaJm9s8u3yuxHPomJPIpFoifnfzcJj2tza
      2mJlZYX19XXS6TS3bt2iUCjQaDTwfZ8PPvggDByMThhRWjDPMOOQyWTI5XL4vk8+nw+DBX9u
      RSBDGIbIPgmQUpJMJqlWqy0fZ79KbNTp0414e+nLbolOnWZOM6b1ep1YLLar5SgIAuLxOI1G
      IwzXqNfrYWhG1NoTJUqzUnQSUyYmJnAcB9d1GRkZwXEcHMfhiSeewLZtCoUCAwMDLVatqGJu
      RLTou5lAuFqthpQy1J3S6TTpdPrnlwG6EX0QBC1Wgo8TQoiQAcxHMHZ482HarRSd2kin0wcm
      /F4Qjfg0IdsmitWYMDs5z6IwUaBRG7yZjEwQn23bYVAfEFqAzH3tE4OxOk1MTLT01eg74+Pj
      KKU4duxYV39B+9jW6/UWsdSscsbU/HPLALvhIGbDhwXzYZRSbG1tMTMzs4MZO9mqjdvfJKU8
      zP60Py9qLjTWGXO8F+Yzzj7D2CbEIZVKhcxkJiIgTLaJhmN366tZHTpZeqJ6SCdE/Qjtx02/
      Lcui0WiEEamfOgb4KGfOXmCIwhBTNCJxN0aQUobxNr0+J0oUrutSLpdIJlPU6zUymSy1Wo3r
      77/L0vtvMH72Ihee+zyBCkinmw6pXC4Xxt3sV48yuQBRr7cJb4jG4URt78Ya1v7+ZkUwcUhR
      Iu5k24/eb8bbwHjepZShR9vkNxvF3rIsEolEPyHmo0C7dcLInSb4DB7MoNEPG3UgdYJZUW59
      eInS6h3s6hJCWsQnzqOcDPW7b5PxVwisNI6qsOZlWL5X5PNiiwELrpGlPjBG7vQFnvnyV3es
      QPV6Hc/zwoSaXtFoNPA8D8/zwhXAEHl0MjB/u65LEAR4nteicMdisfCcGSMD44dwHAfP87h7
      927oWzFMZa6Jx+NkMpkwFTORSIQORWNcWF9fZ3p6+udbCf6kopMr3yiLruuGdu69ZnqtNctL
      C1x9/QfotStov0Y2Ljg9rInbIHLN66qbd9AaUmkAgRBN0+XajXUe82Eo2ezHI7rEFUZ59DOf
      72iB2m+gnYFRltvFDNipoJq2M5kMruuGSfjm2SZfIeolNkwFTSdjsVhEStkx9DrKaGtrawwO
      Drb4S4yOls1m2d7eJp/P9xng44ARhxbu3WN8fGzXdECtNcXtbW5ev4p141s8k61hT4Vnd1yf
      cjoTbDYO8chE7mtInnyUdOTZUaXc9/0DJau0O5/aQxrMz+iKCM1JwayC0euSyWSLKBUViTzP
      Y2VlhcnJya6Mao5HLWlmJYrGV929e7epvO/7jfs4EO7cnqP65h/y4eA5nvnl3wmXbs/ziMVi
      YezO2z/+a+ylV5hMegwO7MwJ7hVaC2yhgOZ9cQGJN77L1bFJzl58Yke8zGEztUz/6vV6iyxv
      fhoGi8fjuyqzxhHXKX5JStnRqNB8386OsahFMMqIMzMz3L59u88AHwe01izeeIfH8h6+/x5v
      /sW/wSWGI3xq1RrW8EmI5WD7Dqe5wuBQ68c/iFUrl4RSIDABC0LAuPSYL6x2bPNhWM4MsXme
      R6PRCIk5OqvvBVOfyHVdVldXOXHiRCgCGcXboH1iMMQd9T5H361dmdZa9xng40C1WkWsXyMx
      KMCGi9x+IM3EwfWWmFv28JVgcPLwn0Rrzd0NzQkregxuOMM89tSzh25/NxidwJgZO+lEe8Hk
      Jxw9erTFixwEAaurqwwNDbWYYQ3MM4wfoh1R4t/Y2GBgYKDPAB81tNZcee8NTiQK4TER/tdE
      3IbZQYv3Fg8f0qG15vKSR2oLRtLGygO3MtOc/PXfYSA/eOhn7IaDEHwUUsodgXbwwPts8iaG
      h4d31EnSWrO9vY3v++H5TrFV0GSyiYmJn/9YoE8qjGJ5+d03iM//DYN7VAKxJVS91uV5N49x
      NyilWFhUPD5gI+UDIqwMTrGxXaSwtrbvNj8J0LqZDba6uhqmlprjJtR8bW0tLA7mOA6FQiH0
      bBvxzNREtW27aT79Gb7Tpxa+73Pj2mWWL7/ICXGL0Wz3hBQDKcASGqV1uDgcZBaVUuJLUCra
      Djxy9w1evfoua1/8Ol/6ytc+MfFTvcJ1Xe7du8fo6GhI0CZke319nVQq1WIaFaIZjr6yssLs
      7Cy3bt1ibGyMYrFIOp1mfHycu3fv9leAdhjv4mHuf+cn3yd26Y95NnWD0VRvbVlSoBF4wd6h
      zrtBCMEzp2P8tObjRd4jITS/mHFxXv8O//H3/g1zN69TrVS4Oz/fErvUK8w4rSwv8e6br7Pd
      VgjgYUJrzfLycljz1DynXC6zvb0dBuBBq+c4mlJqCg+bWkmmwkXfE9wGE8eyW9nu3fDum68x
      OPefeib8KDYqAZdWFF884XBYm8z1VY/gruJootVKstXwmY85zOZsCg3BgKPZcAVq/BFmnvsl
      xqem96zcprVmfu4Wd176C/LFeSbiHncqksrM03zhN/7ZgceuGzzP48qVK1SrVXK5HNlsNizB
      kk6nqVQqeJ4XErshfsdxWnIwzMS2ubkZpnL2GeAhQinFD7/1JzznvI0leyPhct3ntfkArcFX
      4NiSr5w+PAH5geb1mx4TFc1ErEkUSzWfeS15YsJhMNHaP6VhsSZYmfkcX/i1/6nrCqS15sb1
      D6n/4A84Hq9hRS6713BYPPo8A+PTTE3PMDo6+lDMq9GqbgMDA2Ewm4mwNXnWJn3T5C9HEfVI
      RzPU+jrAQ8Td+duM1q5gxXur+3OzEDC3EXB82Ob4sAVaIx9SJKttCT572uFv3m0wpuFu1aeS
      tPnyWOfSKlLATEqzeecNyqVfJZvLdW178d1XeDZe3dHOTNxjcul7lOdh7u8F1578TWZmjxCP
      J8lkcx3jjEw4daNexw98stlci1PO9302NzfDjThMVetSqRRGsWYymTBEutFosLq6GpZN7xSC
      HhVx+wzwEDH37os8k2t0PNfutPGVZm4j4MunYjhmGj0E8XfyFgshyKSgWNXcdAW/ctTe8xHn
      Mi6XvvlvCSbOkh2b5sjsUQYjpcyFEMjhI/ilt2iPwtBaYwnBQAxUsYFd/jvcexYlT3PHTeHb
      R8iOnGPmyFFGRkYIgoCrV95nbf5lMrEa6AZV6zGOn36SbLZZTv3q1UuMjU2G8VPGHFoqlZie
      nt4RemEK9ppS7QMDAx1FsjBk4gBj3UcXeLUSVpeJs91j2fCblpqHNeN3EzWmhyzWtwOSohkP
      1CV0KIQt4EJwG//eHaq34fbLcd4dOcP5L32d0clmJThHKDylceROhjNIWQLlaKZGjaPKJVA3
      KFWuM/+25JKaIVCSI9k7PHVMhIxZrLxN6fY7LJQFCSfgWDJgfulJpo9dCIv8Oo7D+Pg4q6ur
      HcUsIQRDQ0MEQUChUCCXy5FMJlsScfoM8BFg5MgZyms3yeyy5ZrWmkvLPts1OD/hYH3Edrhs
      QvBGJeCRUQenx2dJIYgJiMUgH2ugq+9x6y9vsHDh6/iuy8CHf0sy1p2TtNasuHBxtHXmtaQg
      nxXks6D0XQQ7GTeXFuTSMD2iAYnWgltrd6jXTzMyMhLa/U34c3sSfsvzLIuRkRE2NzfxfZ9M
      JhOKQkYM6jPAQ0Izpr7R1a6stSZQmg+WPAZSNo9NfjyJOwIYzttcHDn484SAk/Eq5cv/BQGk
      YntLazXHIp3sznFm5eskui0WfCaGLeR9os7FCjTqD8o3mnIzg4ODoaWn2wpoWRZDQ0OUSiW2
      trbI5/NhO1LKPgM8LKytrmIv/JjUyINj65WAa6sBDf9B+MPRQZvjQx9f1tpg2kLGAwKtsQ8p
      bmV6pBYhBGnXp1RVZFO7LzvthBsozQe3E0CDqftMOztu8e7yAlPTMzQaDaSU4W40ndqIwqwY
      AwMDVKtVCoUCQ0NDD6pO9/ZK/zCw20xiLAymnkz0+Pp6gZsv/2cuDDUAgVKay8seVU9wccpB
      CE3MEk1vb4/mUZPl1C3PtVdIIbBi4CmB/TG6PWdSsLDicfZ47wW8oDk+JyYa3CwcYTC7QDIu
      2CzB+OQRPM8LHVj7avO+8mxMp6a+aT8atA2u64YbP0Q3j4MHOb3txD934yqF1/49j+UrIXF/
      sOQRdySfmTLDuzsBdzLTRSuqtZcRiZaDMV7N3UIbHEug0Xv242FCAEFwMM/w8UnJlbcDltcV
      x6csVooDnD93BNt+oFO051ib8dstzFuIZlVpE17dT4lsgxkYs8ya6m1GzjQzSb1e5+78HZbv
      XGNk+3UuDFVa2ik24LHB3omtPYTAVFQwTGBMf2YjPJNsbvpn6o92Q9KGRqBJ2T+7ahn7gWUJ
      LsyscuVuhqFcBTs1TSwW37HZRbuNv/13aB3b9iQg6ItALTCDYkIBopWdjXNmbW2Nv/kvf0Q2
      KDCeEZSE5r1aouWDrNY0iIPHxRi7tZnpjRwbLVxrfpoVYDfEHcFWSTPYgzQSFQMPkon2sHBs
      QrNRtZmvfYbpY0fJZrNhlWnTr17KLppz0VU0unL0GWAXdEoTlFLyhRd+C4RAwAPBIhxzwY0f
      /R1LxXfIH3IzRPPxdsum6iWVcb2seCLZm+IdrV1qZO5oXm57nNRhmGSve48MFVEjJzh+8izQ
      zCM2ld1MSEOnFMhOiCboR0vK9BmgRxiXvRCCgXw+PGYQHfh8OkXxisdL24qnjtmkdrGZ94LD
      zsKpuKAeaNJ7ecF4YDWJzpjR+qTtDNA1OR0Q8nArycgAvDP/IadOnwMeVI4z9v9O8T7t7xKN
      Du3Uj344dI+oVqsUi8WWRBUzuJ0+7ums5DyKn152uVXYmen1cYkWtUZAraJJ9yj/m3BjkzRi
      Sh6aIli76RpRaECr5jiZkvFGX4lmcBliNsW1ohBCEA+uh/sbRzfvi+6fHD4zwrzt1rPot+p7
      gvcJ3/ep1+vhwAVBQKVS4eVv/zlZrxSKQujmT8urkUhBTEo+n9PcWPL58UZzNUgfcjXYLxQC
      AkG8R9dDdFY9dNLM/fEyBBmtChdGY95nuG4TwomxMlfee5FnP/8rCNHcZd5UiYbWzLloiqT5
      3dQt7dR+3wzaI1zXbRnc5kdTjDbW+VyiuPOGOBilQArBIxlB0dO8cdllZsbh5MhO2bUbuhFH
      u+m0G9Jxyciw5G5FM5vpIq700Favz2vFg5qnQFgxwugYQGjZ6rQCaK1JxAVi5S2KxS8wMNAU
      PZPJJJVKJSyRbmr+GBhrned5XL9+nXPnzoWbb5i+NBoN5ufn+wywF9qXbTBlxDuVqeqMhbLP
      ywsKoeD9eZ9TMzZffSLek2Oqm0VmP8R4YkTw0zXFbBf/US9tHSjb6/4tRmwyM7Oxx0ffqT1i
      M/q84xMBVy+9znOf/1oYDBc1A0f/GZgsseHhYZaWlvB9P9yPzWSIZTKZvg6wF0wKnUFUfu2V
      AyqBIHvb59SHPs/d8km9VOfb362wsNl71thhdAbbsohlBC8XfG5sBwTq4Cbaw6Q9Gtk9+vdu
      15rz8ZhAlN+mcn/HGuDBDi+Rlbm9ffPtcrlmjoHJJ04kEuRyuebuOQd+m38A8H2fSqXS/aP3
      SJPDMY0b+TBJBZMferzx30q8dt3jEPTYM546avPMIzHIW7xUUHs+s9s777YK7cUc7bP0fu49
      NVnjpy/9t1BUMnuXGYKPmmqN3mHbNrOzs2QyGaanp8nn80xPTzM+Ps7IyAizs7N9BugGrXXH
      ZHGjBK+vF5DK73J3K2ISGlZrOxLBVBHK363w7R/W2Kp+tFwghSBuC06OSERM8/Kiz92ypubv
      JOJ75YDNznk9u2KvVWq3ZP+97rUtsGi0lDmMxWLhvr/tbVmWxaVLl1hdXQ33JN7e3qZYLHLz
      5k3q9Tqbm5t9HaAbzFam7ahWK7zz8o8Yufc2F+P1ntqypCToYj3MBYLU+y5/v+pz+ktJzk/1
      vhv8ftBMwtG8cs0jsaDIK5hfCrgaE4xPWVwYltwp+lxe1uTK4MoAOSJ5btIi2cWE2i3u5rAK
      fudrFTIohFucGkQ332jX08w+AYVCgePHj7O9vU2lUmFoaIiFhYWmPtBPit8JrTXlcjnc0ieK
      +fl5yt/7Ix5P77RadIOnNN962+Xkvd0rvxUckM8k+NKTsUM7z6LQWvPhss+NKz7nXEi2vdNS
      oFiMgV/TTNkWR+7LBTWluSw0oxMWF0atrpWoO2G+6LF5fJBHT3Xf86BXGGtPw5NcW5ng8c/+
      UwbyQy3n2300jUaDeDweirDJZJK1tTVisRj1ep1sNttUpg/du08h6vV6uJ1PO1KpJJvCBnpn
      AEtAMgEajdhFcRjxoP5qjb9Z8nn6Swlmhw+fN1CuB7x61Se3rHiSzqLGpCWZ8DWbFizpB1Gj
      SSl4GsHmkuLFgmJk3OLpMdnTrK21Zn7ZDe0EWjffXXexHGitWSr4TI40I3ClgGNTNpWaz+Ka
      Kd2usfUdvvOtf8cv//rvkh8cbLkfHohZJgUyl8uFgYVTU1MtnmHoO8J2QOtmCT7j+IJWG7jW
      4EoHqPXcpgCEBT6wV8GThBZM3/Z5d7XMnc8nee6sg2Pt3wrkB4oriz73rgacCyDGg7zbjn0U
      grjQ1AJNS60TYFAK8r5m+17AX60qTkxZnB6Uu6ZYCiEY2K4zJqJiomlX75wGBMxKgV9oKh+B
      1rw3J6h7mvMDrZdm/SI3L7/D0194PnyWQVSsMspwlOjbw6j7DNAG13X5/t98h8zaDaJmHvOb
      0oop3TvxGzgJQSDB2cXyGcauAOMVTfkHVb59L8YvfyVJqsdSQVprNioBb1z2GN2Ax+mdeZJC
      ILWiqiHVdosQgryApzzNypzP91fg+ITFmcGdK0LTRKwZTklmcge3sxzpXpmFv7/0Y+pPfZZE
      MhnuSGnCyDtZp6LKc/R4nwHaIIRgdHwCe/l9nohX6DGBqyOiwViZpMCXArowQKcw3qwC/1qd
      H03afO2xZgL9Xul/15c97l0KOO8L9hv+L4XgJIo5ZfFoF+lLCMGEBWMNWJoL+OuVgAszNjMZ
      GY6VEKKZNPwRGrYSXhHrfiSsEXlMzJBBe55Ap7Hrm0HbEIvF+Edf+SpjL3yDZfdww9MSIRoX
      +HuIIJ2QVxLnxSp/+XdVPlwO8LpkWWmteX/eY+N9xblg/8RvkHNsGr5HbQ/ilcC0FDxeg/lr
      Pj+86bNUbYoYmzWfoqsOVedoL2RiItxLDJrfLZPJtMT9dMoLMOjrAHvAcmL4h/B6tiMmoX4A
      fhJCMBBA5rLHrZs+r41IvvpChqmBByZHL9B8cNsjuKk4uod3bi/To1KKurRI9ki7lhCctMAr
      Km5uK66OQNmyGEs7XBz46BhAdfDkxeNxHMehVCrt2Pa1PXvMoM8AXVBcvsuU/fAYIGlL3JiA
      xsHatBCMNKCx7LK8HVBzBavFgPKWplFRzFRgsgd5rRd9QB4gd9gRgpMCbi/7jD3qcGHso618
      kY8FbN0vchuFlJJkMhnuJgmdc67DAL2PtJc/pxBCMHv2AsukDtVGFBkbgh5qhu6F0cDizo9q
      vPTNIpWrAY+sKZ6qwvhhlJUIfK1JHKKpTGt63EeGiYTi5ruvUqtVd5xzHCfM444mwpifhviF
      EH0G6IbswABFJ7v3hV3QvtSmLf1Q1tsYgulCwGBdkxYQ2yW8wPRjPzE6da3braD7xscQ2oQj
      NU+WXuLNb/4+5VJrSLpRiqOZYGHfIsGMWus+A3SD4zgoK8bDUgOEEHgPSeAMlbwe+rZb/E2n
      a+oa7I+xfMpBIUQzyedY7Rrf/H//eEc+geM4LTWcukX0fup0AOPs2KtSwl7YWJtkg84AACAA
      SURBVF8nW11H9JYBuCeEEFgpSVc76AHwUcxeNcShRKCD3LrfnGGtNZt1xVvzHo0NwePxq9y8
      9AFnn3jyQT9Ec3NyE9R4584dkskksVgsDGi0LOvTxwDwoK4OENb32Q9DaK1ZmLvBKFVqnuJO
      DRIWHEsfnOSEEKTbvUuHgNJ636bOXgitDEx9wheAIFD88LLHY0oylBD4WnPnw6ucefyJlvcL
      giCMB8rlci17iJmx+NQxgAmTba/YsN9Z5tL7H6DnA3ICxoVmTWsKOc3ZQUlmF8rb7TmnBwTX
      4zBxgFDj9me4jiS7T8V3L11hxfNJSZtBDlsTaKdsZrK32su4tIcmmL7s9uyypxnQgqH738EW
      0FiYD9sy95qNtavVKsPDw+ExE1z3qS6Oe5iQYq01ma11nk60GgQLFcUPij5fPWaTsppMVQto
      qbhW9iHbJWxhJAHvOhIahxODPKVQgzFS4uEUr9Jas+V6bFo258J32V+bWmuKgWJBw0yH82YV
      NuVMTKU7I46YNkzK427PWSxphtp4LLe6wN07t6k3XB45c6alDtDQ0FBY2kUpFaZIDg0NfXoZ
      wKwA0WCoXu+7ffMmE4VFRJvEM2JLnhXw2orm8+PwwbrHh7c1549L5jY0cQtW1hVxRTgJhk9t
      hsdwtLY78Wut8UTzPqlBoVlOSbxYc/tTX2iE7fCZAbupAxyQ+KOmwaofcBvJ44cw/yituZUR
      PHoywVR2Zzsm8d0kyZviv1Hl1BQD3v05ML8S8HjbxgpT2ue1b/1XxMg4R2ZnW3IGot9eKcWR
      I0f44IMPmrVfP435AFrrcMYxlc56vW/u1i3mvvmfOFO41/W6sh9wWUKt6DN+K6DsSIbcw5mL
      FJoNG7ZiYA3Y1JUiQJCzBCezNjlB6J19mGVutda81/A5FXdIH7DRpvjkIc8keWKqsw0pWpPf
      iCrtP9vb7DRp1X3F377l8lnHouz5LCnBqZjEVYptLdkcHCV94SnOfenLYQGzWq1GrVYLTZ+2
      bVOtVj+9+QBCiFDW3O+WnaNjY8wNDKHX7nWdXDO2xVjdZ25JE9PiUMSvtaahAubzNpODNhel
      IA2UA81S3OaxDkkoe9HpfjKzir6Pjjk7oj/3A601N5I2/2Tc6tq36CoczeON/uwFthTUHc3r
      FY9tBMdikh/XFHEBFpr6ygr2+nd5/dK7PPO//O8MDA7uSMRXSoUb6H0qGeCgEEKQzWY59uWv
      cunq+0yLgHKg2A4ExxKSGBC7r3hOOoIrKQGHyOXVWrPsKEpjcc7FJEORc2kpqXkBZcsi00HZ
      1VqzHCgaGrY0DFmCKSnCTTB6LXUyL23s/CC6uHngVWU9CDg2HX+w2V8HdEqf3K2P3URWX2mk
      JziTtFFAXsIpp9XCd8PVuCuLvPPv/4BH/+k3GBwZ7dimlLLvCOuETDbLlarN95ddvr+tue1q
      /nLN46+KCu/+N7OEhLigeIApRGvNnVjAXFKzOBHnqTbih+bHOoPgpXrAqt55/1U3oCIkGdvi
      pNPMI37H13hKccv1ueErgogetOgFvOn6vOoG3PIV9SDgSt1jU1roi0/xQTLDppAH8uJua8Ho
      Pne9OWh5lVI9YFgJcrJJ/J1wKiYYtgSVuZtc+tM/pFKpdKwjGo/H+ytAJ9RqNcbiPiOJOEft
      pm18M2XhCFgPNDlLkJKCr41afD+A3PKDyMNerDKeVjTG45yxBCmgWxHpuBCcDBSlQKGEYFw2
      s7p8rSkJwZNShLs+ZoUgB7yh4JglkWjeDkBqBUqRd2wel81ojBUNHwSaUwmLc0Lx1pUP0I8/
      zYvXrvKZjVUm91Ha3QsUS0nJhYcQ57QXap7inWXFbA+8Nu1ILALWF+Z57Y9/j5O//OsM3d9R
      0rIsUqnUp9cRdlik02lWAo0lFNVAM2JL4lpzra5I1BW2LcERNAJNyQ1wlcITGltprg5ZnKhA
      dpeKKSWhGLQkIz3Mt0ekpOAqrgSK23GLCUvg+gGzjrNjy9MBKfhcONEJxiQUtcBGhgqu1ppx
      IRiPmG6Pb23wxluvMexVGW8mcPY8VpYUPFIPeGXO4x+ffzhuc6UUH25ojuZlWJHCCxQvfugy
      WJEM9picP25L7tV8SnMf4v/wL3j+d/434vF4qz7yUHr8KcPIyAgv/Mv/mcFcjpPJGMdjkhFb
      EBeC01LyuIKLDc2zPhxNWiwejVOeTbB6IsmTeYe5wc7DGijF+xnN9tE053sUNoQQjArJ41pT
      i0nyOcEiOz9cp6A3AQwI9rTuDAUeX6yUcNEsqNb29hJVpBCMOzZq3aPqHc4SBrBW9vij1xu8
      /OMKi6UH7V1e9pmpSo47u5UVaMWG5zM4bPP5o3Es2wGtWxxl0M8H6ApPw0+dLIMixmfKa8yX
      NTM0LTQmbxfg3I7ZSDARg6WEYLKu208RS0g+I3cnFKUUVa3JWBYV3+dGTKLTNs/nJRlLcD2h
      GHp4IUWU/IBrCGZSgup208i63xo/0wjeWw747JHDkdRQ0iJf87B9HSbda625tab4or0/PWM+
      gMezgreLUJYB9VqNZKo1xL3PAB0ghODUqVM8//zzTE1N8q3/8B/4UmWBtNY9OZ4GpOByGibq
      CoGgoRWuJcBXjKTjLTPYtu9zOWcRu/+1BZBAsqgEWU+zpWx+fdgiJUWYc3s8IViqwJFIQ930
      jmhebKfrgiDgRlzwC+M2a/WAQgdrzW5oBAHv+4qykCS3FGpGh3sAHwSFSoCoaxIKKq7GDxQf
      LPtYDQH7lLByUvLiXZ+i5/HE2jXe+NM/4Yv/6n8lkUyytbnJrfff+3Q6wh42SsUiP/rX/5qT
      y8s9Xa+15m1PUSsr7ECznRIQt0jXFfG0zZNorPtEshEEcDrOUxOts9v1DZ/t1YAlX/DlXOu5
      90sesiY4+hC2mV9zPapjcR7PQNXXvL4ScFH3lhOmtea26yNtm1kJd7Xm4mcSpOMCz/f50a2A
      siv5tfPNhH6gxdMbaLi2rjg9ZBGzYLuu+MHLDY4Vmq705bRg/KkYhbuKRx1JfJ+xT4b5X6wE
      PCskWgrujk9hHTmG9+FVJrfW+wzQK5bu3uXtP/1TxubmiAcBH2hN+b4odFpKxtquv+z7HJuK
      YwEDVrMSjiU09+qKtfWAuFKs2pK40iTHHF443eqwcwPF9697PGJLbrua5zL369r7AT/Z0jyB
      DKNBDxoPpJTiNa35/KTkJ2sa5WsaCs5JycQeYRFaaxZcj21pcd5pOsC01twak3zuuOD1Oz7e
      W37Tbf10gmeP2s2Efq3IJSw2Kh4v31Y4Vz2qQxYTxx1Wl3yOzQehfqOU4qUxi89kbU7E9s/s
      ZlxKgeJ6JeDRZlkNAk04dn0RqEdMHjlC8I1v8Mrv/R7i3j2mpWRUCDTwbhCQtiyi08igEKy4
      mmcy0Q8nOJ2ySNuSAHg6Jlh1FZc6EK9Wms1AMBCHWnC/nprWvF1RnNGyZW+BgxC/1pq7gWJk
      0MGRmgEUZy0LsYuYrbUm0JptDSuBAsvmvN26WpR9kJbN4h2f06p5ZvWdOt++IYlVNfU4pKdt
      3E3F8FrAoBLoVUVprc6sbk1RFEIQq2uG8gcTqcy4ZC3JaFxz09WcslorZvStQPvA9PQ0sy+8
      QNyyGDEyNTCmNWs0K78ZlXFYaxZrqmNG2VRMcOR+7c9hG5xAEejW+vkxWzKV1NhSkLcEW75m
      reFTa8iOnuH9ItCaNQmPZgUpW/LIiMUlrah3UXq11rzt+rynBMtKM2xJzrURf7MAleCDVUW6
      8kDUGfMFZ7Y0x104W4KJqx4nVprED80xzOlmbH6YrXX/35Cn2L2iauvzu+FI3GIgYfETX/Gh
      33xPTX8F2BeEEIwMDVG2LESk7IajNS8rzYKvOOZYTKG5oRUN1awgupvuZkmJ5Xp4CizxIGlb
      KUU2KSjXmsu1q6GmYFJ0NwP2KgpprXnXD3hsOkbq/ow/HJdcmIDXVxRPaUJFVmuNAqr3g/Oe
      tMDuskxIKRlZ9XltXjPTJT5K0Mxr3qvfm8pncdAmm7DJPaSE/2lHMO3YrARwzVX4QT8WaN84
      cuIEH5w6hbp2DUnz4/nABVczHcANSzGIBiF5Nm+xV5HnqhcQz0hisml+NOmcUkpitiAAHJpE
      WNMC+yHEgiql0AmLiTbv7YAjGc8qCpuKstIkpeBuoLEtCwvJuRhhrFE3TFqS51OwHYf5LcVs
      D1UkOzHtSlwwMBDjqQQ7HH77aacTxi0YT0p83ReB9g3btpn97GeZn5lhSwhWfZ8NbXFMNQez
      rOBVBUsJm5keSpyv+4qJvN1iOgxLfPsQnWsHLajsYpbfq+CVfz8p5LYfcDq/cxYPlGazpriu
      wLEtGkJyMWbxpAWP24JMjwSWEjBuSbyUZNk+WNzPWVcyfKfOS2seD8G/1hG26ItA+4ZlWTz1
      hS9Qe+opbrz/Ph9++695bG4BKZpiw9O+pqo0iym9Z11RrTWLCr4USSCJuunNhy8pGAIaWuMc
      IFNr1fO5k7CxtGKiEbCZsnm8Q+m3xZpPpi64GDt8USspBM8kJbcdwdxmwIke00Cj/ooUgskt
      xSuOz+fy9p6r6UHQN4MeEr7v88M/+hOc195ksN7cU6CiFHcGLI4PWJzYpcag1pq/q2l+80zr
      PrZGGV6verxzx8MWMbaSAyTTGeqBRUqAlBbO9iZHNgtdZzGtNYu+Tyln8+yQBWg+KMPxpCDX
      dlPVV7y8EvCkknuKOfuB1prXqz6Tm5qkPli7DRVwfSzG14YOt3tOu64RKNVngIcB3/O4deUq
      c3/wR0xsNIs0BVpzw9ZMTjicSXWXNN+o+Fw4HmOkrRZJoSGYq1pUBo7y6Ff+OwaHhshkMi0f
      cHtzk7f+3b/lyPxcR1l21fWoDTk83i1uOIK7VZ/FNcGZw1bF6oCq0rxbU4xsKwZ7NelEoLXm
      clbw5akYzkNiTqUU1+pBnwEeJhbuzPP+//P7jN1dwgLKvs/SRJxfGJQo3cydcTU0hEXdioEQ
      iGqJRUfwwnGHRgDrnsVqcpqRZ36J2ZOP4DhO15IuWmvuzs8z/3/9H0x5O2WMDxo+Z484jMRa
      9YtOs+h8TVFYVZzYxbustaYQBCSktWtFippSWMCC51O2bTJak1WK1yrwbPlgiueG9rk86PC5
      IYcj+9iqKdp3jRErNTdrPkPaQmxsbOhsNotlfTSbs/1Dw8bGBm/82Z/jvfkuuloldzSJFYvh
      HjvH8PkncDJZkokEqUwaNGysF1i6dQ1nfY7E9BmGT5xn5sgMjtNb4EsQBHzv//4/OXPrw/CY
      0lDQmneE4DenJY54QPRRBoj+HgQB37ur+VyX3bu11tzwfGIDMdxAkalpJmSkopzvc003HYNO
      QoLWpBzJsaRg04dNX+OgKdzzOVLVeGhqAmJCktxFyVVKsWRpapMOq57maMLmmWTvRQ5MG9dd
      xYYvaGiw0ZwWgkEpECsrK7rRaDAyMkIy2S01o4/9IAgCNgoF3nrxxyRyGS48/Qz5oaFdc189
      z2upbb8fbBYKvPZn/x/CtrEHh7BSabKDeRq+j/PSf2XW9naYEttXAq01l7cD4kXBSIfZfcX1
      qGQdLmYkWms+rGnmKgFSwQCCmlY8Nepgi+ZOM91eY66mubrqks7YxCwolQKOrasdyr26H4p9
      O6E491yGkwOCsi+4sqEolBW2q3mEppMwfAeg7PncVTBlS2JacycQrHvNsvGjgh2BeuLOnTu6
      Xq8zNjZG/n4WfR8/f+hE0O+//TaV4hblD37Kk9X5Pa1SJU/x+go8AaAUqxo2lSYrBVt+wPBQ
      jNMd6iZu+c2Cj0MHsCmWA80ryx72po+6n9OsJNhDNq6rGJ+UDA/YnBm0QuNAEAQorfnpksLf
      UAyhyYpmbnJ5yOHsiMXVgs/1FZ8ntMWI7O6/sOv1Ovl8PiwatJ8M/T4+OWhfORqNBu+//Ra/
      9c9+mxu5HOvf+2NGrd010KwjOTOiuLIGg55P/USSpyYs1sqKrU0fp9rZCZc/hDE9Ywl+YcLm
      1QHJFydtSh4kbBiONUseCjSvbwc80qbISyH47JTF2qBkvqRYdzUDcZsvjDT7l4vDBWExsQfX
      2/l8PqzN4nke8Xj84G/TxycGiUSC3/7dfwVAPJOjpkDL7qESZgWZTkgagz6vr1n8D1MW2Zhg
      ICaYX9NM7rYt5CEgtSbhNJ8zEFF9HCHQGoYk3ClrjmXF/XgjGYZVjyYFo8lWI0Gx7lNY0Jzb
      Q5wMADvaYKPRwLbtQ1dW7uOThfk7tymVPO7JZgJL0b8feIbGtgRZu6k4T8ZgJiHIWJqhSYf0
      /QjtxVLAQEMQP0zZ6F0gpSCoaW6VNScyOxNyTmUEP9wIOJaVYaW/3eAqmuaeLjVcNbCFYOPc
      Y9hSypCrPM+jUqmQTqf7TPBzimq1iuu6oT4XBAHW5iZnKs2Yovc9xbOjMUbs5l7Cb0l47mSM
      uAWrVc2lbc16A86MyFBhXKnAwD4qRewXEkhJTa6LeVMIQTSstpfQim4hgwGwMDrB+G/8Fk9f
      uNBcAaC1eOkn2RzanuLXRyva/QalYpEP33uHVdfHB7al4Mn7kowlBUcCTXnO401X8ezZODNZ
      idZWuKO71prVrYDjB0hI6QUbDZ8FS/DYpE3u/ooTVeh9pXhrU/HMxP4q/LVDa03Bspn87X/O
      s2fPkc5kALCjpaRNsaCDFi3q42cHrTWLC/eYnJpuKQdZ3N5mQLh8cTIWFjyJ7uc7YUGp4RPY
      VliCRIjWGdTTAvshhSRH+6uBq67muRm7peS8QuIpWPcE6+UG00MJhvetmrYq7OvJNMPf+OfM
      XrjYclULWxtdoFwuU6/Xw2q+nyTsp9LzPzSsra7s+F6FpUVsr4EALMEOU6gQgvmG4vys09FM
      6geKdBfjked5Ya1909Z+UPMDkimrhfiX/Bjv5B/lxsmv4D7/L7g3eBLLsnHVfr/5g+sLsQTD
      3/gXnGojfrgfDWpmfqUUrns/oOt+OblMJhPWdHccp098n1AIIXj8yadbvk+pVKI49yHPJYMw
      Cb8TjqVivHHT45ceixFriwXaqAWkOsyBhtEcx6HRaLSUWzfnzYSaTCZ31iwSAldp0skHc7BG
      sDF9kS/8xjdwHIdisUiltM2bL/0FvzgC8X2opeZ1122H4d/5l5y8cKHjdTY8qM7bXpvdtm0q
      lUp43LKsls3H+rPxJwvt32Lh3l2SV98ktsdeShlLkKn6FF0YuR8MoLVmYdvl+gJc6CD/G2KP
      rgDGoGL+7UUf1UCjleLFFUUlkCgkQ8dHKRQKQHOFmb95nXMpl4F9mGCTjqThKGpaoJ5/geOP
      Ptb1WglNBbjRaLTsrm1q65udNcx19XqdYrFIqVTaczODPj4elMvljscfOXOW4pFHOtagU1rj
      RXZb9zVkIlaYtbLP9duax6VsCaOIEnQsFmuZFG3bDidH27ZxHKdFp4ze6weKeV+wXoUJCRng
      s1nB4PAIk5OTjI+PI9GcXruGtx3ww7s+hbru+C7tSDuSE0ctbp0+x9O//PVdnbsSWsvqGc42
      ezq1d9wgCALK5fKOa/v4+JG5b9Foh5SS089/nXv6gVKstcYLApbrHt+tBKx7ioWaR+AITB6M
      5we8ezfgYly27BmslML3/fCbQyttmN8dx9mxF5h5trl/xQ3Ip2w+n4MBW1D1FSUsxicm8DyP
      137yCt/9sz9lQNU5kZI8mxBcX/R5ZdGnskeK2IZnsTX7WX7xG7/TsR9R2GbLmujStZ/k6mKx
      GBJ/PB5vVty9/1AjB7YPVB8fH2ZPnGDtmecpvvF9cqKZFvliTTOQj/HlMYvFbYWPxfHUg8pz
      NV/jN8BuS+Yxu+0YX5Hv+y0ikOM4oVRg6EgpRTwex/O8UEQCuN6AcUfz442AQkPz9LDDkAz4
      zp//R046Pnd9mylbkbovZNgCnshKSr7mjbs+2azFxeGd1qnVhuTu4KM896v/Y09RDS3sEd1N
      sb02ZHugFRCKR+FeU9VqR9kvkUiEO3f38fFCSskzv/IbvJ1IErzy1wwITV55TOYtZnKSmVwn
      8UDQqTac+X6JRCIkfONzEELgeR6JRKJFKZZShoaVKC2dTUouVzQXUzabwmexrjmR1Hzdmyeh
      BIkqnEmxI/Qoaws+kxWsNQJ+eFvzpaMxEhHleC57ll/473+355i2rutDt1UgKup0Wi06xZob
      k2oqldpXyO9BK5710QohBI9/+au82Wiw8uJfsaolp7qkG2it2agGDHYYdtu2MXtsmXajVh9z
      3GxTG51QzU8jOiUsie1YDFk+d5Tm1H1GTN6Xuc6k2p/eipGYYNUN2G5oEvf3d9rwJJNPPbcv
      mpFRIo6+TBTtBG6WtvaZ3uy/1Ilwjc4Q3RWwj48PlmXx9C/9KpXnvsLXn0gwk5VUvaZ84fqK
      QlWhlGKu4HHtjuJUvLPlJ+pljtJJN4mh/ae5v4jF3XieuXpALmUzsc/Ct0IIzmVsbi55XFpX
      +Arm7ClOnH1sXwxgdyLu6MuYOjXRl47KcuZYdMnbLeKwXC6TSCRIJBJ7drQ/+z9cWJbF137t
      n/DTb1dJ3f0pb15zGZtyqNUVW2XNc8cltRV4LiG7JrQ8LGNHUmhmTj/C+tUNnjtgRq4Ugidz
      Fku1gB9UJUde+AXsfW6KKM0s3m3Wbyf2bl6/duaBzps2KKWoVqtsbW1RLpcplUp4nrevTvdx
      cFiWxdFnv8pPr0hGHIvzdXhGSH4hY6FXRXMDio9h4hFCMDYxQT6X5bB5+OMxSe74RdbWN1ha
      WNjXvQ821IkQdlSUiZ6Lol0MaheHohalTjDh141GI1Se+/joIYRgYmISMTNN3BFsB5pNX1MN
      NEppFl3NYkOx6irUR/hNRqRm/dZ11OA46pCP2Q7AmTjK2fOPMjLWXqd7d9iddADYafXpxAS7
      zRR7nYsykHG49UOwPx5IKTly4TGWvzlHPdCo+4FjWjTDERDgKsXYmM2F9EcjigZo7GQavb11
      6LbKwmFlbZWBoWGOHju2r3tllOijnt1uL62UaklKaPcftDvVuq0eRqEy1/SV448PQgie/dzn
      GE5nOB7AyUBwMoBTPpz2Nac9zVlXsbjt7/h+SmsqgabgqUPN3BaQnL+Gf/wiN+Ijh3qfMeEx
      2CiRHWzfbHZvyE4mzN2i+6JE3c4E5vfd0MlyBPQZ4GPG0PAwg//oF+lWsVBKSbyuqKlWY8eb
      2z4v3fP54YLPj4uKN0uKLf9gnPBoUMS78haVk09T3GcbUZqLSzi98j5bq73t4BNFqAP4vt/i
      PIgSdCeCjf4tpfzUe3w/bTqKEIIjj19kK925FI4QgtlA8PaWIlCaoq9Y9TXrNc15V/NZF8ZX
      ffRCg8uVg8WE2WhOllcprCyzpewWOuql/9EJeM23EPEEhcLavvoQWoE6WXHMg6LoFgC3l9jT
      fm37v341io8fR2ZncR872zXALIkgte7znUWPN+/5XL3nk68KbJrlSwYQDEjJQTQ3Xym2XZ9S
      w8W9fZ35wWO4gdrha+gVCaHZ3twkndqfTXWHFaj9704hEJ2wl/mz27Xm71js4Wyy/FHh07iy
      CSlJHzvalQGEEIwjebomOOsJHvEFR9vmv6SGen33FaB9UlRK8Wo1YDFp4+ccTmUaVOtVXi1q
      Nup+S1RyT/m/olmR7vjx4zu2Qd0LLVagbmi3DvVybSaToVKpdLzG1B8yz43H4/0V4GeAzY0N
      aj96mf2rjg/QQCP2yDdoJ+JbNZ9zozFmUuY+xVm9TGNU8N6WolEJmIpJju6jBOKko3j/3Tc4
      cux4z33XWjcZYD+z225eXsdxSKfTaK1pNBo7zkfvj2YUpVKpT+UM+0nHQD6PNz0By/uTm6Nw
      EChXE2h6dmilpGDTg5nIMVuAbQs+N2KhtcW3l3xeK2riuTyfj9cYt1qNJB2DNBdu4vv+niHQ
      BkKIpg6wl9Oq3dnVTU5Lp9OUy2WKxWJHBmjvtJSyT/w/Q1iWxcnnv8zmIVyxjpTkij636r0b
      CSzRtWQP0Exn/NqYZCoBx7NxLiWnaDcSdZJEpksLvPSt/7yD9naDXF5eZn5+ftcYnrDjlsXc
      3BxCCK5du9ZyLplM4rpuR3OmUXKjzjbHccjlcn3R52eMc489yvqR6RY9YL8Wr6yCLVfRUJp1
      T1EKdr/fprn1625o7rijyTWKFO3UDgZoh9Yav+Gy+uMf8JMXX+y57/bExASvvPIKs7OzbG9v
      U6lUGB0d5ebNmyQSCU6ePMm1a9fwPI8TJ06QyWTCoLYoXNdtSYaAneGy5pgQgkwm0yf+TwCk
      lKRPn0Ddvhdac/a7IntSsFVUvFRSUPW5l7e5kIQAwVMZa0dC/rKvmdqjylzZ06SEICt8hG1T
      1xIr8KhrScZq9rHsBVwqaeIC1iuaRE1zDInTtt+F1ppKuUwqlUK2SS7y+vXrYebMq6++CjQT
      Ho4ePcrq6irlcpnTp09TLBaJxWJcv369oym0/Vh7WHR0yeqLPZ8sNLa2D2TKNBiUFo/WNOdr
      MKkFF0dtTk865DKCK7WAVVdxq+LxWrlZ1bmKIL/HJheeam5hGhOC0fFJ/nYrxQ9uK35y2+cH
      SwF/Oefx8j3F8Dqk1zTnqnASSRw6ikB/97ffo1Ao7BD17fPnz/PGG29QrVYZHx9nZmaGO3fu
      4LouUkp83+fWrVucPn16zxSz6GxvdIT25dSyLGKxWJ8BPiFoNBr48/cO1Ub0W9paI6RgLC4Y
      jdss1zVbLmglmJGaVzcVp2IWb60GxGLN7WQ/M7xTErClQKO5pZOkszkeKVeZuF8bSFfaSh9G
      n09zy6r2/r3w9V/hzu3bLC4uMjMzw8joaPP6GzduAE0FdmBgAK01iUSCpaUloJndMzc3x/Dw
      MIlEAlNNOpfLdRyITiHR5pxlWaTT6T7xfwKgtaa4tcXLv/+HHF1dP1Rbvm7ulQywLWDk/nIi
      gMmEYDLR/EtrzWQKXloJOCsF2zXNilB02jRpruiTtW0Sus66lKiIuLwbQWex9wAAD4JJREFU
      9SigU0ZAIpFg5siRsP6VMcXbx48fD2Xx06dP4/s+o6OjTE5OhsT7wgsvhIT96KOPorUOr20n
      ZnNde8aY4zg7Nnnr42eHwPd55zvfZfj9qziHiPJQSvF2AkammrvDCGEx0WWjISEEaRu+Mmnz
      4qJPKtDUO+xJprWm6Esu5iXFIODDwv/f3rn+tnFlB/x37jxIkaJe1sOWZUm25bcVx/EjycZG
      nd0kG8Sb7XYRFAX6YRGgRf+h/hHFAv3QfikKZLtoFoskjWM7iZ2Hn4r8Em1LliiJz5m5/UCR
      GlGkOJLlWDbvDzBIaYacGfmcc8+99zwekYo4X1SA568uZVeZd9ZiV3z1irtT8ZFqV3PCm1eV
      UOZ6N16bYFN5v9H2P4Znw8zMDLN//gujTxnjJCI4Lpztt1irdlVYJmwFJwcsZosWI3U+s1gK
      UAiBhg5L0z51g5uxGAPZbF3rHiZgfZN4VQlmC99obW5A5fe156xFo+8xbA1+vPw1g4VNysTT
      NC1YVSsHHY4wnBR2hEqveIHmpwWfy48D0jM+X077pAsaWZijc0c3F22hWdidDUxfuRK5aFu1
      Nmht9n74puuFMEcNf14rq8zwfNBaM3f3Lh1PaZuqG6jr6F5fb474OB9wdTZgMaPpyEO/hhFR
      PJrxuTbjsxCb4dyuee70CXemAkaaNNyWR4/IZrMNC4aFscM3tdYENuzbh3eBw/5+5efwa2V0
      MSPB1iGfz+Pfnnzq79mIUav9TN7X/Ol2wOmixq0cW3rpF0Wf1nxVCBCtSVqaJ34Aylo7fq2v
      L5LwA8uxQLWtZ9ZKg2zkHoVDm+slw7cyW2Uk1Fozce0aHQ8fRzo3Smg7Wqitx9/sM9mSz8UM
      eK4iL7qhb58PAhKdFjEllALBWhKrRvc1K8Ket99uev18Ps/3V75dLoy1Vh5A7YZWVMLnml3f
      rcO9b6/SlYseL7MWVeO3js9orflyAU4djZGKK77vt7idAf3Ep/2hR5cPsYoHIUJMyv1/r05r
      DqwhR1ml0O+/z8Hjxxue8zA9xXf/9xnzl7/gSDC/XBcoalRos1GhUWJN1Ai9l5XnbfnDuKl2
      Asr/5z4aW+oLVVR56M1rprKakfbmo8V80efygjA05NK51BvgyA6bIztAa4tbj21u3/VgosSY
      KGJK0TEX8N95OFASOhpZfqXInTnDmQ8+aGhstdbcvXWTvgufcEhpRGrmALUnr8fq12aV1X5n
      qyvAVkFrzeMnM+TaADRdvTbFKZ+BYrlrJFVjVq4OUfFsLMrJL/VkYWcAd3/0mB21OdKjKPga
      SyBeE2WaKfp84yveeMUl4dY3pHv7LEa3Kf5zxkfPl2+hV4TefAA1ewY+MBOLkd29m6EzZzh9
      4kTdKOWKLBYKBR5/8SnHloQfWG6SV+9D4VTFKD5sI6VpNCoYfn5EhJ42zfi4g9aCqzQPui0m
      FgKUKleIVkqwAKXKgi8CxYJPejIg5mkUkAx0WSGALBqvJFyeKPKoZGOjmS7BrqTF3oSmzSon
      rl8pCG8cdmlrEgdkKSHZCTqzvK90uEawFy2LuVOn2HvuHKN79jR9ZoDJiQl2zNxBQrbYbrSm
      H84TgPp1IBtdqBZTGXpr0b5jhMLUBVLlRXAGEzCYaBYOZ/MopXlS1BQDyBY11zMe6aKiKEJX
      HNpd2JsISPsWu9sVjwsBN12LIIB8TnNqv9NU+IGlhKrGU+qCCPlz5zj30Ufryh+OJxLMVSfs
      S08VTomsZ8GbVYVohoiY3mJbCBHhwPFTfPPdZ7zi3697TqPRvi8u9MWX5WLaV/zdXpfBpFQT
      XC5PB5xZCm5bKMLXOc2ZfevL9/b8AC+n664rZUWYHR/n7O9+t+7k+f7+fq47CWA5VbfqVNW6
      QrWT2krJCrOe/+KTSqUY/eAfuVloLJhRDJYlMJgUnFCTildDkZ1JR9Hj+0zMrG8JvFAKUItU
      G3VD2WbPWhaF3/6WNz7+GDdC84taYrEYjB1dkVyzoixKmPDIsJ4RIFxTFMqTX7MEuvXYMTRM
      Zvg1SnVkc12jtV57k3Nfp8XttEdhHYWv4q4CW1UdFR9IJxJ0fPwxvzh/nmRyg+Wkgb79h8mE
      Wq6qSmBbrauzWRbf+P9bE6UUw6/9ggfeU3ZgX+OYiGBbFq+lhIvXinyfbtBwuPbeRPCTyw3x
      ZiyLvj/8gSOnTz/VvQIExcKKfGQVtvDhCW+9JPZ6hM+tzf11HGfTC942S+A3RGd4dDfpnrG6
      xyL9fUOnrHV+p6t4Y5vFnXslLt1duwSm1ppLkyWGZpf9cy1SN/9kveRyOab/979IyfK9Klj2
      88OFbxu5RvVuuN7DP6vkl6j3ZWiOUoqRN9/lXn71sUh/X4ka/FD+vrf6FZkmZRT9QDN1L6Av
      9Lt+z+P7P/7xqerHaq25evkSI4UnhB9NAVWhD1vvqBa2katkil29GOzZt5+pgXEqRRrWNbLq
      pc0zoilMwrFIeJoLP5WYXtTUXkprzcyCj7NYx6Cm00xPbyxzTWvNxK1blD75d2p7Aq5YBWpm
      XWsVo3ZvwMT+vHiICId/9SG3dKr6czOuzZX480OfHLJipab5teBEr82QhivXC3x9v7xCFARl
      uXqy6HPxQok92dUjSzKf587t2xt2fe9+9y07g9VDnQ31Q5YrGWBh1toMq4wclmWRSqWMArxA
      9G0f5M6J82Qv/BtN98OAiSycGy2nQDarqbUqAkAHLBYDChqsfEDRg79MlRUgfT/g5IJeVUYF
      oCMIuHXhAvr06cjRCGG8hTlcWb2zYDdyd6IsfSqlVrTMBJ7JxNfwbBER2rt7yQdCwopmYdss
      oZnxrxcS/+MTDz/m8N6YVW3MfXBb+dz/SOfqCj+UXZW47zcdARrJav++Q2R+/JJuWTkHqU6C
      az9Y2yugVrMcx6Gzs5P29vYV/6J05zZsPR5PT5OKKPxRCcuV5/l8+bAEbS7jfYqaBu+ICF3b
      rIZ9yQKAZHJDnoWIMDZ+jHs9Q6uOKWi8klM7JxAR4vE4yWSyXGVradJsVmRefFzHpvCMcpa0
      1nw97bF/R5wjvY1LcB4asLnRQJR8EfQ6S5+HERFKSx3rw1TzASoZW400zLbtajlDI/AvH/39
      A8x4inY7mhZEFQGtNbmSz3yg6I43uYekwusRgmm9KgyiJEL3OjtAhrFtG4kn0Is1G76VN5Vl
      0HrEYjFSqVS1qZ3h5WPXyAj34tsjnau1ZrYYzV26+LDIZzPw+rAbacXIcSG82p9RismBAbyP
      PuLEL3+5YflTSjH6znke+itl3A6fUG8G7bquqeXZAiilsLbvxn9wv+nKjohwcdrj7IBdDYQL
      goBvpz1622x2tpeFzPMDZgOLd/dGjwZVUrb4GREejY4y/PbbHD16lGTEJPe12DO2j6/efJ/r
      X/yJMVVkyguVRQm/VrAsywh/C2EpqVOkcDUisLtbcXMu4EBX2SXO5D0WlI0g/HC/hKMUXhCw
      uydaJmCu6PPNlM98HgIRgt//nvPvvbd0vc2RP9u2Of3+b5g5+QY/fH2JoT17aXh39SJBDS83
      7T39LEyylCjTGK2hKy7cmC9HEJQ8n6sZeHXIIuUKQZ8iUwDHgmTEBJhL9z22ZeBuXvNQWSjf
      fyayJyJs6+vjrXfKyrVC4cOBZkb4W4/hA0dI+9HclcmMJq7g7rzHXx8FnNgVo30psFSJ0BWX
      usJfb7Wx6GtmZjTbXUWHIwSeRymdfqpnicqqES8cGWryeFuLzu4u5tq3Rwo32N9j0Za0yTk2
      b464JJxoBrPeOY4l9GyzuJHzySgYON5GfDDahPxpqQ52teHP4ehQE9bQGrhujMSRN1m4MLm2
      GySQcIT9PZtjHJUIr++ymey06NIQcxQ9Y/s25bubXrvyJlzWpLInYJY9WwsRYfy1U0zEB9Fa
      c2OuxKN6PYCfQSqGpYTdXYq93Yr7eZddwyObf5E6qHrJLxWhN51cWo+2tjYOfvQvXNK93MPi
      ajag4C+VxNeadNajUKemfxS01viB5sG8x3RudTg0QKDB2XkE62eqIyVTU1M6bOkrr4lEgni8
      ydad4aXl/r17zH7yrwS5eSae+DhBuW9XX0rx6uDG0igLJZ/PfioRzwtKBQztijGYWlYmL4Cr
      MsqhD/6JVCq1SU+yNqvqAmmtaWtrM0FtLc6OwUGudY3zevxzxrotgqXkl9ogtqgEQcDF+z67
      taI3JQQBfHq7wOAr5XYygYYfrT2M/+afaWvbeMzPellRFUKk3McrHo8b16fFERGGj5xkcr4c
      9mypcuO69STAhEkvBizOaXrdciXy+1mPoYHlJdfruSTDf/MPP6vwQ2gS7LouqVQK13XNqo8B
      gB07d5FWvQ2Pe563Kk+3spACK9f8t7db2G2QK/l8vhCQ7Y5xuLcsZ3kP8iNn2da38WC3jVLN
      B6jUWjGuj6FCPB4nNnKcbINcdN/3sSyLUqlEsVjE8zyKxSK5XA7P88qNOJYa1okIp0YcvvKE
      XYMxjg/aOEtBR1dKA7z61q+ei9ehRIREIrGqGK7BICIcPHmWa4Wuusdt2yafz1frSlX2jSqL
      Ko7jrBgFkq7i1wdjHAxVj3uQVQyc/hDXXV/5xM1COY6D67rVOj7G9zeE6ejowD38Hk8Kq9cs
      lVLVBZNYLIbjONX3lmVh2/aKsvi1O8yPSw6ZAx+y9+DRZ/4cjVCWZa0oaGUwhBERDh07wY1C
      56pj4aqCvu83rSQYlq/HeSFz4G955c2Nx/hvBtVwaCP8hnpUBNq3k0BmxbHKBLhiQPP5fNWF
      tiwLfymis7Y5yoKneDj8Lsdee+vZP0ATGvYHMBgqXPrr/zDM1Krfh0NmbNuuNlqHslGtpwBT
      eZsno+/y6tlfbwm5M32LDGsiIvQNDqPurD4WjhSoTHphOZckvKTua7iZS9J26u85dvjYlhB+
      MApgiMCeA4f5/IdX6C1cxm6wFVzwAmwFpQBilqA1lLRwezFB3krhd+zk0Dvn6d7WeF/heWAU
      wBCJ2SDOlVmXY90lRMpW3tOCANfzHRSHTpLP5WhLJFmcSeNlpkiOjLNz7Ch92we3bK1YWVhY
      0E/TcMDQOnx39Qqz333Knvw1JuNjBAOHwElw6NBBOru6n/ftbQijAIZ1kV1c5KcbP7D34NEN
      tSnaahgFMLQ0W88pMxh+RowCGFoaowCGlsYowAaphPkaXmyMAmwQ0wTk5cAogKGlMQpgaGmM
      AhhaGqMAhpbGKIChpTEKYGhpjAJsEpXcWMOLhVGATWKrZDgZ1odJiNkkjAK8mJgRwNDSGAUw
      tDRGAQwtjVEAQ0tjF4vF530PBsNz4/8BSDp3Y5GlBQgAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Europe and Australia' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Mortality increase 1960-70' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Story 1' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy9aZBcx3Wo+eW9t/a1t+ru6n1BNxr7DhAgQIIgKZAUtVqSLct+sjxvwh6/
      iJmYFxMx8WZ+6N+bmJj5Yc/ze7KfLUuyJUuUbMqkREmUQIIkCGIhiLXRC3rf9+7aurZ7b86P
      QjW7gepGbwAaJL4IMNhV9+bNm3VO5smTJ08KKaXkMY/5lKI87Ao85jEPk8cK8JhPNdr8PxKJ
      BIZhACBTcdATCy42TJBWFxar9Z4FSylJxqPYFH0dqzuvfCCRBrtN3JfyF8M0QRGAACkhkVZR
      FIFNW+Q9Zeba+SR1FaSJzZLb+jRMQHWip5PYNGPBd2lDYLV7ESJTqK7ryHQUIUAqTixWK6lk
      EpU4YommSekqdqdnGe9rEo2EcTsFyZTEogmUdeg2U7qG3eFae0FrZIECGIaBy5WplN55CqP1
      1IKLdR2aC5/l4DMvoGkLbr0L0zS5evZXNIpzOK3rL6SmafJ2i8GLB1fWiFLKOeFZKVJKdB2s
      GgghME3JpXYLU6lCXtwyjEUTd10vJSjKws8/6vSQSsR4equZ8znJhORGaAe2VDe7KqILvrvZ
      I9jzwn/C6cy8dyQS5uJbf4vNolJ36Fv4/H66Om/hHP8Jxf7c7ymBjiEH3trP0di0HWUJiZ6e
      nubi6b/n6V0m0bCJx6lgtazt94zOmvQlD3PgiedX/VusF0tI8d0Vc2gw0NXKQEczBT4X7vIm
      Dj31bM67FUVh5+GTXHzXZKb3JgfKYuQ516va94dIXNA+YkWz2NhcHMZmWfi9EGLBZ6oiONKo
      8723x4jEJfkecdf1uX7ffVVhEinItvGdSumyCxqNa3gcC2/WDZCOKqxW29xnbreH7cf/JzTN
      gt+fh2maxKPT+DQFVVXmRvQF9QI2l8zywdWfMTbcw/4nTuB0uXO2iRACTVNo7U2yucq65Kiy
      XMbCDuq27X7owg/LmAMYt3sxyAz5buIEmOaI1kGw95dcvfA+pvlxTyalJJVK0dXRTkdrM0ee
      /QIDESfR5MN/WeCORhcYpmAyqnJtwMmY4yTBHV8lHI0RTSq09BvMd5KpqnpXeYqAJxvT5LmX
      /35WTeB1Ln293yUYnlbon1QwTYgmoHWmlt3H/mDB6CuEoKiomLy8fKSU9PX1oEy9S6FXIIRA
      VdW5d56KmGR/KlURHGkwaHScp/na+UXr4fV6EfZKEkmDcOxuZVoOqbSca8dQ1CRh2UJBYdE9
      75NSEo/HmZqanLs/M6pm/g0PDzE9PYlhLPydVsKiI4AEbsxY6I9Ini/TUQUIAXXaJDcnTZRC
      hWK7idH6KlfTCXY+cRwhBGNjo1z+8BxF0TOETR/tNid79u5nsPs3VOStrgHXk2xDCSHoGoVr
      fRqmtQSH1WCvr4BU2sRXdohBBPHUBSB5VxlCiAUN3lB2t2LMR1VVpJQLOoo7y8vFQMhFUf0J
      Tt04jT2vjuMnXsTucCz6nHg8TselVzlUnQSUBcIiJXzY56eiSGVz0TTi9u95qdvG7uONS9Z/
      bHSIqgLwuZd+z8V470qcxiorqqoxEG3kyPHPLKv3T6VSnHnvHZqvneXzX/oGbk8eqWSCsbER
      hKLR234emxrFHzzEwUNHVlW3RRXANCHkb8DvNRCiFVNmertqD1S4BVMJcGqSoajEbXMipaSt
      5Trhtl/QZJ2msBiSRoixju9TgKCkfFX1W3fmN7zfJdlfm8Ki9dEy7CQcDrNj1wEuTk8yG5+l
      Mj+BEB8PkllzQgiBouQ2L3KxlPDPx5Rw5maagw0WbBaQCFpa20iZRTRUb1pS+AGsVgsWkchM
      iO945lRMZcue5/DlF3Pro7+hodRgNinJK9tFsGzxH0cIQSC4mabg5WW963ykhFDUoHdEoDqD
      1Dbs5enD+5acc3x8r6Srq4vu1ndoqhS0XvkNcVlEePwmXkcKtwMO1tuwaIJ3b35EbNtO3J57
      T+rvZFEFUBVwJ0ZJVz3JhSEd6SmhdPwc1S4dTQjGEwpXk8VUb9nFtt0HMi9lpkknZvH5Mjat
      XYPK/I1h+uQi3w24BVNRQfmWk6QSYX7yT39Dtbuf6nyVvHlmSlbos4KVNS2WM/QuR/gh08H4
      PE5OtdjwWpPk1R4h1fYaUctmqqpq7rpeSsngYD8dbTcoDJQSCc1gYMGUMBGS5LtBu91pa4pO
      LBahYctu2m27mIldpC3cxLHPvLBknYQQPHnsBB+82czBJh1lmT+nKSXXuqyk7fs4/LSf+vrN
      5OUXLO/m2/T2dGH3VjMWSxOdGaAsMMrnjmgIYc+8k5pp/8ONk7x76qe8+IVvrah8WEIBQrqG
      Y9OTHHjiOHA8Mxz9uI9SvRebJgg4JLv3Hmfb3oOZFzZN3L4iwtXPkYi8jnVeyaaE6VnId67e
      A3M/uTWYRkZvMTHcjmbGaGywYLdJTPPjukopMQxjrvdabu+/UrZXpAh4Elzvt+KIR2mqUFDV
      Di6/9R3q932NkmDFXBsmEgm6rr7JtvxOZkYlPgvkVSsIIWgd0FHdNewL9mKzCHxOweDQGfr7
      Kth/5CQfnE4SrNmKxXJvl7bb7cZesJ/x6TPkexVUVSypCFLCqUtQUbeHo4dPrqodhBAcPnKU
      GzeucePy+2ypEWypVu/ytAkhsFogMRta1XMWHwGqD7DF55/722q1svXEV2m+epbC4fd5b9TC
      l17+2HYUQhAoLsHpctP81gV84THiaYHPIZikjKhu5ZCtc4FibBQONGgk09cJ2SX5bg2Ltniv
      bZrmAhNoOaOAoii33abmnMdnsXsUIQj4VAqTlRiGjsspcNkFee4pOq7+AMP4OuWVtUBGCZOR
      AewlAiMCE2EIzZpUBxQcNoXw7DSRuMR2223ZWDJLV/P3SSS+xvGTv7+iNsovCNDWrDIwluJA
      k6C+3LLk9fF4kvzi+hU9406U2+1cVJhHaUEEu+1u00kCbf2SnfueW9UzFhVHf47hqrisgkDw
      qzRfqaNiZBSX82O/phACm82GzWbj4Of+Z8KhGewOB6HpScrzCrn83s/JuSq0ARAC7FaB/R7r
      FVnhzQpwVrBh6RHhTmXKjiJZhZhXE0KzJoMhD/W7T9Le/OGc8MZTgnJ/jObr7+FweigoLMLl
      clG1+yuc77pJfdNu7CiYhk57+0/ZWxsFwgtGXFWBTSU651pO09C4ZUWjcUFhgHcn/ahyHM89
      PFhj0yajIRv5KzR57sTt8XDw4BOck9DS0UFJgWWBGzalQ8ugH0/xAWrqt6zqGSvuj4UQbNu9
      j21AW+tNTEOnNFiOz58316A2m42iQDEALpeb8fFxNFeAREJsyBEgF/fq2bPeley1ua7Ptsed
      n9+pLGMzJqFZiKXtOKtforapmlg0QnL8AgknWCxwM7wTqwa2xBXO/26Mk1/9j0gpKSuvpihQ
      Sl5e/tyzNO0PuHr5J+yuiAAQTUjCs5KAT0FTodgxwsBAPxUVlctui5KSUmqrSthRMoXHtfQk
      ttAn2NdkxXGPSftyaWu5RmXpVloHJ6gpiqAo0DXmJaVVs+fYZ+YWBVfDouKo6/o9V3sj4RA9
      rR8ydDWMr+4Y+w4eBTI/QiKRoL+vB90w6Tn3z1TlSzz+JYtbd9ay6pvtpXXdwDAlmirmysqa
      QVnu/Ht+GfMVZTEcNmgeENTt+zJNW7YhhMDldJE68CdcvPgqgZIKnnzmCyAUerq2U26zIYRg
      eHiIy5fOU12zaU4BhBCUV9Zwq2MvcDrzDobk5nQDU6lpmgKT5LsMpqanlq0A2XILA0EmQ9fv
      qQCX2iW+4AHsdvuyy1/qud/81p8BMD09RcvV99CNNDv3ncDnz1t7+fPDoWOx2FwoRE93F1XV
      NUsKUCY0QOf6Rx9QVFJBxW1PhZSSq5fOYel7FaEIqu+D/980Td5YRSjESrnZrzMZNjm69ePJ
      oikV3r6WYjYpOdigEvDnFoj5CrCU6zQSh9ZRD9uPfYvCouK5z6WUTEyM4/X6aGttZrCnhR17
      jxIsq5j7fmZmGv+80RcyQhOPz/KvP/i/aQqmqC2GiajGCPtIJyLEpzs49MJ/WLGJkkqlOP2b
      H3GorienXEgJM1FJy4CLYy/8BQ7H+i/9zx9114Mlunh5zx5UCIHFYmHPwWMLPo/H40z2XWG/
      30BTF5oBG9ELtBT1pRqtAzrXB93UFUaxWQVv37TTNizZXJJELOEOuXOFPNfEOm0Ibk5Vc/Tl
      f4f1jiDDzCpvgHQ6TW/z7ygLOMnLyyeVStHb00mwrJLmy++Smp3GH6jD4y8iGpqgYcseXC4X
      h5//Y1KpFC3dpyl39FKYuoBW+3ug7Z8bMVaC1WqlpvEA/cM9VAZyX9PcbbL1ia/eF+GHlcuP
      aZoMDQ0SCBTf1b4A6re//e1vZ/9Ip9NzF/nz8lclrKZp0nz9CsH4e3jsC3ul9RR+KSW3JiSb
      yu/txst173LroiqQ77UQ9xwlLEsZnHGgCzfPNE6yo9aGy768tYBcGKbk6nAhe5/+I5yuxUcy
      RVGwuoqo3HwUl9vD8PAQb//6FYqDtcz2/4ZdwTHU2Vukp67iM2/R3tGNK7+GYFk5hYWFFJVv
      pX/Gy8RMgmjCYPuugznDOpZDfn4hH14bwK2N47QvHPmEAFWRSPtm8gvuHerwIEgmk3z/e9+j
      qWkLTufdSnlf9gP0tF+jMHds1bIwZcZflOV+bFpbTpkSSOmCrlAxtQ1bqW06gK74afR1UeDJ
      uDWXu8iVi+EpSdmWF/B4vUteJ4Sgpq4Rtzuz0hkIBNh94DhlZWVE4gJFCPI9CmUFCvkehW1F
      g1x975+QMuNlstsd7Np3mCdf+FMOPnmSU797k0QiseQzl6Jm0x76RxfG5WQxTIH9PvX+q8Fm
      s3H8+DN4FlklXncFUBSFPU+c4FyPxkrlVkpoGVX5aXMhQ9OSiSh81Acd4wJzHXVguaNRS5/O
      qx/5Kax6gqnJcS6e+gG7/eco8Zu367u8Si32vImEn9J5C1vLxWazs2ffEwghMMTdI4eqQF3e
      OL999b/S29U6J6SapmGz2XjmxHPYbLYcJS/vXTZv3kJB/Zdp6VW4NQA//m2MeNLEMCUhvZLi
      kuCqyr4fCCHYtXv3XeZP1lGzaqdkZ2cn1dXVC4bSbKEer5eEFkCI4RWVOTZroyNWxJGyAYp9
      gpZhaI7V4NAtzMy20lSi4J7nWDClJJ4yUYSY85dn67Ee5taWSo2S/CkmB3+KsMOBKjE3p7kX
      qqrO+fkVRblrpEjpIJ01a3LhqaqKsAeAqbu+K/DAYc8Ql5vfoCBQzuBAP5ubMr7yrMt2tW0k
      hGDL1l20aXY0VcXW9yrR2ShOByQNNxbL0otkG4FEIs7PfvrK6hXA4XDMxcRkmZ2N8eo//z0B
      W4iS+mMMjP8Kl8VgYFqyvezuzSLze8akLhnQ9pDnHCDoh6EZ6JsWRGJRdjx5hOLAMW513cDo
      PYduGJT5FYrs8JtzMYryLRzZZl9Q7nqR7xbkryDUOcudE+A7R4uZGBRXbl9TXYUQaI6CuUDF
      +WTbQTMjGLqOon68+PbBe6fweBzs2ncsR6nLp7FxM1JKnK5vcOqXf0c0luLQsdo1lfmgGBkZ
      YWR0fPUKEAzePcw5nS5e/OI3uNV6g72HjtHXU8F0NErS0ksi/Q52y8JJcdpUON0uGA+nyCsM
      cvDZ/bz7y1auSQeuhpc4eWIrw0MDbGrYPGcHp9OfQ1EU+np7EB030QZuYdF76RnRyfPA+9fi
      lAes7Khb3RC/fAQTUQvRuIHHruOwCpzzHjlf4HPNE5JpsGkrn8DPR0qJKmcxDImSI0YGQBMJ
      0rrOpk2ZsJVEIsHsyFmUsJ1I4y48nqXnH/ciu0j2+9/8T8RiMbz3mM88bLL7VUpLg/zh17++
      egXIhRCC/IICDh55CoCqmjqklJybHCCVgHAC8pwSRWT2vRqmQYkHfHaFmmNfxOvz4Ssqp2Lf
      sbk1BU9j04Lys7ZcbV09tXX1zExPc+Psz7nVe5mYDpvyFa52JakNWnA7Fk5x1sMVm713YBJu
      TpUTCY0jk1P4HCZHtlpxWHOvCt+J3WISic1imuaywoPvJBMJOog7ef2uALH5eB0wNjJIYWEh
      pmnS1tZCfSCFVUtyq+UKu/cfXfOImdk1puHz+dZUzv3EMAxUVSUej/Pjf/5nTjz7LFVVVYu7
      QdcLIQQT4+P0h+14G57nw7ZxeqM+rvXG2VpqUuIT+JwqgzEvisXFvkPH8K/AR213OAjWbiea
      spEYv8VYRJDSQRg6fq+2QDjWwxWrqiqTEZM3rljYXzHJ7qokWysV6oIaltvzg2yM0FJKYNGg
      t6+P/uEpKmsaV1Wv/p5b5JnNC0aeO3E7BDPDN+kZTRBPmkx1vEF9IIXDJujoGaGi4YlVu0Qf
      BbK7ylKpJNevXaW9vY2RkUGOHn0Ki8Wy+ErwepINFRBCkE6nCYfDtL31HfaUhJiJw5XJEqxF
      27l25QJ/8u//Ap9v5TETUkree+cUl8++yXgozdF6k7QQPLXLse6Lb1JmJuCKyD2aqKqKKaFj
      yKA6IFGXWCy73GWy6+T/saibbul6SM6dfpV620Uc98iOMRWFcFxQVfhx2EZ4VjJie4E9B9Y2
      F9ioGIaBruv8/d99h4qKavTJD6kv1jGLX2TbrsOoqro+btDlhgNDRjhCMzOoMs5oRKXHdhzV
      v4nJ9t8SKPCvSvghI4i79x6guDAfiwqtowojkyah2PqvIWQWfD4eTbJ7b7NIKekahSuDBei3
      Ix/mt8F8msoF169eyqQ3WaHfWAjBvidf5vrQve3ufDdUFy10EHidgtnB08RisRU991EhlUox
      Pj7OxMQ0zc3XKc9L8H6rwXDPVd75zSsZ83OtD5mdjREOh5d1rZSS6ekpei+/Rpk7zoD1IDv2
      P0VoqBlDWjh07DNrqovb7cFVugWnTWD1BnE4bFzuuHtP73qT3Swz/+9QwkGBV8VmEUuaRHar
      IDb4Pm//23/jnTe+x40b11ekCJqmgbMKY5ULJQXuNFNTE6u6d6PjcDiIxWLUb9rE2PgEAZ/C
      lw6pPFk9BKnMO69ZARwOJ6ZpkkqllrzONE16um5x49R3sSbHuBTdwYFjL2Kz2bAXb+WlP/7f
      qamtW1NdhBCcOPEs+QVFjI2N0zUm6RkxuNqZJK0/uBSos0nJxeYxav2jQO44oPlCfrA2xsGq
      IXYH2nGO/YgL7/4cXV88oVh2v+zUVMb/r1nt6Aarmkw7NJ1YNLLi+x4VioqK2Ly5CZvVwked
      aRxWwfUeg4rNT6MoytoVQAhBXl7eopNnKSVjY6Nc+OBdbrz3Cn51Bkqe4OXf+yMUVSUajfLi
      iy/hdrvXxVZ3Op089/LXCZQEKfUr+J0aNl3nws34qnvJlaKpki8dcVBZ9HEg4HyBv7OHV5TM
      7idVEQR8gir1PB++8wpjo6M5RwPTNGm5eYN0OoWupzGTM3MT8JXidcJYz0fMzs6u6v6NTn5+
      PmVlZVgsNlr60oRiJle7ddLpjGVwX71ApmkyODDAxTf/icHum8wYfhoOfZkdew/PrY4mk0mc
      Tue6TlQ9Xi+KqmEN3aBtTCUWTyMNk+qgbdkruVnmb4bP9V2uaxUBzmWkbFzsna0WgU8dpav9
      Cn2js8RTBvF4ApvNhqZpCCGorKrC5XJz5dJZioyLeJ0fL36txKujKgKPMs6l1mmKy2rX3Qv4
      MDEMg/HxMQYHBhgbGyUcS3F8u0pDmUJkvAPDuen+eIGklExNTnL+3V/ROzCKP7+QvQeeoLur
      k5KSIDt37VrzM+5FPD7LD7/33zFSMaQ0cCnTfO6QDXWVPeVSzF99Xs4awEpWq2eTkskIzKYU
      po0ynjz5LWw2G1NTk1w++zp17lsUzZsD37kJZ7mZK8ZC0DNpx1N5nG3b9+LIETn5qJB9345b
      7fzy1X+gskDH5a9gbMakLn+cIo9BcZ7KpZkn13chLGvrTk9N0d3didOTx5GnttO0ZSsWi4WG
      hsb7EtmZC5vNzvMvfR4hBE6nmytvfQdVvT/ejvnCPD+DmRACw5REZiU+t8KtQZ1NQXXBPfdq
      D6ctu8IsaR6cYHZ2FpvNRn93O3WuNoq8ygKhny/82cn3/Al6dpTKbtLPzk0CPvA545xvfY1O
      h5ttO3avV/M8cAzD4PKlc3R3tmGVMfwOlUhkhGDNCULJONbZs5TkQX763PopgGEYRCIRzp05
      jaJZ2bPvAIWFhxbdJ/sgaL3yFqnoOLuO/SHXe03y7Qa1JcqSfvn1IvueoVnBa+eS7G5wc6VT
      UlEIDptY9nbJ+ViUFKlUAiEEwYo6ei/YKck3FijT/DJzbdWcv61z/sR8Iiw5fVNjU7FBd/Nb
      eLx+qqrvzkX0KGAYBp03z/NE9ThK0MXAhI5R8ATbt2/Hbndw7rfdSIapKkivfRIspSSdTtPe
      1sabv34Dm9PN0aeeprCwEFj/jTDLRQhBafUuLCKJzWajZtM23u/MZyK8+vj91dAyAJGkhe6Z
      Yp558RsMhTKRkoZh5MgKsTQWJc3Z988QDoVwezyEUm5M05xb8MmWCQtHovlkBT9XfNKxJp2d
      NRp7ysfpu/Rd+vt6V/vaDxVVVfEVVjAyI8nzKDSUW3Ba0iTicf71R/8NvzY653RY8QiQ2Ugh
      EUJB0zSGh4eZmpokPz+fr/7+1+/D66wOIQTbtu+mr68f0zT43Oe+wNXLF2lv/TUBX/yBKaXX
      oWMaBmXOAZwuF8OpALVyaC69x0rqke9WSI8PMzExTnVNLWg+0vpkzon9vfZy30mh9+PrfU6F
      gMdAv0/Jvx4ETruFauftxAYGOJxuDNMk4IqwpTw7P7pHWhTTNIlEIgwNDpJMJgiWlfPeu+8g
      hGDP3n0Eg0EKCgooL98giT/vQAjBMyeeo7+vn+LiEnbu3o+ejBKefROf68EowPYqC5c7dWoC
      cOPCLxmfnmV7QOJYxZkJPpdga/EkqioyK8fcW4Ey8xCBIlY28mkqJBOPpmt0cnKSm9fOseOo
      Sveki9FUJdv2bqe95QoVhQvbYUkFSKfTAIyOjmDRNFwuJ599OROOrKrqqhZeHjQOh5OGxo8z
      2PkKypjulPge2OEkkgMNGq+dT3Fybz+D/QYdQwrbq1cXgFZVmOb61VfourWFIq0X9Y6fYP5G
      HMjELZ3tCVBom2BzUL+nB6pvQjAScdI9prDd/WgukPn9flz5dVwad7PrwAm2FWZ28LfcvEFX
      qJye0R4ONarYLfcwgSwWC1arlaePP/NAKn6/ybhnR2nvVpmOGmytWPtpJ8thc7nGZEQwHdPY
      VKYwPG2wvXp1ZQkh2F4WJpk+N5fJ7s6MdQtNHEmJcxKvPQ0sPR/rGHfha/wD3CO9+EJvsWPn
      o+kJstls/PGf/I8LPjNNk/z8fPTRPuxujekotA4pSyvAo9DDrwQhBG6XnfpShVBU5xcfqRxu
      NChZ5Cih9SArnI1lCs2DGg3FCWoCAlMKdENiUT/OFSqEIG0ImgcUtpbpi8b5CyGwWxf+nX1W
      Lvu+vjgj/JE4dEz6QfOTiEewagaaTIKiYqpe6nd/HqfLQ//Vn2Fq+Z+YMOl0Os1Afx8tNy5Q
      XLCNgqqdWBxODmx3Pphw6I2EaZq0Xnsfy8SvmZ610BsqYE/ZCAFvthlye2U+XlDKfezRfNPi
      biHM3GOYzJkslzp0BiYMXj5oRZmnAGMheOdWPie3Tt51RNJaiKckN8Yr2XHkq7jdbj788AJd
      Nz+gfuthduzchcVixWKxcO3qJRzj/0Jal0w6TlBUXEplZc0jLRfpdJpEIoFpGni9PuLxOB9e
      vABG/NOnAFlaWpoZbf0VejJM34wXa6ofZ44ogKwIynmJfe8SS3H7P1Iumvv3zo+HZzS8XjvH
      mnT8bnVOqaQUdIxpGNJCqTeOz7n2hcPhkIWW6VqE1HEYA4CkYvsXMaTK8GAvh48ex+Fwkkql
      ePuX3+VQeS+qIpgISxIpyah2hKdOvLzmejxsUqkUI8NDpFJJpqamiLX8bH1Xgh8lmpq24vfn
      8W8/+VtmYhGqPSonmx6cyWeYkvaRKFdaQWhQ6FexWlRmDTd63mG2bNlBb8dlkqHTFHmVnKPO
      cpiKmFzsdlJT2MPm0mQmEW9cQ1GgcfM2tmzdBtwOWhwdplDtn1soLPQKZpMwmfpkiMlHlz6k
      78OfsrnMjpk0qQ+sIjv0Jwmv10dNkZ26mjF+cTUN5N5beD/SOqqKoClooSkIybRkNCq4PFZI
      ReMBqiursTscbNpykOZrEJ84Q1XRyhfwDBMutOtsD05QVqhiURUmIgq9oTy+ULnprutvtVwh
      MZNmMixQVBW/UxJJCG4OfUht405KSzdOvp/VUL+pgdD4QfrHr7OvPIXHLu7/nuCNjMViobOz
      izrXODWFCm774pPO+7lwljYVzo0Uc+zFPyQ2M8aZt35JRU0D/rx8JBZ6utuoyEutqA6zCZOz
      LWniSZPZcJrOoTRlRRbKCwVp3cBRtB273Y4QgkgkwuTEBNt37adux7PUbn+W0vrD/OpMF8U1
      hyiz3iKhllAa3JjrPcvF4XBQ17gNXOWcudROUyD16Z0DQKZnP/PeOxROvEZVwdrNn+xEdqW5
      icJxyWhYEjOd1PjjSCkYnPUQI4+ZiWH6J+NsqrBR7Jf4XSr5HnGX/z+LKeFmn87AuM7WKo2u
      /gTHG6yc7UhRV+OkyKcwERG821mCLlWeOHyUvu52YrEon//yN+Y8P9kQF4ChwX7KyisfiYRX
      y0FKSev1D5m+/sr9yQ36KKEKiXedvC2rHSW8DsGmYoVdpQl8DoHfCW41Qcx0YC3ZjWbzMa1u
      53Sbn+bwTq6P5TZFpJRc70njsMKzu62YhkHB7XdzWSEWN5ES+sd11GQftlQvndffor31BqlU
      Gl1PL3gXq9WK1WqluqbuEyP8kHm3xm176Zh2f7rnAABGOol1nd3dazWXYknJqVsaL335GS68
      /Spf2Brj+swoJ//0z7nV3obd3kBL909oqvi4t47GTS61JxmYMCjOU7jVD4V2yR83Ha0AACAA
      SURBVL7qjODWFVv4VbuVQaMRnTAndgyQ0AWdUwYnX/4adfUNn7h1n6WQUuJwOh8rgDRTbLzf
      XVBVUUbPreucqBzGZVOwh5Mkk0n02CCJ4Q8pL1DRTcFk2GRoCsbHkzy1ScFepy3wGOkmXB91
      Y7qqOP7ZYwz03KQg3UZ3cieeogaeenLHPU8CelTJLgzmUmzTNNHSk59uBZBSokfHsGy0bH4C
      SspqmBkfwFmQWTGORGLcPP8GKmF2VAi6x1TODQSxuYuxuK00ae/gsC5cM4in4Xq0kcYjJym5
      PYEdH+kmoh1i/6GTn1jBh4yADw8Pc+PDU1hcAdAj2D3FaJoFr9fDxMQktfmpT7cCxONxtNTE
      ohPKh0XaAIvdierMw5SZxFrHahP88sYNdm12MDQluNylQ6qDimAvfodBMO/uBbO+iIfdz3xl
      Qa6l3QcycV2fdHMnHA5z5Z1/4kD1DKragiIgkQYzBclhKEybXB9Nf7oVwGazkcLORju6VRFk
      sj0kphG3XbMjIQhTwLi6g+isTpGnmf2laZzWxdOnJKWVWDS2QAE+6YKfxe12M5VwcLNvFL9L
      oTJgucPNrVKa7/50e4FUVUXzBEktM2eQbgo+7FNJ3+d9Ih47MPA7Gq2tc/Z8ylSoKAkgI8PU
      6B9wtHI6Z+iGYULXuORsp+Rqb5r3z7xzfyu7QVEUhQKvC7thEJlK0jt6d0exqh1hnyRM00Sf
      nUJbZi5eVckoylRMUOxdW4zOUmsFAmgqSi2YzFbnm5SbraiKuH0WQO5TGl+7rjAc9/Lcyc9y
      dHPTXdd8mnB7PDTkaVzoTrO9NLeof6oVQFEUvIXlJFMdOXvTOxHAvsrld/93CvlKFsru/FoI
      gWUJd21Sl6hCULHtGf7g6ecfGVNnvQ80yZJMJtFnejHzTCLJu9szy6PRSvcJIQSByi2MRO5v
      M2TdcfNzB60n/VMmv7mh8263naZtux8p4R8fH5/7OxaL5TxHeVXljo2Sp4yTMsBiVVBytLlh
      yk+3AgCUV1QyRi36fUgWMV/gcwn9euRIisQlH3TqBLwqxZufpihQfO+bNghCCAKBzHbFVCrF
      r954g/6+vgXZLVaLqkDStGJVWXRjkUQ8VgBN09j+5Bf56RUN48FmTFmXkcBtB4dV4/yAk6r6
      retQq4eD1Wrly7/3e1TXZHIRvX/mzKrLEkJQWlZJRCkhnpY5TUdTwo1+66d7DpClsCjAlt1H
      iSbewreOu7AeBEIIKgrAVbWHwqJHp/fPRbZDUBSF7Tt2rPr4qCyap5Rr0wY4VEKxAZw2hb4J
      E12XRHQvdfu/8VgBstQ27WXwvffx2lOLTpg2KvkOyc2hjOnwqNj/SyGEwOv1rmmEVBSFY899
      YS51/wdv/gOKxcm2/S9iSonL6cJifTwCAFlbtJix2s8yMfxzitwP2BZaI7O6iqpZ0HX9ExO1
      uR6KrKoqqqqSTqdJjSWw2ASTY2PEQlM4fPmMnzv1WAGyCCFo2nGA37WfJ60PUOzlgeQQXSvT
      cYXhdAnHn30Rh8PxsKuz4ZBS0t/dRWW0l9KUycRvWygScGbS5Jhbfro3xOSio6ODof5ujJlO
      mhy31m2vwHojJbSOW9GqnqNxxyHs9sfCPx8pJaZh0HKzmckzr7HTHEEVH687XJgyqRTmYwW4
      k+yxmkNDQ/TePMsm5XImf4+mkO9a3J25Unt1LQtApoRboXyCB79JccnK9+kuFSb8qBCJRJia
      mqKioiLne6RSKS6f+gX+1tMErXevLYzETUYj8rEJdCeZ8wSc1NXVYdE03vveeeq90B+XOL0K
      FcUaVYXqXEJa05QMTmfmDCV+ZdlHFa1F+FtCJVQe+gbFxSWrKmN6ehqbzfZId3ZOp5N0OpVT
      +KWUDA8OYGs9c5fwG6bkZthkJC4Rxqc8FGIpsscQFVU3sMXsoM9egSEMogMDnO5JkdYU0qYk
      kZYUY+K1CHrsGoe32u5reHX3BAQPfmXVwg+Ql5f3UFLWryeqqpKfX5DzO9M06br0Adu1u08I
      bZ7RCScFe10C26c9GO5eCCGoPvAMw6c7KQgUs/e5z3P1h/8PzzpmbuePE4BAkDlxJZKSvHst
      wfFddmD5Zs7thHMIoH9GZSpuwWnRsakmxR4DKQWaKtEUQShtp76waM3v9UnHTM4yP+2rlJJw
      WjIQFxzyKHhurw4/VoB7UFXXwJXmrXgm2hkdGcUIbiU+cRZnjpbzWAUlMYObAzoqBsNjBmXF
      VjaV3X3x4IxkbNYBjiLikSmKHHGKXCbnJyr47Be/TjQaxtANWjovoVpsmOE+mlw9eLQE0UgE
      h+PRPcPrfpBOp+cOEEylUqipGBKYSZl0RyUJE1RT8FzewmXhx5PgRRgZGSE/Px+r1UosGuXS
      az8gMdpNpGwf5SPn2OHNvRFFAu0hA4Gk1qNyM2SSV22nPD9jFyXScHPIwCw6xNYDJ/B4vMzO
      zhKaGiM6M04sJdl/8MhdeUZDoRlu/Pov2VIYodXyPIefWtuh4o8yiUSCsdFRnC4Xbrcbi8XC
      2bNnefLJJ0kmk3zwi5/RNHSO4Vmd4Zig3p6JBvVroN4x+j0eARahuPjjsIJQOMSUtZAqtRW3
      XafoM/+e5lPfY4sjfnfYMtDgzQi7EIJGr8L5nhQFbhs2i+DdDqg68A127vo4atNqteLz+YBN
      c/fNlXf7/202OxMxBVuJYHbwI0zzuUfai7MWhBDMxuNcu3aZkpIS3G4vXo+LX776L0Q6r7JT
      mSaMpDkMT3vBuYRj4rECLMJ8ISwpKSVYlE9iQEH2XUPddhDPsT+k98wPqLanlrzXpgq2OQyu
      9aTZVGZlxtLA53fvWfTwusWwWq24CqtJpK8SCU0xONCP3e5gYnKS2tpabLbcaR0/qVRVVdHY
      2EgikTk/eWZmmlQyRSBYRoRMR5S+8hEdQzfY4Vm8nE9nF7JCFEXhwFPPUvnl/4hWWEH3r79P
      eU09szu+wOAyThHKsykYMzqXu5PYVxmpoKoqW/Y+w61JG7WFJqHQDB0dHXx48SJXrlxeXaGP
      KDabDYfDkTknwW5ndnYWKaGiqhoQJBOJzMHigEWHM1MmMSN36PnjEWAFlFVUEN/zHFNv/DVt
      zdeoa9rK5Vu1+NNduJZoSSEETxQqTCYlbZ7V52AJlpUxUvsSvVd/SZPNTll5JVablXAozPT0
      NHl5easu+1HFNE3S6TRCCOLxOCPv/Ir62QkAgki8dkGxLnl7zKDOo9DoUpgf4fJ4BFghgZJS
      UsWb6b9+EVVVefLr/4Eb7u3MLp6cAQBFCEwUKhq3rdoNKYQgr7CUXZ/5M+o3NTA8PMwHZ96j
      sLCQ06dPMzMzg67foyKfIKSUJBKJBRuL7EgK1cw/n5oxhQZTEBsw6bqa5L0Bndl5a2OPFWCF
      eL1e9n3xW9h9+Vx67R8xDINDn/8j2nw7SJlLC3bM1HC5lzBIlyAb1ltYWEgwGMxMsBsbKSmr
      IFhWhqoo3LhxY122FD4qpNNpksnMYpdpmkQjEYRxdwfg1wQFSZOqWXC2pXjnZpK+2czq/QN1
      g2YPaP4kZCSLz85y7fIl9h58AlVViUbC3Pz537LN6EOQewGsJeGi4sv/K0VFgWU/R0rJxNgI
      77/1Os0dg5S40wT9Cu6y3QTrdhIMlmG324lEInR3dzM5OcGePXvx+Xyf6AUvKSXhcBhd1xFC
      EI1GufSD77DPmMF2x2uPpyWXrieovj1fM4ExBzg2WR+sAgwODjA1OUkwWIbD6ZybyHwSkFJy
      /cplfBe+T8CWez9Bf0JDe+4vqK2rz3m/aZqEZmaYmBhHSEn17eve+MWreJ12XL5CpJkmHR7C
      mL7FzEwI013F0Re+njGP8vIYHRkhkUwSDofZuXPnfX3nh0kikWB4aAhTmiBhdnaWoVf+jt05
      EoVN65IzLUk2hRZOhKPqAw6GCwbLKCsrZ2RkmLYrV0inkjz19PEHWYX7itvrJWooBMitAEUW
      nfZbV6mprbtL8aWUnD/9W2T7GQrMMDFD0HXif6BhyzY+94WvoOs64dAMBYVFmWzQkQjdt24w
      3fwqbb/7/4jaaqnb9gR2u4OZ6Wm2btv2IF75oTEzM8Pbr/yQmlQo84GUVKq5zT+bAGFXILTw
      e7fxgDfFZ3/0kpJSDh48iM/n5fz7b685A8BGIRoO4V3kRwCwq2DrucjYyPCCz6WUJJNJZm99
      yG77DJUuyZSzlMKS0rmMEhaLZU74pcwc2bdt9yHsDV9iIpxCCbVw4dRPSKdTjI+Ocu2jS1w4
      8w5joyOfmPadTyAQYOvBJyg3ZtnKLFtFnAI1t6vTroDFInKe//nQjHFVVSkuLubcW+eI79yP
      y+1+WFVZF4QQbN+1h/cHu0gMnafMmsyZcbTBFuPimz9GefEbFBQUkkwmiUYi9HW0UKdMAjCd
      lDiqNueMdpyYmMDj8cyd5NK0ZStbt21HVVUsFgvjY2OM3LjKUH8XJ7dZafvIwdWqgzz9wudI
      pdOkUik6m89jd3pp2nEA9RGdjymKgiFhkYwnC68VAqmCgUS741d5qLFAWbv3k3IgM2Teqaet
      mcGzr+OdHWFTjv3FSRM64nZmvNUoiTC+9BR6KoVd6OiGSXPczt7Pf4ut27Yv+ayJ8XHe+PmP
      8Hr9PPfZL5NKpnj9xz8ikkiSHu5n9+YSLHklhFKSXcee543Xf87QQC9P1aepKNAYdj/DgSef
      Q1XVR3IuNjI0RPd3/jN12r09X78Z0SntTGGVG0gBPqlkTZqZqUnaf/sTgrM9lNgl6oLwXDCl
      vJ2xTPJmv44/LRnQBfmbKnjqa//LPX8L0zSZnpokmYgTKAmiquqcWzAaiWC1WnF7PHPCHQ6F
      OP/r73KoZBTThHPh7dRvO4TP56OoaG0h1uvN8NAQPr9/bp9zLgXtaGtj8p/+ikrNRFnkAPMs
      704beFpTOO7QlccKcJ8xDIOuzg4Grl/AMdZKhRpGAaakA1UaBK0pDNPk4pgJcUkcsGzZxRMn
      v4aeTpNOp3E6nfj8/nXppcfHRmk7+wrC5mfv01/GarNvSNf06MgIPd3dVFVXYxgGZeULT6iU
      UvL6z37K0KnfYTElZT6VHW4FBZnT9GyLSyZvJCm4I3TrsQI8IKSUhEIz9N1qxTB0SqrqSCUS
      jF74FZGuG7iSkmKroHkWRnFR49DQ0gk0PU3S4cH9zOfYe/DQukSAzt+ok1XQTQ2Nay53Pcn6
      +UdHRykpLsbr8y34PhIO87u//Es29/cDMCElYZ9KIiVBQjRhosyb9SZNKB7R8ekflx9VH8cC
      PTCEEPj9efj3P7Hg8+LSb/H6P36X2slm3BhMJCRPOyJ4DBUDk05dMjE9Te+vfs62XbvXJfXJ
      /JFEURSqa2rvW5bm1WIYBuFwGJ/Ph8d7d/xUX28vhaOjmTAIISgQglTIYGjaoDIqyZMsUAD4
      OOwhJU06fSpel/pYAR42druDL33rz2i+dpWWzlu4lJu8PjlDRSJJUkKDXeEpp+Ajpwu73U4q
      lULTtHXbCyCEoKurk7KycjRNw263r0u5a0XTNCoqKhb9vmHzZv6muIRQXx8A+4ASYMAisJu5
      zSApJUN2mPRq7FAVfObjEWBDoKoqO3bvYcfuPcTjcSbGxvjgd78h2HWVUkumG5u0ZEzT5WR/
      MwyDrvYWCouDme2BqkpBYWHOHt40TZxOFy6Xi3A4vGEU4F4oikLC0LEJcABXEUwKQdQJkyEd
      VYIilAUmT0gx0Ysc7NNNHLdHB/Xb3/72t7OFptNprNZlnBTxmPuGxWLB5/dTt2Ur14fG+Ggi
      SoVIkdxygPrNm+cmq7lWknVdp7enm+vn3+PdN1/H6s7jzLtvE48nqKmtXTBqZKd+2VBiKSUe
      z+oC9R4GiqKQNAwm2too0Q0UXVKXlnglRB0KiktjxA7euESTkELSGbCy2wTrvOjRx5PgDUw4
      FOInf/d/YU9F8FRs47O//6do2t29v5SSnu4urvziHyjTIkxG0ySkA7dNY5szRsJQaMvbjbew
      mMJAMcVVdfzbv/4LHrsFxeklFp7h2edfIFD8aGWXnpqa4mZzM+2//i07+4ZRpSQtwIJAAN0K
      TIbSuFOScadCuVOj2pS0KCZRvwVVPlaADY2up3nvtz+H6WaqPRHalaM8e/JlEokEPV2dWKxW
      qqprUBSFN//tFQ6nLmAYJhcHDFw1O0mP9XDYGwVgVpdICSmp0JN24pcximzwYaqIGdXDF7/5
      Z49sesWxkRHe/qu/RhscZkYR+E1JvSky7mWXSo1VwQaMpk0SumRSSF4KWvFrjxVgw5NZ7Jri
      tz/9L6Qj0wQrazCTs0ymrNj0EFZvAH9BOSUjZyhz6MR1yTu9OtU+Bz5Vp8S+dByQlNA9qzJc
      9zxPP/v8hlsPWC5XPvqIjv/yN2xKm1wVJn5FpSxtcN6ucNKdiTQwbv/r1E3qCi0UWh6fELPh
      URSF/IICjn/pzynf+xIJXWDTZ3jyha9RvvclwoNtTN94izKnjhDgtAjq8hU0fZYiq3HPY5iE
      gFJbmsjF1zn9j3/FzPTUA3qz9aWhsRE9309aSgwhGEqkabYIsCpkm0AFrIANyezt44AeT4If
      AYQQuN1uqqpryCupJe0qI1hWQWVlNUND4xz1jKDN2+hqUwUdIUlnxGQsDgE7GKaJIpSc4QLt
      0wZCwF5HmF+3jFJRu+mR8QZl0SwW3HU1dBtplN5RqpOSESRVTpWieTEohinpUWCLW0VVxGMT
      6FGn5epH5F/7Hv47t0HdZigqaZ80CCUMtvlVajwLB30pJe8OGzxRrKIpgvGEpMUsQqvaiYxO
      orr8HHj6Odxuz4ZaKFsM0zS5/sF5+r/7YzwzEW65Ffb5NLy3q25KyRUBR/JVFPF4HeCRJxyN
      UrSEXJa6BEG3xnv9As9tB5JhZlZPFSSGBK8FftyZ5it1VmzCJDU9ygHbKUYTgrbxImKxwwih
      YLVasVgsG1oRFEVhx+FD5AVLuPwPP0Lt7qVTtWIPBFACJdjy8pjp6+VSZAxbZd2DV4BIJPJI
      +Zs3MlJK0oZBJC3wLGK5ZmXVaZGkDADBdNLk7WHJZp9gNC4JOARHAgrtIYlLkdR4FOyqJN8G
      3kQC0zAZ6u+j8+JpDrzwexSsYE/zw0AIQWVNDSX/5/9Gy40beHw+qmtq5tZBniFzfoD1YZwR
      9lj41wcpJZcuXWL86mn23kMepZS4NclkQhB0QYFdodhukG8XbC/IeEiuTxrk26HcqXJ9Is31
      SYXBmCSmJRA3m9F7LnNADNBy+TxPPv/yA3jDtWO1Wtm5Z8+i38FDNIFutbdTv2nThh5ONypS
      Smamp2k9d4qTedM5T0HPXvfBoE5/yMQiJEkd6r0WdMMkboB93uSw2iM4N2YwEoOZlIIhBYdL
      FHRSiK5f4NJkZktn29v0NW6nsqr6Ab3t/eWhKcCmhoaH9egNR3YDjc1mW1aHEIvFOPMv/53N
      6hBnBnQ25wncVkGBU1mgDBIYikGlS+FAkUJ3xOTMsI7HKniqVMU+bz+hx6pwuBjiOhQ67vSO
      Z/wkpoSpuI4YHaWisuoT0Xk9ngRvABKJBK/8+Ic0NDaxfcdOXC7XosIlpaSrvZVtlhGCPqjx
      aIzMSq6M6ZiGydM1GjY1m1odCm2wIz9zgEetV6XGoy66c8plUXAtEWd3cVJweVoheOpVQqMD
      VDZspSRYhtvtfmSV4bEbdAMgpcnVyx9RUlpGPB6nuqZmUYEyDIN3vvefOeIZn3e/5MqYgWPW
      YNSA/VVWnJZMgNutaROZNNnkW9u+a0NCW0iSbxOkTMk7k3aOFOiEFReRggaaDh6jvLL6kVOE
      NSmAYRifqA3tjwKmaXLq+/8vdQwQdEqSBnRNm6SiBlvcCuG05HxY4rSCRRWkEdQ5BeWu9RHM
      gZikJQSb/QoVzozoxA34YMZB6dEv4XTYKQpWzCU92+hnF6/JBDJNEynlIxs/8qhir91Pz+UB
      nIrJ5QGdcotCnTtjt3stgqO+jGBOpUxeHYVdDev3+5S7BGUumJ9lx6GCV8ZQzv0QqwYd0knS
      noeiKvi2P8XW3fs37GEeKx4B5seWGIaBEGJNo0A2Hv2xEt2bzPGfg/zi7/+SKlccXTfY4xC4
      70iOY0rJUMzgg2lJFJVvNqhY7vOp97d3Jt5V38m0Sn/pExx66atz5tFGMpNWLHVZs2etgg+Z
      BlJVdcP2DhsNIQTxRIL97hR2PU1EKrg1sWA/r2mafDRjYnNofK1xYS78+1u33PUttJq4Rs/w
      u7+9hcyrYN+JlyhY4ymX68mikjc1OZEzpV72JD5gLm3fapFSfqrSea8HgUCACc1HqUujad5Z
      ZFkiaUlaVdhd+OCE/144NMFR+xiHZy9x/ezbD7s6C1hUAVKha7S33by/D1eUe+5vfcxCPF4v
      O7/25zSrdx+ULaWkPSbZ5N+YjglNgDp4Y0Md4rGoAmgKSLmxe+e5RLH3iHn/pFFUXELJ8S/T
      m74jAEgIDASODTqdklKCaW6oOcCiCmA6mmho2Pog67JiEokEvb29G6pHeRAIIaje1Mhk6Q7S
      86xUAWz3CC6NGegSkoaJbn7cOTyozmIx09hEQPnWDeU6X1QBAsWlGz5zsM1mIxgMMjAw8Kkb
      BRRFIbDtAGP6wt/IqSmUaZI3utO81qUzEMt8njYkF0d1ftGW5uL4/UuXrijKXJaJ+ZgSmgmy
      +5mX7tuzV8OGkvBsD7Vcr5CiZGLUN1pi1weBEIKGzZs59W4pZWb/vM+hzqNS44ZbYZ3LYzpd
      M4Jk3KRJVWi0Cz5M3p/OIiv4dwq/BFpEKZu/8Oe413BK5v1gQ/kfs+nSV8qjHIuyFlRVpfrY
      Swwl7/4ZFQENXpXjBYJw2OCITaXAIlAUAXGTyYSJucJR815tvJiJ1ZWwU/78v8Pn96/oeQ+C
      NSlAKDTDxfNn6O/rXZ/KKMrjBbEVUt+0lZGKfSRz9BtCCFyawGnNHA6RZYdFcKPX4NcdOoPR
      5Xc4qzEz26IqkfqnKAmWrfjeB8GqFeDDCxf42Q//mkbvaSZu/TPj4yPrWa/HLBMhBDX7nrxr
      LjCfqA7KvGyZdkWwx6FwxKowNGTw2s0U1yfvz7xgprCJ/U+fvC9lrwerVoDGpiYqS8CiCTz2
      BJFwaD3r9ZhlIoSgIFBCpKAGI0cHnTLBoyjkOiFLEbDZrvCUS2EkbGLeh6mBqVg29Er/ojW7
      lz3udrsJ1p/gcqeNSXMnFZW196WCWZLJ5IJDkT9tXp+lcLlcNH3+m1zP285AfOF3F2N2dNUO
      OfMlZxBAWmeBy3S90Izkhv6tFg2Ge+/dd6isrKSqumbRm6WUpNPpdUvXLaVkZmYGf47TUAYH
      BwkEAoRCIVwuFzabbUP3LA8DQ9fputXGwNnfUBftJk8zmdYFr4+ofNGeXvJAueGUSY8uiGvw
      +fr1m4edc+ziqa/8yYb9rRZVgHg8/sCFbL5CtbW20tDYeNeiSTbwS0pJJBLBm+PwhE87hmFw
      6ex7uC6+SiieJB0TNNnv7SWTwM2EQUXQQpl75V61O/3/SVNws/Q4h1/44orLelAsKt0OhyOn
      8JumSTQavS+VEUJgtVoRQlAaDOYcOuePDBMTE3PXmKbJ2NjYnJn0aUZVVfY/+RTpI1+jX1f5
      /9s7s6c4jjuOf7p3ZnZ2F5YbBEiAEDqsyxFyJNuS4yr5kGMncSqHXU7lIS9+zJ+U57ykkkoe
      nYccTiW2HMuOrFgSutHBsUgsu+w5M915WIGWy5YgwGqmP1UUVcBQv6ntb/evu3/HRKB4Ei9E
      AMO24NrD9YXALP+8xoNm9o2+tMZfNwZPvdYJITa9bF6tndA3nxkLIRgaepyCJ6Wkc40mEFFE
      CMHA3v0UzqWoOnnmyrBajJynFDcqmqwWVAU4gWJX38YDFDUwa7Wyv7Vtw/9rM1mXABrlrH5h
      hVKPAqwa1c/cLmzbwbdTxGLzCFa6KAAXPOg/luS5NolrC/70WZl0XYzdas88CQVfkhx5nng8
      vsG32FyeasTkcjmy2exm2bJuKpXKum6Qw45lWeh4iuG04GZ15ame1ppCq8VIT4ykI5ACDg/E
      8JYF0K2HK7KXoy9+b0P2bwVPNZU3NTU1ZAJLoydebxdKKXTg0R4XZNDM+ZpLCqQHcaGZCKCn
      Z6m74wdwI6u4X9R8p10uqR30pGQ9ibXvBeLPQIXppxKAlNK4Gc8IWmvyuTnSXhZhCXa2Sv41
      r/jxyTiBhosTivcGYpy74zE1F9DzqGzKgX6bgS6L2YLin19XONO3dujy4+A3GC9bzFhteMLG
      HTzEyVfObNWrbojGcOYNm0KxUCCpy2itGU5DyZY4j2b07w7UBvbxfovz9z2uTyuO7LJodgVJ
      RxC3JP+OCc7PBBzrjK3ZdnS8FOOe1U3vy28xuvcArutuOFV2KzECCDGVUglbQL6q+KIoOT2y
      cjaPScHxvhjTBTh3pUJTSnJ8t40VE5w97vLXL8oEqpYhWI/W8B+vg743f8HLfbuIPxr4zxrG
      nwkxKvAQaLJVTWdakLBXH6BSCnY0C14fseiPB1y8s5Bhp5mrKPLeyo3w+UKKoXc+ZHDPPtxH
      RbCeRYwAQkxhdoa0VasM7T/B2YXWmvEcDPfUVopcUdObhgvZpQ8HGgrpnXTvWJmY/6xhXKCQ
      orUmP32XlAUXHsCugW+f6wIF93MKdccHrRGBwg9gcFm1aClAV0p4ntdQ+b3rwQggpPi+R5C5
      xX0CEm0WO1u+/RkrJvjZkThFT1HxNJ9e17zQIleUS9ca4s0tDX/J9SQYFyik3L1zl51kuVmE
      vd2xJ/bRhYCYgAu3Al7tlHQl5IoToNuqhf0vnnlm/f56jABCSiKZJO8LPA32Gl7Kanc6gVJ8
      fK3KoSZJctklWNGH6YqgfPht+oZGNsPsLccIIIRorbl6+RIDiQBhyxUCWAhvmCoIPru79Hd3
      shpch4tVwfU5f0mW2ZfFJv6Q6+PYicaO8HwazB4ghAghiLsumZKiq9VaR5gwogAABltJREFU
      0UNswXXpcH1ae6E+W2wyrzgyEKcpLrg+5XP+gc9oWpJXMcYqKX76/gehcH0WMCtASGlta6Oq
      JNNzawcJSiGwY0sHc1VB3IJiFdqaJEN7HD7JKj7Opjj7kw/YNTC42aZvKUYAIaTWR+Auw2nw
      qhpvtWz5VQiUphLULsxuZAI6UpKO5hiTyiaxZ5Tdw5ub970dGBcohGitCQpzOFJgq4CSt/ZG
      uJ5AwXzgUPbhxO7ayZGvoKV/H9//4buhcn0WMAIIIeVyGXHvIgWpiTdZNMWfbOBaMdjRHOdC
      +TBu6SGWP4eOpXjlrfcbJgnq/0043yrCaK25NnaFQTFLphTQ1eYsaZRR301mOVIITvaW+Lw0
      y4kffIiUAiHCXa3P7AFChu/7ZMa+pMMOyAeC1sTqJ0BrIQW0+ffJzT7AceLYth1K12cBI4AQ
      obXm1vUxUlP/xRZwxxd0raO8ia2KFIuFTbCw8TACCBnZmWl2OpVaSMNTNgnTGso+zCQPsXMw
      fCc+qxFe5y6itPf0k/0SmmMaa5WE9oVb4AW35m6u5vuXAotZ3YLsOsixU2dD7ffXE423jBDJ
      pibmtMXNXInBHmfF75eXObmUa+XI67+kPe6yp70jcgUGjABCxs2LXzDi+pzPaV5uX8sFevzz
      1v797B4OR2DbejACCBFKKXITt5jzYLwoeN4Ti9Xg6o8/Lz6Io60EcarYO7u3z+AGwAggZOQ8
      +HPGpep7uDHNwmxff5Q5p5s58c6vqZTLdHR2bpOljYE5BQoRnucxcec2lWQncbdW6nA1uu08
      H/3xtygVPPMpjRvFrAAhYiaTwdeCfjcg9g1J8J6vaNsxRHt7x9YZ16CYFSBEeJ5H3+AwfQmI
      +2uHQRfbjvLaG2dxQpDTu1GMAEKC1prM+DVO+V9zkAlcoRibXrkMVAOwmzpCHd7wNBgBhATf
      95mfuEl3XJOMaXwtEY9ugqfnNUrDZMHiM+8oh0ZPbbO1jYPZA4QIp64hnRbQ31Kb33KVWjfP
      hzve4LXTb5rZvw6zAoQArTU3Ll1APLgFwEQJxuYtph91shrpEEg0VrLFDP5lGAGEACEEyZYO
      7rYf5X4J8lVNZ1IxWNedKB0H5+rv+eh3v2nIHg/bhRFACFhwe3rnr9OXgIRUHOhdWtJcCBhK
      V3HmxlDKCGABI4CQcO/a1xxy5tDA1TyLfQDqmSzadD3/Npa18SZ4YcEIICToUg5LaPKVgFsl
      QUtyqQBmy5LC0I84ePx7Zh9QhxFACBBCIFOt+FpwO694dZ9Fd+rxIK8Gmqv5Zgb2HTWDfxlG
      ACHBbevBUxC3BCVfUH8PfD3fTN/J92huTm+bfY2KEUBISKfTZHyH3ekYmckqX91/vNEttBxk
      ZP/BNWf/WqO7x19RwgggJMRkjKQlsKXgQIvA8zVzJUXZ0xRzD7/xWa01+XyeXC5HtVrdIosb
      AyOAkLCjr49pWbvo6k1K4iXN51d9zo153Lx8manJiTWfFULgui6u62Lb0TohMqEQIcFxHLyu
      vYhsBiEER9vFYv5vmwyYmpxiR2/fqs8KIXCclfnDUcCsACFi8NAoN8qrhzhnptdeAaKMEUCI
      GBgeoXz4HSbLtY+1fkPr3fwb1y9f2Ba7qtUqnuc15AZb6DqrCoUCqVRqO+0xbJBqtcJXn/4D
      99JHDDtFAL564ON22TiOw0z7Kzw3eopAKdrb27ek/o9SinK5jGVZDedqmRUgZDhOnNHTZ3Be
      /RWXK81UtaA3JflkLODvl4s8vDdGZnqS8fHbWzYjSylJJBINucE2K0BI0VqTmZri2rm/EJu6
      wkw2R6H7Oc6++3NaWlu327yGwQgg5CilKBWLTN+/Q2Z6muMvnY58JYh6jAAMkcbsAQyRxgjA
      EGmMAAyRxgjAEGmMAAyRxgjAEGmMAAyRxgjAEGmMAAyRxgjAsIjWGqVUQ4YtbxZGAIZFfN+P
      XE6wSYk0oJRCKYVlWViWFanaQUYABqSUSFlzBhZcIKUUQojQR44aARgWqVarlEqlxcSVRsve
      2gyMACKMUmrxe6VSoVKpYNs2rusihIiEK2QEEEG01nieRxAESCkplUpAbcaXUuL7fiRmf1iW
      EDM/P78lSdKG7UVrTbFYxLIslFIEQUAikUBKGYlZv54lAojaGbDBsEQABkPUMBdhhkhjBGCI
      NP8DMVhy5bW9sJkAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='mortality 1960' width='192'>
      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
      F9AoP5wAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
