<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20181.18.0510.1418                               -->
<workbook source-build='2018.1.1 (20181.18.0510.1418)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SortTagCleanup />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Data (mortalityrates)' inline='true' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='mortalityrates' name='excel-direct.1lminzr1vxudjh1chy39k0isww4p'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/macbook/Desktop/mortalityrates.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
          <named-connection caption='african countries' name='excel-direct.12yn0pf1btutlr1383hcf1dmy61q'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/macbook/Desktop/african countries.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
          <named-connection caption='europe and australia' name='excel-direct.0ldl3ip0dhmv5n17ido6v0rb3csz'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/macbook/Desktop/europe and australia.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.1lminzr1vxudjh1chy39k0isww4p' name='All countries' table='[Data$]' type='table'>
          <columns gridOrigin='A1:BH265:no:A1:BH265:0' header='yes' outcome='2'>
            <column datatype='string' name='Country Name' ordinal='0' />
            <column datatype='string' name='Country Code' ordinal='1' />
            <column datatype='string' name='Indicator Name' ordinal='2' />
            <column datatype='real' name='1960' ordinal='3' />
            <column datatype='real' name='1961' ordinal='4' />
            <column datatype='real' name='1962' ordinal='5' />
            <column datatype='real' name='1963' ordinal='6' />
            <column datatype='real' name='1964' ordinal='7' />
            <column datatype='real' name='1965' ordinal='8' />
            <column datatype='real' name='1966' ordinal='9' />
            <column datatype='real' name='1967' ordinal='10' />
            <column datatype='real' name='1968' ordinal='11' />
            <column datatype='real' name='1969' ordinal='12' />
            <column datatype='real' name='1970' ordinal='13' />
            <column datatype='real' name='1971' ordinal='14' />
            <column datatype='real' name='1972' ordinal='15' />
            <column datatype='real' name='1973' ordinal='16' />
            <column datatype='real' name='1974' ordinal='17' />
            <column datatype='real' name='1975' ordinal='18' />
            <column datatype='real' name='1976' ordinal='19' />
            <column datatype='real' name='1977' ordinal='20' />
            <column datatype='real' name='1978' ordinal='21' />
            <column datatype='real' name='1979' ordinal='22' />
            <column datatype='real' name='1980' ordinal='23' />
            <column datatype='real' name='1981' ordinal='24' />
            <column datatype='real' name='1982' ordinal='25' />
            <column datatype='real' name='1983' ordinal='26' />
            <column datatype='real' name='1984' ordinal='27' />
            <column datatype='real' name='1985' ordinal='28' />
            <column datatype='real' name='1986' ordinal='29' />
            <column datatype='real' name='1987' ordinal='30' />
            <column datatype='real' name='1988' ordinal='31' />
            <column datatype='real' name='1989' ordinal='32' />
            <column datatype='real' name='1990' ordinal='33' />
            <column datatype='real' name='1991' ordinal='34' />
            <column datatype='real' name='1992' ordinal='35' />
            <column datatype='real' name='1993' ordinal='36' />
            <column datatype='real' name='1994' ordinal='37' />
            <column datatype='real' name='1995' ordinal='38' />
            <column datatype='real' name='1996' ordinal='39' />
            <column datatype='real' name='1997' ordinal='40' />
            <column datatype='real' name='1998' ordinal='41' />
            <column datatype='real' name='1999' ordinal='42' />
            <column datatype='real' name='2000' ordinal='43' />
            <column datatype='real' name='2001' ordinal='44' />
            <column datatype='real' name='2002' ordinal='45' />
            <column datatype='real' name='2003' ordinal='46' />
            <column datatype='real' name='2004' ordinal='47' />
            <column datatype='real' name='2005' ordinal='48' />
            <column datatype='real' name='2006' ordinal='49' />
            <column datatype='real' name='2007' ordinal='50' />
            <column datatype='real' name='2008' ordinal='51' />
            <column datatype='real' name='2009' ordinal='52' />
            <column datatype='real' name='2010' ordinal='53' />
            <column datatype='real' name='2011' ordinal='54' />
            <column datatype='real' name='2012' ordinal='55' />
            <column datatype='real' name='2013' ordinal='56' />
            <column datatype='real' name='2014' ordinal='57' />
            <column datatype='real' name='2015' ordinal='58' />
            <column datatype='real' name='2016' ordinal='59' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Country Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country Name]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>Country Name</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country Code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country Code]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>Country Code</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Indicator Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Indicator Name]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>Indicator Name</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1960</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1960]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1960</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1961</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1961]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1961</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1962</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1962]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1962</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1963</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1963]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1963</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1964</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1964]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1964</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1965</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1965]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1965</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1966</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1966]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1966</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1967</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1967]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1967</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1968</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1968]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1968</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1969</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1969]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1969</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1970</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1970]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1970</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1971</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1971]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1971</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1972</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1972]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1972</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1973</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1973]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1973</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1974</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1974]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1974</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1975</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1975]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1975</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1976</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1976]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1976</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1977</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1977]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1977</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1978</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1978]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1978</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1979</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1979]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1979</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1980</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1980]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1980</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1981</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1981]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1981</remote-alias>
            <ordinal>24</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1982</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1982]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1982</remote-alias>
            <ordinal>25</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1983</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1983]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1983</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1984</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1984]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1984</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1985</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1985]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1985</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1986</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1986]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1986</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1987</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1987]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1987</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1988</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1988]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1988</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1989</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1989]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1989</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1990</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1990]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1990</remote-alias>
            <ordinal>33</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1991</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1991]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1991</remote-alias>
            <ordinal>34</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1992</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1992]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1992</remote-alias>
            <ordinal>35</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1993</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1993]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1993</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1994</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1994]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1994</remote-alias>
            <ordinal>37</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1995</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1995]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1995</remote-alias>
            <ordinal>38</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1996</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1996]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1996</remote-alias>
            <ordinal>39</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1997</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1997]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1997</remote-alias>
            <ordinal>40</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1998</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1998]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1998</remote-alias>
            <ordinal>41</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1999</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1999]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1999</remote-alias>
            <ordinal>42</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2000</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2000]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2000</remote-alias>
            <ordinal>43</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2001</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2001]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2001</remote-alias>
            <ordinal>44</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2002</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2002]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2002</remote-alias>
            <ordinal>45</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2003</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2003]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2003</remote-alias>
            <ordinal>46</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2004</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2004]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2004</remote-alias>
            <ordinal>47</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2005</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2005]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2005</remote-alias>
            <ordinal>48</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2006</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2006]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2006</remote-alias>
            <ordinal>49</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2007</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2007]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2007</remote-alias>
            <ordinal>50</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2008</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2008]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2008</remote-alias>
            <ordinal>51</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2009</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2009]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2009</remote-alias>
            <ordinal>52</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2010</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2010]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2010</remote-alias>
            <ordinal>53</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2011</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2011]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2011</remote-alias>
            <ordinal>54</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2012</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2012]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2012</remote-alias>
            <ordinal>55</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2013</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2013]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2013</remote-alias>
            <ordinal>56</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2014</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2014]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2014</remote-alias>
            <ordinal>57</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2015</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2015]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2015</remote-alias>
            <ordinal>58</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2016</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2016]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2016</remote-alias>
            <ordinal>59</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[All countries]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:BH265:no:A1:BH265:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' name='[1960]' role='measure' type='quantitative' />
      <column datatype='real' name='[1961]' role='measure' type='quantitative' />
      <column datatype='real' name='[1962]' role='measure' type='quantitative' />
      <column datatype='real' name='[1963]' role='measure' type='quantitative' />
      <column datatype='real' name='[1964]' role='measure' type='quantitative' />
      <column datatype='real' name='[1965]' role='measure' type='quantitative' />
      <column datatype='real' name='[1966]' role='measure' type='quantitative' />
      <column datatype='real' name='[1967]' role='measure' type='quantitative' />
      <column datatype='real' name='[1968]' role='measure' type='quantitative' />
      <column datatype='real' name='[1969]' role='measure' type='quantitative' />
      <column datatype='real' name='[1970]' role='measure' type='quantitative' />
      <column datatype='real' name='[1971]' role='measure' type='quantitative' />
      <column datatype='real' name='[1972]' role='measure' type='quantitative' />
      <column datatype='real' name='[1973]' role='measure' type='quantitative' />
      <column datatype='real' name='[1974]' role='measure' type='quantitative' />
      <column datatype='real' name='[1975]' role='measure' type='quantitative' />
      <column datatype='real' name='[1976]' role='measure' type='quantitative' />
      <column datatype='real' name='[1977]' role='measure' type='quantitative' />
      <column datatype='real' name='[1978]' role='measure' type='quantitative' />
      <column datatype='real' name='[1979]' role='measure' type='quantitative' />
      <column datatype='real' name='[1980]' role='measure' type='quantitative' />
      <column datatype='real' name='[1981]' role='measure' type='quantitative' />
      <column datatype='real' name='[1982]' role='measure' type='quantitative' />
      <column datatype='real' name='[1983]' role='measure' type='quantitative' />
      <column datatype='real' name='[1984]' role='measure' type='quantitative' />
      <column datatype='real' name='[1985]' role='measure' type='quantitative' />
      <column datatype='real' name='[1986]' role='measure' type='quantitative' />
      <column datatype='real' name='[1987]' role='measure' type='quantitative' />
      <column datatype='real' name='[1988]' role='measure' type='quantitative' />
      <column datatype='real' name='[1989]' role='measure' type='quantitative' />
      <column datatype='real' name='[1990]' role='measure' type='quantitative' />
      <column datatype='real' name='[1991]' role='measure' type='quantitative' />
      <column datatype='real' name='[1992]' role='measure' type='quantitative' />
      <column datatype='real' name='[1993]' role='measure' type='quantitative' />
      <column datatype='real' name='[1994]' role='measure' type='quantitative' />
      <column datatype='real' name='[1995]' role='measure' type='quantitative' />
      <column datatype='real' name='[1996]' role='measure' type='quantitative' />
      <column datatype='real' name='[1997]' role='measure' type='quantitative' />
      <column datatype='real' name='[1998]' role='measure' type='quantitative' />
      <column datatype='real' name='[1999]' role='measure' type='quantitative' />
      <column datatype='real' name='[2000]' role='measure' type='quantitative' />
      <column datatype='real' name='[2001]' role='measure' type='quantitative' />
      <column datatype='real' name='[2002]' role='measure' type='quantitative' />
      <column datatype='real' name='[2003]' role='measure' type='quantitative' />
      <column datatype='real' name='[2004]' role='measure' type='quantitative' />
      <column datatype='real' name='[2005]' role='measure' type='quantitative' />
      <column datatype='real' name='[2006]' role='measure' type='quantitative' />
      <column datatype='real' name='[2007]' role='measure' type='quantitative' />
      <column datatype='real' name='[2008]' role='measure' type='quantitative' />
      <column datatype='real' name='[2009]' role='measure' type='quantitative' />
      <column datatype='real' name='[2010]' role='measure' type='quantitative' />
      <column datatype='real' name='[2011]' role='measure' type='quantitative' />
      <column datatype='real' name='[2012]' role='measure' type='quantitative' />
      <column datatype='real' name='[2013]' role='measure' type='quantitative' />
      <column datatype='real' name='[2014]' role='measure' type='quantitative' />
      <column datatype='real' name='[2015]' role='measure' type='quantitative' />
      <column datatype='real' name='[2016]' role='measure' type='quantitative' />
      <column caption='Percentage decrease2000-2016' datatype='real' name='[Calculation_251427529587380224]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='((SUM([2000])-SUM([2016]))/SUM([2000]))*100' />
      </column>
      <column caption='Percentage decrease60-80' datatype='real' name='[Calculation_477170460220043275]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='((SUM([1960])-SUM([1980]))/SUM([1960]))*100' />
      </column>
      <column caption='Percentage decrease80-2000' datatype='real' name='[Calculation_620159748490080258]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='((SUM([1980])-SUM([2000]))/SUM([1980]))*100' />
      </column>
      <column datatype='string' name='[Country Code]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column-instance column='[1960]' derivation='Avg' name='[avg:1960:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[diff:usr:Calculation_477170460220043275:qk:2]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='CellInPane' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[diff:usr:Calculation_477170460220043275:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Columns' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
      <column-instance column='[1960]' derivation='Sum' name='[pcto:sum:1960:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1960]' derivation='Sum' name='[pcto:sum:1960:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1961]' derivation='Sum' name='[pcto:sum:1961:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1961]' derivation='Sum' name='[pcto:sum:1961:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1962]' derivation='Sum' name='[pcto:sum:1962:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1962]' derivation='Sum' name='[pcto:sum:1962:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1963]' derivation='Sum' name='[pcto:sum:1963:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1963]' derivation='Sum' name='[pcto:sum:1963:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1964]' derivation='Sum' name='[pcto:sum:1964:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1964]' derivation='Sum' name='[pcto:sum:1964:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1965]' derivation='Sum' name='[pcto:sum:1965:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1965]' derivation='Sum' name='[pcto:sum:1965:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1966]' derivation='Sum' name='[pcto:sum:1966:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1966]' derivation='Sum' name='[pcto:sum:1966:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1967]' derivation='Sum' name='[pcto:sum:1967:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1967]' derivation='Sum' name='[pcto:sum:1967:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1968]' derivation='Sum' name='[pcto:sum:1968:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1968]' derivation='Sum' name='[pcto:sum:1968:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1969]' derivation='Sum' name='[pcto:sum:1969:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1969]' derivation='Sum' name='[pcto:sum:1969:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1970]' derivation='Sum' name='[pcto:sum:1970:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1970]' derivation='Sum' name='[pcto:sum:1970:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1961]' derivation='Sum' name='[sum:1961:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1962]' derivation='Sum' name='[sum:1962:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1963]' derivation='Sum' name='[sum:1963:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1964]' derivation='Sum' name='[sum:1964:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1965]' derivation='Sum' name='[sum:1965:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1966]' derivation='Sum' name='[sum:1966:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1967]' derivation='Sum' name='[sum:1967:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1968]' derivation='Sum' name='[sum:1968:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1969]' derivation='Sum' name='[sum:1969:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1970]' derivation='Sum' name='[sum:1970:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1971]' derivation='Sum' name='[sum:1971:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1972]' derivation='Sum' name='[sum:1972:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1973]' derivation='Sum' name='[sum:1973:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1974]' derivation='Sum' name='[sum:1974:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1975]' derivation='Sum' name='[sum:1975:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1976]' derivation='Sum' name='[sum:1976:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1977]' derivation='Sum' name='[sum:1977:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1978]' derivation='Sum' name='[sum:1978:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1979]' derivation='Sum' name='[sum:1979:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1980]' derivation='Sum' name='[sum:1980:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1981]' derivation='Sum' name='[sum:1981:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1982]' derivation='Sum' name='[sum:1982:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1983]' derivation='Sum' name='[sum:1983:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1984]' derivation='Sum' name='[sum:1984:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1985]' derivation='Sum' name='[sum:1985:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1986]' derivation='Sum' name='[sum:1986:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1987]' derivation='Sum' name='[sum:1987:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1988]' derivation='Sum' name='[sum:1988:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1989]' derivation='Sum' name='[sum:1989:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1990]' derivation='Sum' name='[sum:1990:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1991]' derivation='Sum' name='[sum:1991:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1992]' derivation='Sum' name='[sum:1992:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1993]' derivation='Sum' name='[sum:1993:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1994]' derivation='Sum' name='[sum:1994:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1995]' derivation='Sum' name='[sum:1995:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1996]' derivation='Sum' name='[sum:1996:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1997]' derivation='Sum' name='[sum:1997:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1998]' derivation='Sum' name='[sum:1998:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1999]' derivation='Sum' name='[sum:1999:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2000]' derivation='Sum' name='[sum:2000:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2001]' derivation='Sum' name='[sum:2001:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2002]' derivation='Sum' name='[sum:2002:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2003]' derivation='Sum' name='[sum:2003:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2004]' derivation='Sum' name='[sum:2004:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2005]' derivation='Sum' name='[sum:2005:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2006]' derivation='Sum' name='[sum:2006:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2007]' derivation='Sum' name='[sum:2007:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2008]' derivation='Sum' name='[sum:2008:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2009]' derivation='Sum' name='[sum:2009:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2010]' derivation='Sum' name='[sum:2010:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2011]' derivation='Sum' name='[sum:2011:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2012]' derivation='Sum' name='[sum:2012:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2013]' derivation='Sum' name='[sum:2013:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2014]' derivation='Sum' name='[sum:2014:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2015]' derivation='Sum' name='[sum:2015:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2016]' derivation='Sum' name='[sum:2016:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[usr:Calculation_477170460220043275:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.323829' measure-ordering='alphabetic' measure-percentage='0.676171' show-structure='true' user-set-layout='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Country Name:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Middle East &amp; North Africa&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;South Asia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Caribbean small states&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Central Europe and the Baltics&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Latin America &amp; Caribbean&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sub-Saharan Africa (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Syrian Arab Republic&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Korea, Dem. People’s Rep.&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Late-demographic dividend&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Not classified&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Arab World&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Early-demographic dividend&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;High income&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;IDA total&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Other small states&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Heavily indebted poor countries (HIPC)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Post-demographic dividend&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;South Asia (IDA &amp; IBRD)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;St. Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Northern Mariana Islands&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;East Asia &amp; Pacific&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Euro area&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Low income&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lower middle income&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;St. Martin (French part)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Venezuela, RB&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Europe &amp; Central Asia (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Macedonia, FYR&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Middle East &amp; North Africa (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sint Maarten (Dutch part)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sub-Saharan Africa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Swaziland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;East Asia &amp; Pacific (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kyrgyz Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pacific island small states&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;IDA &amp; IBRD total&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Virgin Islands (U.S.)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bahamas, The&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Fragile and conflict affected situations&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Iran, Islamic Rep.&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Latin America &amp; Caribbean (excluding high income)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Macao SAR, China&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;OECD members&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;European Union&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Latin America &amp; the Caribbean (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;IDA only&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Korea, Rep.&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Small states&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;St. Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sub-Saharan Africa (excluding high income)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Upper middle income&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Congo, Dem. Rep.&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hong Kong SAR, China&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;St. Lucia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;West Bank and Gaza&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Gambia, The&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Low &amp; middle income&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Europe &amp; Central Asia (excluding high income)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;IDA blend&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lao PDR&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Least developed countries: UN classification&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Pre-demographic dividend&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Congo, Rep.&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;East Asia &amp; Pacific (excluding high income)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Europe &amp; Central Asia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Faroe Islands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Middle income&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;IBRD only&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Micronesia, Fed. Sts.&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Slovak Republic&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Egypt, Arab Rep.&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Middle East &amp; North Africa (excluding high income)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Russian Federation&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Yemen, Rep.&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1968:qk:1]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1968:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1968:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1988:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2008:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[avg:1960:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[diff:usr:Calculation_477170460220043275:qk:2]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[diff:usr:Calculation_477170460220043275:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1960:qk:1]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1960:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1964:qk:1]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1964:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1964:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1984:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2004:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1972:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1992:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2011:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1969:qk:1]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1969:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1969:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1989:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2009:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1965:qk:1]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1965:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1965:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1985:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2005:qk]&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1978:qk]&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1998:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1961:qk:1]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1961:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1961:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1981:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2001:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1976:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1996:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2015:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1966:qk:1]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1966:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1966:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1986:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2006:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1973:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1993:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2012:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1974:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1994:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2013:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1977:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1997:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1979:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1999:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1970:qk:1]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1970:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1990:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1967:qk:1]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1967:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1967:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1987:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2007:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1962:qk:1]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1962:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1962:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1982:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2002:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1975:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1995:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2014:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1971:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1991:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2010:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_47287801348087813:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460218281988:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1963:qk:1]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1963:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1963:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1983:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2003:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='1960-80'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='real' name='[1961]' role='measure' type='quantitative' />
            <column datatype='real' name='[1962]' role='measure' type='quantitative' />
            <column datatype='real' name='[1963]' role='measure' type='quantitative' />
            <column datatype='real' name='[1964]' role='measure' type='quantitative' />
            <column datatype='real' name='[1965]' role='measure' type='quantitative' />
            <column datatype='real' name='[1966]' role='measure' type='quantitative' />
            <column datatype='real' name='[1967]' role='measure' type='quantitative' />
            <column datatype='real' name='[1968]' role='measure' type='quantitative' />
            <column datatype='real' name='[1969]' role='measure' type='quantitative' />
            <column datatype='real' name='[1970]' role='measure' type='quantitative' />
            <column datatype='real' name='[1971]' role='measure' type='quantitative' />
            <column datatype='real' name='[1972]' role='measure' type='quantitative' />
            <column datatype='real' name='[1973]' role='measure' type='quantitative' />
            <column datatype='real' name='[1974]' role='measure' type='quantitative' />
            <column datatype='real' name='[1975]' role='measure' type='quantitative' />
            <column datatype='real' name='[1976]' role='measure' type='quantitative' />
            <column datatype='real' name='[1977]' role='measure' type='quantitative' />
            <column datatype='real' name='[1978]' role='measure' type='quantitative' />
            <column datatype='real' name='[1979]' role='measure' type='quantitative' />
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1961]' derivation='Sum' name='[sum:1961:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1962]' derivation='Sum' name='[sum:1962:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1963]' derivation='Sum' name='[sum:1963:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1964]' derivation='Sum' name='[sum:1964:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1965]' derivation='Sum' name='[sum:1965:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1966]' derivation='Sum' name='[sum:1966:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1967]' derivation='Sum' name='[sum:1967:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1968]' derivation='Sum' name='[sum:1968:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1969]' derivation='Sum' name='[sum:1969:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1970]' derivation='Sum' name='[sum:1970:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1971]' derivation='Sum' name='[sum:1971:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1972]' derivation='Sum' name='[sum:1972:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1973]' derivation='Sum' name='[sum:1973:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1974]' derivation='Sum' name='[sum:1974:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1975]' derivation='Sum' name='[sum:1975:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1976]' derivation='Sum' name='[sum:1976:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1977]' derivation='Sum' name='[sum:1977:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1978]' derivation='Sum' name='[sum:1978:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1979]' derivation='Sum' name='[sum:1979:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1980]' derivation='Sum' name='[sum:1980:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1961:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1962:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1963:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1964:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1965:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1966:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1967:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1968:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1969:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1971:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1972:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1973:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1974:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1975:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1976:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1977:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1978:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1979:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1961:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1962:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1963:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1964:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1965:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1966:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1967:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1968:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1969:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1971:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1972:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1973:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1974:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1975:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1976:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1977:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1978:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1979:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country Name:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;American Samoa&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Andorra&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bermuda&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;British Virgin Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cayman Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Dominica&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Faroe Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Germany&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gibraltar&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Greenland&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Isle of Man&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kosovo&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liechtenstein&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Marshall Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Monaco&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nauru&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Northern Mariana Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Not classified&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Palau&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;San Marino&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sint Maarten (Dutch part)&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Slovenia&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;St. Kitts and Nevis&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;St. Martin (French part)&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Turks and Caicos Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tuvalu&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;West Bank and Gaza&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1961:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1962:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1963:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1964:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1965:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1966:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1967:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1968:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1969:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1971:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1972:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1973:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1974:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1975:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1976:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1977:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1978:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1979:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1961:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1962:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1963:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1964:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1965:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1966:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1967:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1968:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1969:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1971:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1972:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1973:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1974:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1975:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1976:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1977:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1978:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1979:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Multiple Values]</rows>
        <cols>([federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk] / [federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='1960-80 mortality decrease'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column caption='Percentage decrease60-80' datatype='real' name='[Calculation_477170460220043275]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='((SUM([1960])-SUM([1980]))/SUM([1960]))*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[usr:Calculation_477170460220043275:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Aruba&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belize&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Brunei Darussalam&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Burkina Faso&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cabo Verde&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Costa Rica&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cuba&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gabon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guam&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Hong Kong SAR, China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Korea, Dem. People’s Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liberia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Libya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Macao SAR, China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mali&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;New Caledonia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Papua New Guinea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Peru&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Syrian Arab Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Virgin Islands (U.S.)&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' palette='green_blue_white_diverging_10_0' type='interpolated' />
            <encoding attr='size-bar' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
          <style-rule element='refband'>
            <format attr='reverse-palette' id='refline1' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='1980-2000'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column datatype='real' name='[1981]' role='measure' type='quantitative' />
            <column datatype='real' name='[1982]' role='measure' type='quantitative' />
            <column datatype='real' name='[1983]' role='measure' type='quantitative' />
            <column datatype='real' name='[1984]' role='measure' type='quantitative' />
            <column datatype='real' name='[1985]' role='measure' type='quantitative' />
            <column datatype='real' name='[1986]' role='measure' type='quantitative' />
            <column datatype='real' name='[1987]' role='measure' type='quantitative' />
            <column datatype='real' name='[1988]' role='measure' type='quantitative' />
            <column datatype='real' name='[1989]' role='measure' type='quantitative' />
            <column datatype='real' name='[1990]' role='measure' type='quantitative' />
            <column datatype='real' name='[1991]' role='measure' type='quantitative' />
            <column datatype='real' name='[1992]' role='measure' type='quantitative' />
            <column datatype='real' name='[1993]' role='measure' type='quantitative' />
            <column datatype='real' name='[1994]' role='measure' type='quantitative' />
            <column datatype='real' name='[1995]' role='measure' type='quantitative' />
            <column datatype='real' name='[1996]' role='measure' type='quantitative' />
            <column datatype='real' name='[1997]' role='measure' type='quantitative' />
            <column datatype='real' name='[1998]' role='measure' type='quantitative' />
            <column datatype='real' name='[1999]' role='measure' type='quantitative' />
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1980]' derivation='Sum' name='[sum:1980:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1981]' derivation='Sum' name='[sum:1981:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1982]' derivation='Sum' name='[sum:1982:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1983]' derivation='Sum' name='[sum:1983:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1984]' derivation='Sum' name='[sum:1984:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1985]' derivation='Sum' name='[sum:1985:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1986]' derivation='Sum' name='[sum:1986:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1987]' derivation='Sum' name='[sum:1987:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1988]' derivation='Sum' name='[sum:1988:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1989]' derivation='Sum' name='[sum:1989:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1990]' derivation='Sum' name='[sum:1990:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1991]' derivation='Sum' name='[sum:1991:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1992]' derivation='Sum' name='[sum:1992:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1993]' derivation='Sum' name='[sum:1993:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1994]' derivation='Sum' name='[sum:1994:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1995]' derivation='Sum' name='[sum:1995:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1996]' derivation='Sum' name='[sum:1996:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1997]' derivation='Sum' name='[sum:1997:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1998]' derivation='Sum' name='[sum:1998:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1999]' derivation='Sum' name='[sum:1999:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2000]' derivation='Sum' name='[sum:2000:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1981:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1982:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1983:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1984:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1985:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1986:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1987:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1988:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1989:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1990:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1991:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1992:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1993:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1994:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1995:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1996:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1997:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1998:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1999:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country Name:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;American Samoa&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Andorra&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bermuda&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;British Virgin Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cayman Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Faroe Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gibraltar&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Isle of Man&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kosovo&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liechtenstein&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Monaco&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nauru&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Northern Mariana Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Not classified&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Palau&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;San Marino&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sint Maarten (Dutch part)&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;St. Martin (French part)&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Turks and Caicos Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tuvalu&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1981:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1982:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1983:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1984:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1985:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1986:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1987:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1988:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1989:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1990:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1991:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1992:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1993:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1994:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1995:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1996:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1997:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1998:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1999:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1981:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1982:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1983:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1984:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1985:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1986:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1987:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1988:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1989:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1990:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1991:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1992:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1993:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1994:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1995:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1996:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1997:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1998:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1999:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Multiple Values]</rows>
        <cols>([federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk] / [federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='2000-2016'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column datatype='real' name='[2001]' role='measure' type='quantitative' />
            <column datatype='real' name='[2002]' role='measure' type='quantitative' />
            <column datatype='real' name='[2003]' role='measure' type='quantitative' />
            <column datatype='real' name='[2004]' role='measure' type='quantitative' />
            <column datatype='real' name='[2005]' role='measure' type='quantitative' />
            <column datatype='real' name='[2006]' role='measure' type='quantitative' />
            <column datatype='real' name='[2007]' role='measure' type='quantitative' />
            <column datatype='real' name='[2008]' role='measure' type='quantitative' />
            <column datatype='real' name='[2009]' role='measure' type='quantitative' />
            <column datatype='real' name='[2010]' role='measure' type='quantitative' />
            <column datatype='real' name='[2011]' role='measure' type='quantitative' />
            <column datatype='real' name='[2012]' role='measure' type='quantitative' />
            <column datatype='real' name='[2013]' role='measure' type='quantitative' />
            <column datatype='real' name='[2014]' role='measure' type='quantitative' />
            <column datatype='real' name='[2015]' role='measure' type='quantitative' />
            <column datatype='real' name='[2016]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[2000]' derivation='Sum' name='[sum:2000:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2001]' derivation='Sum' name='[sum:2001:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2002]' derivation='Sum' name='[sum:2002:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2003]' derivation='Sum' name='[sum:2003:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2004]' derivation='Sum' name='[sum:2004:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2005]' derivation='Sum' name='[sum:2005:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2006]' derivation='Sum' name='[sum:2006:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2007]' derivation='Sum' name='[sum:2007:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2008]' derivation='Sum' name='[sum:2008:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2009]' derivation='Sum' name='[sum:2009:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2010]' derivation='Sum' name='[sum:2010:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2011]' derivation='Sum' name='[sum:2011:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2012]' derivation='Sum' name='[sum:2012:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2013]' derivation='Sum' name='[sum:2013:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2014]' derivation='Sum' name='[sum:2014:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2015]' derivation='Sum' name='[sum:2015:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2016]' derivation='Sum' name='[sum:2016:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2001:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2002:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2003:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2004:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2005:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2006:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2007:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2008:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2009:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2010:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2011:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2012:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2013:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2014:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2015:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2001:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2002:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2003:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2004:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2005:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2006:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2007:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2008:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2009:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2010:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2011:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2012:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2013:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2014:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2015:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2001:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2002:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2003:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2004:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2005:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2006:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2007:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2008:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2009:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2010:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2011:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2012:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2013:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2014:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2015:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Multiple Values]</rows>
        <cols>([federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk] / [federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='African mortality rate'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Algeria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Angola&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Benin&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Burkina Faso&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Burundi&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cameroon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Central African Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Chad&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Comoros&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Congo, Dem. Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Congo, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cote d&apos;Ivoire&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Djibouti&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Egypt, Arab Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Equatorial Guinea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Eritrea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gabon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gambia, The&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ghana&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guinea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guinea-Bissau&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kenya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lesotho&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liberia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Libya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Madagascar&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Malawi&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mali&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mauritania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Morocco&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mozambique&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Namibia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Niger&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Rwanda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sao Tome and Principe&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Senegal&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Seychelles&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sierra Leone&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Somalia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;South Sudan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sudan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Swaziland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tanzania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Togo&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Uganda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zambia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' num-steps='15' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Decrease mortality 1980-2000'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column caption='Percentage decrease80-2000' datatype='real' name='[Calculation_620159748490080258]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='((SUM([1980])-SUM([2000]))/SUM([1980]))*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_620159748490080258]' derivation='User' name='[usr:Calculation_620159748490080258:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Algeria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Brunei Darussalam&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cabo Verde&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Channel Islands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Chile&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guam&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Honduras&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Hong Kong SAR, China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iran, Islamic Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iraq&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Korea, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Macao SAR, China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Morocco&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;New Caledonia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Samoa&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Timor-Leste&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Vanuatu&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Virgin Islands (U.S.)&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Europe and Australia'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Albania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Andorra&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bosnia and Herzegovina&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Channel Islands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Estonia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Faroe Islands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iceland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Isle of Man&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kosovo&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liechtenstein&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Luxembourg&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Macedonia, FYR&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Moldova&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Monaco&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Montenegro&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Portugal&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;San Marino&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Serbia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;United Kingdom&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' num-steps='15' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Increase Mortality2000-2016'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column datatype='real' name='[2016]' role='measure' type='quantitative' />
            <column caption='Percentage decrease2000-2016' datatype='real' name='[Calculation_251427529587380224]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='((SUM([2000])-SUM([2016]))/SUM([2000]))*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_251427529587380224]' derivation='User' name='[usr:Calculation_251427529587380224:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Georgia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Libya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Syrian Arab Republic&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_251427529587380224:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#e15759' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_251427529587380224:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Increase in mortality1980-2000'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column caption='Percentage decrease80-2000' datatype='real' name='[Calculation_620159748490080258]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='((SUM([1980])-SUM([2000]))/SUM([1980]))*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_620159748490080258]' derivation='User' name='[usr:Calculation_620159748490080258:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Armenia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belize&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cameroon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Central African Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Congo, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cote d&apos;Ivoire&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Jamaica&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kazakhstan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kenya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lesotho&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Malawi&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mongolia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Namibia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Russian Federation&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Rwanda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sierra Leone&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Swaziland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tajikistan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tanzania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Uganda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zambia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]' num-steps='15' palette='orange_blue_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Mortality decrease 2000-2016'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column datatype='real' name='[2016]' role='measure' type='quantitative' />
            <column caption='Percentage decrease2000-2016' datatype='real' name='[Calculation_251427529587380224]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='((SUM([2000])-SUM([2016]))/SUM([2000]))*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_251427529587380224]' derivation='User' name='[usr:Calculation_251427529587380224:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' included-values='non-null' />
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Albania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Algeria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Angola&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Channel Islands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Congo, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;French Polynesia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guam&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iran, Islamic Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kenya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Korea, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Macao SAR, China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Malawi&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Montenegro&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Morocco&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Puerto Rico&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Rwanda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Samoa&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tanzania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Timor-Leste&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Uganda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zambia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_251427529587380224:qk]' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_251427529587380224:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_251427529587380224:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_251427529587380224:qk]' palette='green_blue_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
            <format attr='break-on-special' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_251427529587380224:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Mortality increase 1960-80'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column caption='Percentage decrease60-80' datatype='real' name='[Calculation_477170460220043275]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='((SUM([1960])-SUM([1980]))/SUM([1960]))*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[usr:Calculation_477170460220043275:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;El Salvador&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Estonia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iran, Islamic Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Russian Federation&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Slovak Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ukraine&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='mortality 1960'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' included-values='non-null' />
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' num-steps='15' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
            <format attr='break-on-special' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Story 1' type='storyboard'>
      <style>
        <style-rule element='story-point-caption'>
          <format attr='width' value='235' />
        </style-rule>
      </style>
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='97346' id='1' param='vert' removable='false' type='layout-flow' w='98504' x='748' y='1327'>
            <zone h='5473' id='3' type='title' w='98504' x='748' y='1327' />
            <zone h='16750' id='4' is-fixed='true' paired-zone-id='5' removable='false' type='flipboard-nav' w='98504' x='748' y='6800' />
            <zone h='75123' id='5' paired-zone-id='4' removable='false' type='flipboard' w='98504' x='748' y='23550'>
              <flipboard active-id='6' nav-type='caption' show-nav-arrows='true'>
                <story-points>
                  <story-point caption='The mortality rates in 1960 from the data of 190 countries averages to 342.3 per 1000 adult males.' captured-sheet='mortality 1960' id='1'>
                    <capturedDeltas>
                      <worksheet name='mortality 1960'>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' field-type='quantitative' max='10390423.225400038' min='-9536380.6514069475' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' field-type='quantitative' max='20317965.393037274' min='-20421278.088434771' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                        <selection-collection />
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='The African continent has the highest mortality rate that averages to 459.1 per 1000 adult males.' captured-sheet='African mortality rate' id='2'>
                    <capturedDeltas>
                      <worksheet name='African mortality rate'>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' field-type='quantitative' max='9410336.4245071076' min='-12634449.05338552' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' field-type='quantitative' max='12321345.517399136' min='-10445074.39860674' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='Australia and The European countries excluding Turkey and Kazakhstan have the lowest mortality rates at 200 and 203 per 1000 adult males respectively.' captured-sheet='Europe and Australia' id='3'>
                    <capturedDeltas>
                      <worksheet name='Europe and Australia'>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' field-type='quantitative' max='11855994.730702726' min='-4918827.2207441917' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' field-type='quantitative' max='21357214.885065835' min='-12950426.866321664' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='The rates compared from 1960-1980' captured-sheet='1960-80' id='5' />
                  <story-point caption='China has shown a drastic decrease in mortality rates of almost 66% from 1960-1970, followed by 33 other countries which has shown a significant decrease of more than 30%. ' captured-sheet='1960-80 mortality decrease' id='4' />
                  <story-point caption='On the contrary, few countries have shown a more than 10% increase in the Mortality rates with Hungary being the highest at almost 40%.  ' captured-sheet='Mortality increase 1960-80' id='6' />
                  <story-point caption='The Mortality rates from 1980 to 2000.' captured-sheet='1980-2000' id='7'>
                    <capturedDeltas>
                      <worksheet name='1980-2000'>
                        <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]' included-values='non-null' />
                        <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]' included-values='non-null' />
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='There was a significant decrease of above 30% in 42 countries from 1980 to 2000, with Iran having the highest decrease of about 63%.' captured-sheet='Decrease mortality 1980-2000' id='8' />
                  <story-point caption='During these two decades a few African countries as well as Russia and some of its neighbours have shown an increase in Mortality rates. Zimbabwe and Botswana has shown an above 100% increase in the rates.' captured-sheet='Increase in mortality1980-2000' id='9' />
                  <story-point caption='From 2000 till 2016.' captured-sheet='2000-2016' id='10' />
                  <story-point caption='In this period, several African countries have shown a significant decrease in Mortality rates with Morocco having the greatest decrease at almost 57%. A total of 30 countries has shown a decrease of more than 30% during this time gap.' captured-sheet='Mortality decrease 2000-2016' id='11' />
                  <story-point caption='During 1960-2000, only 3 countries have shown an increase in Mortality rates of which Syria tops at nearly 75 percent increase.' captured-sheet='Increase Mortality2000-2016' id='12' />
                </story-points>
              </flipboard>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='dashboard' name='Story 1'>
      <viewpoints />
      <active id='-1' />
    </window>
    <window class='worksheet' name='mortality 1960'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='African mortality rate'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Europe and Australia'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='1960-80 mortality decrease'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Calculation_47287801345564673:qk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Calculation_47287801347444739:qk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Calculation_477170460219936778:qk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='1960-80'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Mortality increase 1960-80'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <tuple-selection>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Hungary&quot;</value>
                <value>-39.403487774782761</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Ukraine&quot;</value>
                <value>-38.989514715941553</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Latvia&quot;</value>
                <value>-38.834604955627434</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Belarus&quot;</value>
                <value>-35.679801415112777</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Lithuania&quot;</value>
                <value>-34.694579631303014</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Iran, Islamic Rep.&quot;</value>
                <value>-32.422624567970352</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Slovak Republic&quot;</value>
                <value>-31.944260558718398</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Russian Federation&quot;</value>
                <value>-30.800216567406601</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Estonia&quot;</value>
                <value>-23.835907493666753</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Poland&quot;</value>
                <value>-23.735292536160678</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Cambodia&quot;</value>
                <value>-17.812214665136956</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Bulgaria&quot;</value>
                <value>-15.113557821726969</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Czech Republic&quot;</value>
                <value>-14.222771586355391</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Denmark&quot;</value>
                <value>-10.588258722319575</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;El Salvador&quot;</value>
                <value>-10.215052293389835</value>
              </tuple>
            </tuple-reference>
          </tuple-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Increase in mortality1980-2000'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Decrease mortality 1980-2000'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='1980-2000'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='2000-2016'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Mortality decrease 2000-2016'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='Increase Mortality2000-2016'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='1960-80' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='1960-80 mortality decrease' width='192'>
      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
      Jc3/B8D+RGIkFcmsAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='1980-2000' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='2000-2016' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='African mortality rate' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Decrease mortality 1980-2000' width='192'>
      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
      QA47GYn/D6bqE47DiUYyAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Europe and Australia' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy9aZAcR3Ym+HlcmZF3ZZ0oVOEkboBHE7zZItlN9TEttaRWj1ajGWnHNLtm
      u2trtvNj98/qz/7bH2truzZjazNmkkyyHe3oaGkktVrqFvtgd/MCAZIgAAIgzipU4agrs/LO
      uGN/JJ6Xh1dE1gGQIgp8ZmVVlRnh4eH+/Pl73zucLS8vh4ZhYD3kui4cx1nXtWtRGIZgjCEM
      w9jPGWOx9wDg36mqCs/z+GeapiGVSt2X/j3sFIYhut0ugiDg/+u6jlQqFTs39/O5YRjy5wZB
      AM/zInwh9mk9fRH5Rr5HMwwDmUxmXZ0LggD1en0V026E+t1L3ymKEvts+pwGwjRNPkmqqmIj
      7/I59acwDKGqKtrtNsIwhKIoKBQK0DRtw+10u13oug5N0zjzhWEIz/Og63rkes/z0Gq1EARB
      hB9834eiKLwvMjPLfCUyeRAE/H/iI7p/Q2/DGOOd+SSo32oWdwXqfKfTgWEYUFUVqVQqduF8
      Tpsj13VhWRaAHgOm0+kNMz/QY7hutwvP85DP5wGsSHmZ+Unyi8xPn9Ock7ATP1+LRL4Q/2aM
      YUMcs94H9iOZkTfybBqUIAi4NHEc577063NaIVn9AbBp1ZIxhkwmA8Mw+Px5ngfXdSNz6vs+
      2u12ZJGJ39P8EgOL3631LmJfZNrQkr4fjCa/kKjTJen+4vXUhvhiZAd8TveHXNeN6N2b3V19
      30e9Xuf/d7tdrkaJWgRJfFJNSGXpxw/AamketyhkvhFVpg3vACKz3itRR0XjRn5ZeRsUrw+C
      AOs13j+njZFsa+m6vinBJwsm0vtFdQYAHMfhuzoAGIax5vNkfhHtBeIPWhC0iOk6WmBhGG5s
      AdxPEjuf9LIy04sUBAFc10Umk4Gqqp+rQPeJgiCAbdsRBtusbRUnLMmQFXf9VCoFy7LQarXQ
      breRy+WQyWQ2PKciqqgoSsRojlvEG94BgP4ozno7KTN/UpuimhT34/s+N4Q/p/tDlmXBtu0I
      k26GSNrT3yTENE1Dt9uFbdtQFAWdTge+70NVVYRhCNu20W63YRjGuoxusW1ROxD/d12XI0vi
      fcAGbQCy0AFA13WuJ26WxM4nqT8Ef4kIlKIoEWjLsqwIxPY5bZ5EgUTj6XnehhEgMnTFdg3D
      gOd5sCwrogbV6/XI3Nm2zW0Emuu1SITJRb4iSuLTDe0Aqqoik8nANE3our5po1g2VuI6J2+/
      IjxG+iK1Q0bbZmi9aMI/Bf1T9CuVSiGTyUQECu0I6yWSuLJTS1VVztjUdjabRS6XWwWJBkHA
      eSyJZB6S7YC4hSA+G9jgAmCMIZ1Oc4Mil8ttWj9cC56SdwZR9dE0Dfl8PoIHb5ZZSOf9rJFt
      23jr56+h1WrhypXLmJ6e+lSeqygKUqkU0uk0/8z3/Q2NEUGo4pyR30bXdS7Vm80mWq0WfN9H
      Op3m1xJPidApEc21bB+KdqBoxBPJfES0cc/G3RekjqZSKXQ6nQ3dL3YizuEhd16+z/d9vgvc
      KyoVhuFnInyC9N8bN6ahKAre+dnfYm6xiWvXpwF3Caqq4fbBZ3H02BPI5/OfqLpHRqOu61yN
      6Xa7ABBZGEnvIarHsgT2fR+pVIo7x8hIFdUlolarxdvsB4/LoQ5JyGIcz21qATDGYFkWZx6x
      E2tJ9qRr1iPByViiSTBN8559E5vxbn5S9Hff/WtcuXQWQQg8e0SFphbg2jMYLwd4/5KDx3b/
      ED/7/kkce/pb2LV77yfaF0VRkMvl4Pv+CmSoKFzVTBo3gk1pwcSpH7Rzi98nRRckRR6Ixq78
      OZDMh7K2sOHZJyOGBkAOjuuH6ogdS7ouruPy1tZut7mUolAIcVAfFCIod2lpETM3pjF/ZxaO
      4+KfPZ9GECrQNAvjZQWFrIodYyoMXcGhiTZmpy9g5649n7jRT+qmSJZlwXGciAoqk4zMiKRp
      GhqNxiqjVX4u/ZaZXHaW0XX9+Ebuyz2pQGSIUiBTJpOJWO3yA9ZDImRFRlNSQJwIcVmWBd/3
      kc1mH0gE6MKFc7h08Sw8X4HTrSGjVnBgh4LJURW2EyCl+zh/uQt71kLH1NDVUhjd/SJeePEV
      dLtdaJq2aSfVZimVSnEjN51Oc+Ej9sFxnETmFOeQSNQeRIQvTr1Np9N87mX1Jm7BJanVm4JB
      gd4KJFe267prWupJFLd9iQZNPyI7QNd15PP5By4Izvd9TE9P4c/+9E9QygYoZBW8+FgajBkY
      H1LBGJAzNZy90MbohTaGNWCx5eOjYojrH7+JwOvimedfhaZp9wX+Je8sSdd+pKoq8vk82u02
      2u02gN58mKbJ1eFUKsX5QxRudK2smyftBHHkOE6iHSIKR1nqx8HtQRBsfAFomoZMJgPHcZBK
      paCq6poIgTwA/eApET2I27Lob1VVUSgUHijmD8MQN2dnsLQ4hzdf/0vk0j52jGrImkCtbmPv
      ZBqKsvKulUUXkyqgKgqGFYZmXcGRV17G7keOAugxbqPR4AvBMIwNjwehMQCQz+fXZRMpigLD
      MLjhGgQBOp0OV42IRxqNBoDVAZA0t7quw/f9VepLv0Xo+34EZaJ7ROanz/qF2dA1m7IACSEA
      VmIr6O+kB4nfi4MQt23Ry4hOEPFlFUX5xJGQ+01hGOLMmdM4/f5J7Nt/AOmUiX/xFQW+H+K7
      r9fQnrNRP+DhhecK8PwQqsIAy4eKHsPNu8DA4eM48ujTkXEJggCO48BxHFiWhUwmsyG1iISR
      pmkRSUzMLXrZgyCAZVl8/mXp7rouarUaj/5MpVI8rEJsI5/Pw/M8eJ7HfQOiHydO8Ikkaw+i
      0Ix7P7qG2hR/7gkCoY6vVwWSXdb0mRwfIm+JIvMbhsF1zweJbt6cxWvf/2t4TguaGuLQLgWd
      rotiTsdgWYOZURFea+PnQQh3yUVY1rGj4kLXe9KtwlJ4/AvHedJPt9uNABBhGML3fbRaLWSz
      2VhoVwwdJwYmlUZVVT4Ptm2j0+kgm83yeH7GWMTh2O12Y5G/IAi4aqTrOtcO6Jpms4l8Ps8h
      TlKZ4hYAfS9TGIZIp9O87fWoUHGGcRhuMCFGJN/30Wg0Eh8uM7m8DcrXJHWUbI5UKsV3nQdJ
      8gNAt9vBrVuzyOVLyBgZXL50CbkDGqZvhcimLYyWdRzZm8apUwrUqy0c1hlat33kdSF7Sk/B
      zGT5dt8vNbXdbiMIAu5cItJ1HY1GA77vwzAMDh6QHWdZVkS98H0flmVF0k4Z6+VgyOHMskBq
      t9t950lUheO+k4muo37T7qGqKlzXheu6vE/EV3E7hawismq1GqbTaZimmdjZuM5YlgXLshJx
      2rgF0K89+eUNw+BhsQ96nM/MzA3cujmLtJnBd7/7N9hWbEJhAV56soDRck8G0etdutqF9m4N
      40Z0ohohw/nhffiFf/Ffc+bs3bd6jOlvTdOQzWYjHvNWq8XVGzE2n4LgqE05oEym9UjbONJ1
      HblcDu12my/ijcT7UJgGpWrK/ZFtzCSbkwtY13XR6XR4+tt6ibbTODRHfMBGmJ+IVrlhGJ86
      zPdJ0OTkDjz3/Is48fbreGq/g0JOxa+9MoDRsgbGVpgfAEZGDFQFeULjU2AhHl24jDMn3l53
      3BPl14qqCjkTC4UCVFWF4zhoNpsRIEO06dZLa+ntRBTeIKs8a/EIqcqkVsWlTYokwqhx9gFd
      r9AKsW173fEexPjUsc0MlPhiYqcBrNq6H3RijGFxcRG+vQzX9XH8YBqGziC/Io1H14/Pg2j6
      IYqDQxyujJtUWS+nsBEiUgMIuyd1JomZZOw8Tu8nYCLpOo6531Vl5XTLuOvjdoQw7MUTua67
      6vu48RB3PvFdRL5VAHAXd7fbRavVWpeEIbgsDl+lz2VcNm6VypNJnt2tRJZl4f13/h6P7gkw
      kFfQ6ibnP+SzKhRT5f8TBSEwN7oXE7v3RK5fD4kMkEql4DgOF3hxMThJCyyuPZpfUf8WrxNt
      OtM0ufe7H1G7smpNn8nqnvg8WRWS+01t04JVRP3I9304jrOuDhJqsBaD004hDoR4vXzvRqV/
      vx2IEImN7lL3m95+88fYlrmCI3t0tLoB9mxPTuDRVIawrCOI6a8f+EAY3R1IVRRBA5F5dV2P
      1E+iiW82mxE9ut+8yHNE7YtSmBAkWe+mcjXkJKMwCKK4nUIMnxZJ5NUkpDBuESQtGEBQgfgE
      rLO4FGX1iyQbGdRRMTxVXrH0nRzivB7yfR8/+fFr+Ks//2N0u73MIt/3sbxcRafTweVLH+Mf
      /8v/iXfefpNDc/8U9NHZD2A7Aa7NWtgzkUK76+PSDSd2UbpeCGvRgSIJAYUBo4szmLt9C7lc
      jkvdTqeDVCqFQqGAbDYbcWSRLdXtdtFoNNBoNHiYghyQFjeXq5hF8hSL18hqEF1LiTGO43B0
      qh+JWgEQRXTof7lP4nVxqGKSGncXKNAi6sp682vJi3cvRJNAbvSNqj6XPr6AxdmT0JUOTr39
      DzDz47g1OwW/fQ1OkMLuUQcvHgtw5dbrqNd3/pPEDN24MYXxchdBEGK5GWD/Tg2KAlyctvHI
      hA7xlS0nQNcOoZQNuE0HutTX7VqID86fxeFjj6JYLHKGarVaKJVKXHiJ/hQR9dnIfCWBG5uh
      tZ4bJwhEyd1P5ZGZux8gI+5ORAqhLKSjmaa55oszxjbtjBLhuUwmwxOgN9qWbdv48Y9eQ7tj
      Y6ioYGFuFjeunML27EU8f8THgfEGjuwKYKYYdo16OPv2f8bi4sKG+3svFIYhrl86hS89aUDT
      GCZGDKhqb6xffCyF81MrWL7nhzh5keGW9xVsf/Ff4uquJ2BJfOGGIVzHRr1e51UxSM0gIiFG
      Vd3WUmfF++Qf+bt+1ycZviTR+6mgsrc/To+n56yVBBX3OYV0i20TaYqiIJvNotVq8Wyd9RBV
      C9uMakGS6l4kjKqq+Po3fhm5bA6v//jvELSv4ukjaYwN9pxl+zIrenYhq+L4/i4uXDyPkZHR
      TT9zo2R1u7h6bQo7sj5cL8RgcWVsh0oqhkorjDsz52Py8K/j6NFHwRjDzbEx3Pr9s9ijr6gM
      rQAo7+zlAbRarYhkA1b8M1THZyNCJU56JklU8Xt6viitZerXhqyOAVGHVT9+lOsCiX2iHezi
      xYtcpT9w4EAEHfN9v+cHMAwDAwMDG04Ooes3wsiKoqxrl1nPszvtDv7he38Fw5/BK8czGBtM
      7v/svI98LndPz9wovfWzv8WXH++glFdQrfsoF5IZshWM4/Dho9wp9MO//DOEYVRfDpjCa+gA
      KwxKUt51XXS7XY7ry3m2a5FshCahe/Lfoi1H920WeJB3tCSS+yaGWYufu66LXC4Hx3Fw4cIF
      uK6La9eu4b333sPs7CwUQn36wV79aKODvNnnxNG+/fvx67/x28gNHcOdpWTottYKsOQdw+NP
      HL8vz12LwjDE+bMn0K1dw1CRwXFDpI3+760pNo+rmrpyGU82b2G3viIhGWMYVEI0r1zgSJBI
      tm1D0zSk02mOflE05npJ1pWT3k1GVuIMY1H1iVsMceiS+PlGSEaGqB9kTFcqFQwODiIIAg6j
      Hjp0CJVKpQeDbraiAnnmNtLh+wlHmmYv8lE3cvD91XwRBCEu30pjWf8mXvryr3xqodO3bs6i
      c+c1HNvtwHYCXJnpomUFie/e7gYw8geRTqexXK1i5m/+BNuYC4VFnY6MAWOVGSwtLkb0b13X
      eXz+RtRYkeIYPo5p5apxcdeJ16+33X7X9yMZBgVW1J8gCLB7924cO3YMiqJgcnISN2/exPDw
      MBqNBoaGhqAxxtDtdjflgIrT39ai++3k8jwPtushP/Ayzt+8gH2jy1BV4MrtNALzCA4++RyK
      pcFPBf1xXRczM9M48dbryIRtVJYZdC3Anu1pHEgrkVh/IssJ8f7VLF74xWewuLCA0//vf8QR
      exkQLhUneTmVw2SxyL+jCg6KoiQ6tjZKsoSXvxNLjIsQpbgjyCiS/Lcc+SuS2P5aRDsOhXjI
      /afQ68HBQQDA7t27EYYhcnfVYbawsBCmUqlNx9eHYcgjDNciqjH/SUniRqOOyxfPwLWW8Mih
      FzD8KRq8YRji5z/7KX7+07/H3nEV+ayGxx5RcHnGxtNHMvj4hoc94xpSxsoYL9V9fLywH698
      5ds4/cEHOP/Om3i1OY1MwvAoioJOyPDx9iN44pe+BfWu74QMunst75Lko4m7jphYDGRLigyO
      ixbt56yizzfbX+pXHJokt61RNtFmibGeN7LZbPZVb6iEyicpiQuFIo4/8wufWPtJFAQB3nnr
      pzh75hRefkLHY/t672k5AVyvN7Fdy4flKEgZvRKArU6ImdZjePXr34Su65i/MYUX6tPI9JmK
      IAhgMoZt0+dwc/oL2LF3L5rNJnK5HE9rvBf8fj2oT5xjSYRC45hY9BLL38n/y23L368HZYpz
      vMb5ExhjUKgG473o5qK3t58++EkvgH8K8j0PP/vZ63jvxGt4YncNe7avRK+GwYom84WDaRRz
      PSnoesCpKyaef+mbHETIVW6jD4gVqYawqJkY3rat94y7ko+KlMVBkeud2zi1I0ly0v9yaiL9
      pn7I6pHc9lql0NfTd3knkCtDy/2POMLIiLoXtYSgTbETSVb/VqIwDPEP3/8ezp76PiaHfRzc
      ZaCQXdnqDZ1BVdkq49wPQoxNPhbZedO79/d9Fk3ecqAg/+JXYd6tniyiH/2k5FrjL6M7SZi+
      fL0s+GRkZy1DeS2BmPS9LN3Fz8Xv4hx04o9CKW/3SrST9Ovwg5TAvh4KggCd2jVMjKh49mgG
      KT36fkEYwnFXoz+NNmCY5chY6YUSOn3CZIIgQNsPUTv+Ko6/8iovDwKs5GaQw2dV1tM6d90k
      ZhWlqnht3Gktccwf9y7izhHHmHR/P0g2zhEm3xcr9e9qLHffQVmz3N16KZvNRio5i/QgJ7Yk
      Sc8wDOHYNrYPq7g4bcOyoxysqQzDAxqm7zgI0YNlAaBrA8Oj45FrU7oRB+8DuBsGzBRMTRzG
      E7/4dTDWO3aI5q3T6axKPo9rY63xT7IB1tK/ZZ+A+Kyk9sTvZcbvt1vJ77Hed5L7w3cAYPMH
      IMikqiqP8aED0cTvHkTyfR+XL11KnJB6y4OqMIwP69D11ZNxe9HD9mEdrhvixEd3JbUeoNlo
      RNq8PROP/oQA/CDAhewo9n/912DfTSNkjEWidqmu/r1Qv4Uu2nkyEYOJucN0H/3ux6iiRBbv
      30z/xfcQf+KiUHldIHKb34+FQCUzCGulSXlQD7H46KNzePedE9i3f7WOrqoqiuVxzMxdwmBR
      xcRI1IpljCGT7tkAKYPh6cO9uP2RsooLU9/Bz+dfwCP7D2O5UoFaGMCf1BU8kQ5wJAV0Q+C2
      YsIaGkdqfCcee+ElaHdr8TiOswq4IBiaPMHrOc+ZGFP8TZBlHJS5luTtt0Dinruea5Morrpc
      nF0g7kiyYawoCjQarDAM75sqRA/WdR2FQqEvpvxZJ9M0sWv3rsSt/ODBY7j4/mW8+PiKNA7D
      EJV6ADMFOF4ITevdS79VheHYHuDizCksV0fwwekPsX//fjz29V/BmTd+CmdsFEP7D+ORw8cw
      NDQE5W7xMYrllxPCRbIsK7LbrqXWyJ8lQamapsF1XaiqGuv4ot+yOiQ/ay37YL3XiNDqRuoC
      yYCBRjmjdJjx/VRVGNu4p/izQr7vo1KpYGJiEnv27E0c3MXFO1AUIJNeWeB+ALzxYRcHdijY
      M55Csx1C14G0ATRaAQYKCoIAqHVMHN69F4ePHAPQG6/nX3gBtWoVVz44ibN/8+dghRKGdj8C
      PVfA2Pg4f67M2CLTkE9A/C4J3oyDCkVpGoa94LRcLscPSZeZrR9UGve8tYThWu0lSfl+FPf+
      YRj2guGAlQONH2YSk8NnbtzAH/7B7/MTzuOIMYYdO/fAcaMTemNeQX7oMD684qFlhXjjYhFn
      p3Nw3BDnrjsIQ+DMFRtG6VEOHCiKgqmrV3Hl4gV88If/Dns++BGOzX+MA5dP4Nrffwfe3Xla
      j3SUk8GJZENT/JzajFMl0ul0JGBSNlz7RY/GjdlaFNdOP0M5aXHLer/oH6D7+Mwy1qsQsJnz
      oLYC+b6ParUChMCFs++jUZ3H008/teZYFPI5PLovjTAEGAOuzxnYdvi3caA0iNe/+3/A8RkG
      B0dQ1q/g5EUPjz9i4PsnGZ568V9h995DEYPx5vQUTr31Bh5lPhQGeCFghwyDz7+KHXv28K2e
      9H9Z0tOOm8/n4bpurFGcpK6I34tqRRj2yib2synIZui3ONfL+P3uj3O6EckqjlxjVt55uB0g
      YrwUT5KkX25lOvH2W3jt+9/Dybd+guG5H2CQVfD000+vOXE7du5Bfsev4a1zLs7P5lHY8asY
      3TaBdDqNmjMGQ7FwfMdVzFcdHNyhopRXUSwNY88jhxGGIQ9ZDsMQCzNT+Mqrr2L4a9/GG5aK
      My0fThCge+5UpG4TFSSII5pDsutEktGZpHeT82/b7XbfiOH1YP/3QnEMLFMcPJq0M4l1bTVx
      RVGZubVgq61EVCLk7LlzyGQyqE+9h+V8gMs1B90f/iVGdh7E0Sdf6Dse+w8+iokdj3AEbH7+
      DqanruLYo4+j0L2JlMGwc0zFyMBdx5FWhuu6+Ju//AN84elXUSgU4LouslkT+bFxqIaB7UUF
      RqjiWs1HO+1Htn6xgptIdA0dWbVejFxmXtmQjUtIj8PXZfVKvHe9IIiovsihGeLzY8scxuyG
      cn/CMORRC81ms6cCiYkLQP8a7FuNqKRIJpvFjanrOJS3cGhExVE2B0ObxweL2TXbYIzdLSTr
      49TJd2AtvY2WncP4U9/A1NkiysUWdm3rSR0/CHFnbgn1eh2e62D79gkAwMWPzuLo3Lu48Y/X
      kX78S9huhhjWGJbTGq7bDTi2va5YKlnKi5/Tbi8yaxytxaxxCy8OPt2oIBUZlaJM445TEncD
      +XniM+OAglwu18P/qZy8+FC6eKNZXg86tdttPP30MxgZHcNcs+d80lTgYkXDI0+8tO5JnLp+
      FWXvBzg80UI6N4Tt28cxOPkc6q2VSVpcDsAUA8ViEV//5d+BaWYQBAFqH7wODQH2ufMYevfP
      UGK9uP4BAxjVPdyame77bNFApf+JRANS1PHlezdKIvMl1YiV+7IWiX1LQhDF/iahWOLf4nsT
      StZoNHpZdHE3dLvdB/bYoc1QqVSCYRgolkq4NK1gvhkiBPB+bRTHBofX3U6jVsFYumcMLy9c
      R6fTwa07NZiFEJ4HnL3moW4P4Omnn+sV/y2XAfQmcbbWBWzA9kN0vABeyDCRdnGkpGFED3Hy
      zHsoDAxiaHg4tjZ/HOIDJMOIVCxLVVV+qmPcdXHGsqjqiLH3/dAnGWFKYmDqc7+dRF549Juu
      IzRPZHxxPDJ3Awm73W5PBZJXEBnCuVzuoVgEYdg7rcR1bNRthqWuiu15H0+XbuPD17+DL3z5
      N6CqayNjXcsCTIYzVx003An84G//AHdu30LukImbSzoef+V/QS6XWyXZVFXF9kIaT3pR1aPq
      KPjJvAslpeHl7TOY/tkf47o2gNGjX8Qjh46uej5NPqkQ4ufydQB48KJpmlx6U6Vo2T6IczbJ
      qrPM2GRPUpSBrMMn8ZZsg6xlzNMi7nQ6q5Af8RlULYMKQViW1YsFkrFV6nyz2YytALeVKAgC
      nHjnTfzxH/5H5I0QX/7Sl2EYBkZzwL5ygHz1A8zdmVtXWwcOPYp3z7uYvhOC2bOAV8eBgweh
      D72M/LaXceH8uVWJ4mEY9iDG0d2Y6gC2v6KaFLUQjVDBV/cbGMsyPDPs4dWBRbRuX0nsQ1Iq
      YdIc0lxrmsbRIyBezUiCTEWGo12h2WzyJCkqw5jUX/KFyO1Sn/ulR9JBjXGQcJyRTAudIlI1
      aiSVSkUOQ6CBoYPwHrQjidZDQRDgxo1pnPvZX+DxkRBjmob3racwjzHMztbx1YkqhtIePj7/
      LraNb4Oi9PdqDwyUMXnw6zArNTTbXdyauQq1UMYXH3seqVQK9XoNAHDxw5NYuHIGbqqEZ175
      GhYXF7H/+PO4tW0HPnrzv+BJtRfq8EED+NIjKyEWjAEsDNGuLUUMRFkCx6kPceoA/TYMA+12
      e9WZA7SbxKkr8jNs24ZlWQiCALquwzRNFO/mLqfTaSwtLfEzH8R26FinOLWJGNj3/dhFwFjP
      J9JqtVbZNHELnjQbxhgHFFi9Xg8pcpNOfZFfVFEUXrdzqywCz/Pw3e/8MVS3Bqs6A+a5yBoq
      Bp74No4/8zwunH4HpRt/jZEsULeBuZGv44kXv5rYHg14t9vlRwr5vocwBEccrl+5hKXr53Cg
      /SEGUwGm2zoqSgmh04UDHaHnolOv46DqoeoCV30F3zqgr6oTOt1UMLfnGzj66BN8PsiXs57Q
      E7qWmIoSxykSQFw08sIR+aJSqcDzPM7Y4ik+4rjQtc1mE6ZpIpfLIZVKodlswrIsjI2N8XZF
      XT4JphXbpmQsOiyw3/xQW4qioFgsol6vQ6PGm83mKkOIDKUwDFGv12GaJjKZzJoD/KBQYDfx
      pR1zMHYa8AMdJ+dHcfyZ5+G6LrbvOYQbl76H0ZyLUhp44+NzOPbsl1cNcqPRwNLSEnK5LAwj
      FamGLe4YJ955G8PX/g4vlBUgDQAMu3MedmMJEIbUKqn4i4s+fmGHjm8X4+HIXfkAcxd+gMuq
      gn2HH11VRa0f/CgjIlRbVPyeKMnwpP/b7Ta2b9/OQznkSuDifcPDwxgaGkKr1eL1SgcGBvi5
      ZmQbyd7efsY8tU8nFfUjuV+e5/X6bdu9WpOi6kMBcmJNRQD3XHXgs0SKomB8zzGcnF6J0DRZ
      Twj88Pt/hw+/++8xkVspMXIkM4dzZ07DFjyyjUYDf/SH/wE3zvwRTr/1p9xbK+r5XOoELnYV
      1t49DRXYXVKxs7Ba2hEzVKwQXRjIpFOxKE2/XVqGSWkRiMiJ+NOvTYoRov7FXSzQZCkAACAA
      SURBVCNXB8/lchgbG8PAwABXYbLZ7Koy9nFGbByRqi7Cp3LfqR/ie7VarZ5qFQcbiUdmigOQ
      pFs9iMQYgwYXj0/QgAMwir3qFWYWR0tNFAVfYF5zoV/8/3DmJ3/Bx+Dji+fRbixAUzy43uqS
      4+IYmoYGZx3FmWtWePdsgHiDEwCyGqDteQ7Z8ijm5+YSjdTee4WxjCEzt6zuiO3Ftev7PlKp
      1IouvQ5GFd9D/CE0ShS4az1fblf2VictJtmBFgmGW4u5H9TQ5ji6desmzr/3Exx8PMRiW8e0
      swuDe46jXq9Ba1xHRnIAD+cYCh5wXu190W63Ydc+xEtPpFDIAb6/Pbb2DU3ktt0HcOvKayik
      +lfhazhAKQWcnvfg+iF2FhkG0go0pXekUhgCp287uDFzArj8JkwWwH7+n2Pnnkdi20syWkln
      9zwPtm1zeJAYSTx0Wyw6RbSwsIDR0dE1Icv1EpXWKRQKkf6utbBkeFVezBTWTmgTQaFU1VAj
      CSFLfHHyKJuLoKOtsBAGBgYQZHfgvWUVux/7Mn5h734wxnDl0scIUwM4W1+G4dZwbHRlgn92
      Q8Wzv/ECHMfB33/vu7h5+TyeezSD8zeKeOlrL6x6hsh86XQabaQA9F8AY1mGH13z8ZUJFfkU
      w+06cGHeQ4gQXR8IGcMjWRW/NdQLoqs5Id6buorR8YnE8BXRUGast1OZpolOp8ORH8uyuB2Y
      TqdRq9WQz+e504gWB73L0NAQarUaV2XiGF8uedKPqRWldxwuIUnrsTVltY/UdzHFstFoYHBw
      EKqqQtM0LCwsIJ1OI5PJ9J5JDxcbERvPZrPQdZ0bSg9qZpdMmUwWv/O7/92qMuJ79+3D3NR5
      BMtdlLMMdTtE02ZQVBVjAybOnHwbc1c+wiPBHJ4ZYqhOtWBlJ2NP1SHh0mq1cPncadys+JhU
      XQxltd5J8DFkqAx7SgrGMj2pX0wBh6DAD0I4Qe+ssJS6cm9BZ9i5cArv/7iF577+LQDJoQ3i
      56LeTzDi0NBQhFmr1SqWlpZQLBa5eiLC47I6IS+EpIWRpNsTXJpKpVCtVvnnAwMDic8Sj3jN
      ZDKrii+QcKfiDwMDA6jVajBNE5ZlQaOED3HroAcQvOU4DhzH2VKeYcZYbMzT2fdPYmnqQ6TT
      BbT3vIy678HIFFEul3GoUMSpP/13+GpuAeeqISw3xK6cghvN+dhdNAgCfHjqHRhzZ/Gotoin
      dwInbjN4izZ2FRTsG1xdKSMIQjCsRlxUhcGMkT0KA/ZlPTSXL+P9178PFyp2H3oUI6Ojq3Zq
      ehZ5Tm3b5oedl8vlyI7FGEOpVEKxWOSHcdB3lmVx51U/lUeG0teKDFVVFaOj0XKWvSOvllEq
      lfj70Fh3u11YloV8Po/x8XEsLy+jWq1y6U7nzdHiJZjXMAwsLy/3dol2ux2apolutwvP82Ca
      ZqS+D3nyaMWTQ2y9xUsfFArDEPPz87hz8wb2PHKgt/hTKdyYnkK5PIgg8HHmtb/CrsYFjKUC
      OH6Id+Z9tD3gTpDFr/yb/4mrC2Kb7//or/FccBbGXakdhMBUPUDHC7HQ8nF8TEXeUHD3ZFSc
      uuXhWFFBVo/q7muNdRACbsjgh8DFrolKdgKj+x7DvkNHItcx1ouF6Xa7qFar/NR1+aD0OMxd
      fjdiLmJuWhBx6jR9vt73EYnOMiboFOjZYJSqKcOwdPSrbdv81COxL3zMggCsUqmEhmHANE24
      rgvP8/gKAsBDIvgNd7fIXC73wFZ6WA8FQYB6vY6PTr2N5pX3wVQVT2lzyApugDAMcaMV4noL
      cHY+hdEde3Hg0OHI5C7O34b9zp9gf7aDlhMie7fmf80O8YF2DKpZhNGYAcsNolWZg1G9iS+O
      3buNFYYhfljJ4Knf+re8UgQl0ui6DsuyUK1WURYC8kRK8gGs3rFWpLrM3CLjx+2QSf1O6kO3
      20W9XoeiKDyAUbYDKCRiLZ8IqacaHY1qGMYqI4pWE5H4AvJ5rVuFXNfF6VPvojlzEelsAUvV
      ZRxXF1FO9dQNkRhj2JVn2JkL4Vgf4OTFeQQHDkZUj6GRbbiw60t47d2/AYIQmgI4Wgajx7+K
      40ce54dZBEGAq+c+wCPurcgz2o6PhhOilFKQ1jYStszgZ4eQSqUQhr20xlwux72vVOFBZNq4
      gDcZPZJRJdnAlhlyPVCmTHG7COn5w8PDqFarkagEglIdx+ELMQ65iozO3UWiqaqKdDodK81p
      cciDIfoOttoC8DwP7598F79sTiPXBo4AMFK9OJwkYoxBDQNgcAdHRmgiFhcX0froDbw4zGCo
      KlQGnGmpyA+Po9FogLFe0nk6ncbQ2DguXWa43XYxYjJUrBDTbaB+zkE2z7DvoIFHR7W+fQF6
      81S1AqTYSmyPruuRNEmyAVqtFrLZLL+O7pcZd62q03H3ruVI69eWzFuWZaFUKgEABgcHechO
      qVRCKpXitirdv16wRhMrIRDR/6TzK4rCQyIsy4JhGLyMynrOFH6QKJ1O41/+7n+Li2c+wJW3
      X8OXB5pIraGRhGGID5Y8LHfPw1s+i0VnGLlMDmnmQanOYhBtmNpdTD0MMZvdiy8ODkIT4vp9
      38fy1Dk8OaGChQpqdojdRYajOsP3l3wMXnZxLeXh0IgKow8zBSHwcVNF+PRv4fDIKG+fvPji
      XA8PD8P3fTSbTW7bxen+8v8iRC7vIHSN/H3cmMn3yc+nmCox2YZg3IGBAViWxUOgySMdZ6fI
      7yH2SwPAD1ymk0ZI3xLDVA3DgO/7XFr4vr8lM8cYYygUCnjyuRcxOrETH//t/4Nnjf4hILOt
      AAM7Ujg+1kMZfnL2OprXPaRyCrQgwO4Sg+8zNFzgekvB5PNHYNwVHDQRM9NT2G1dQjEPAAyF
      1MpEvvyMiR/P+8jMODi/U8OhUQ0LVogdWSG2JQAWHQXV3CTco0dx6ODhVQWsiCFExlBVFa1W
      C4VCAZlMBpqmIQgCWJYVgT5FxlIUBZlMhlcRSTJskzQEVVU5zi9i9+SUI+p2uzBNE47jcL4T
      xyyVSvFFEvf8OOaX/9cA8NXT6XR6iSF3cV75LGDxb7FDW5E0TcPE5CRaL/46Pj7xFziYi3dg
      hSHw7mKAES1A13MxW/FRb4U4Oqnh6DYVjS7woykGc/gAhnY/gstnz6J46l0MlIdgZkzcnL6O
      Rm0ZuHMeR0vREAhioGKKoZ4BKnkNS20V/vZXMTVzC63WNYzpDiqWj4XBYzjylW/g2PAoXNeN
      LZYbB3UDwMTERCTaV94xREYmjyrp3WIcThiujkaVFwGVbSGhS58FQcD5kAQreaupr/KOIyJR
      SQ43uiZJheP5AHTMDq1o2g2SaKvp/nGkaRr2HH4Mb5z8IQ6Ei4m69zcmVfzjnIttGQ37Sgp2
      7lZgqL3QBTBAz5bQhAl3bgF77kxjB1xMfec/4Wag4EBuGUNKiGyGgbF43B4AmlkNxydUaIef
      w3OvfgNPuS7e+fnrsC68hjvtEOWj++AFUeAizlCVDUwKD6BrPM/jaKDYDwqXTqfTvPqFWKol
      LkldPqpIbE88UYjUG/qfTrikPIEktSwuikFcsOJzk1AhxTCMSBirYRjI5/PcifCwE2MMnYAh
      RLwuyxigqwzZFMOeQRX7h1WkNMYXy7VwD576+u/g9sXzCE6fwFLXwrsuUK0sQq/M4XbLx6ES
      w7VKgLYTwAvin/PKkRQ+aGnY+cQLvfyCVAoDQ8NIpdN4foRh9sw7OPPGa4n1e+KYXz6w3PM8
      NJvNSIVAYlbHcVAoFDA8PAxVVVGr1SIVJuJ0/ThEyPM8tFqtRA/xzZs3Yds28vl8BOYkZhft
      C6C3gBuNBhqNBur1euzO188Y1xzH4WXN71eF6K1Etm1hCJ1VSSkiqQwIfIaWHWK2ZWAs42I4
      i96ZAIqBiR078Zv/w/+Iiz/7CTqn38XzeYa0oqHmh7jCQiiM4fiQgp9OuZgcUPHo3SrTYRjC
      8XqLYiir4+mv/gq2T0wC6Em0x75wHG9NfYTqtkl8+7FnkTZNKIoCwzDQ6XQi5crjkBGZGWzb
      TlQVxCIJpmlC13XMzc3BNM1EKS1Kf5EJk6rMKYrCbRG5xEqcisUY4xGp9IxOp4NKpRLxbIvP
      X7UAiPllp8LDQp7n4erHZ6EZJjy/5ywaGh6F6zowzQwqS0sYQmvVfU4AdH0GFSGyGsOunIF3
      ukfwlW/9Jm5MX0P7o/+EXUUfo9YFnPrJX+PJl76J4je+idN3ZvHuwm28kAcyLMRCpzc5BR3Y
      U1DwXhNY9j2kEMBXVXh5HZrCMFfV8LVvPraKAV749X/N/yaiqtyVSgXtdpsfgSvX4SdVh3Ru
      cobG1dIHwNNmqTSjYRjcSQr0mJRsiX4k6+wiEZxpmmZEh+8Xr0YUhiGy2Swv8EbQvrhLrVoA
      6XR6y0GZ66UgCHDiR3+BfOtDaEYIAwH8ELh+LguduXBg4taSg0zTw/Y0gx+EMHQVIRjOF59A
      addhzM9chz/9IbZ/6Tfxq8d6jq1SeRg3UruwM7yGHSUFmfpbuPLxHhw69gSO/e5/j//wf/9f
      6DSXMaKFyBsM7ywpKJo6dpoWKgUdxw6k0bFCmCmGbFpB1wmhjz3Jc2xFihNaxFjlchmGYaDR
      aHDEJpVKQVVVrvrIenImk0ksvx6GK5mB5FkWc8Vd18Xy8jI/k5f6QpKZcgiofXFnIl8FIT9J
      79fP90Q7DgXT0bFd9K5yvgGAXizQVkpz3Ch9989/H8+WLiKbSvZYVtshzs70Tm5vVD1sUz2k
      X/pdPPXMswBWjD3f9/Hmd/8MbZZGeWw79Gt/i4Olnj591tqNx7723yB9N3/14vmP8NHr38cB
      tYK57Y8hX96O2Xf+AS+8kMfO0RV4OQhCfDQL7Hvx364695j0YqB/5YRWq8UXgG3bHPAolUrQ
      NA2FQiFyr23bWFhY4Axr2zZyuRyWl5dh2zZ33ImwOVG9XuftEfO32200m02MjIygXq8jn8/z
      XYfi/yk0o9FoYHx8PJIIL6pRcbuG+J0ccEfJ+rT7UagEqXEPXxloiQxzED8+1UUmzVAuq3hy
      7+rdsJxlePlQbzu1XR3XloCB8gD/PoJCtKsYnDiILzz5JJZ37cDlN/4I+zOLOKRP4dzf/3ss
      hcP42rf/NZ574UUcOngQb/zgj5C3ryP94WV8McMwNW2jmGVIaQyOB5yezYHl9sJx3FV6NMXO
      U7RmOp3mOcui8UgxNIVCgYcBNxoNdLtdDAwMwHVdDA4ORozhwcFB+L6PxcVFMMbQarWQz+e5
      br2wsMDVZlFVITWJdonl5WXUajWMjY31dse73lzqGxUHpmA3ik1K2tnoPhI6/WqE0m4gV6Ig
      P0er1YL6e7/3e//bVnRorZfqlUU82b2IES1EN6VipJSsv1a7Oq52JjD86K9j7/5Dq75vt9u4
      s1xHqOjYvXcfsrk8zO3HcH5qEcyp45FsHZq9hMt3OsiUhjEwOISF21egtu8gW2ljyQtR7Qbo
      Vn2cvuLh6k0HeuERvPTVX0Umk+HxMFTQV0RffN9Ht9uF67rwfZ/7cgiqTKfTXKpTFCipGlTN
      QVRFyOPKGINlWWCM8VgxYvputwtN0yJxOdlsFmHYiyCuVCq84gRjjNcGIn6jXIlWq8WrRRAk
      L9oI8o/YB1nyxzn9xM/pN9UTeuh3ALvTQkpluNEMkR9JZv62A9xOP4tnf/GXEmPb79yaQWnu
      x1hkYwjDL4MxhlJpAE//0r/BiTdfR+3OWzicX4a1+DZe/845PP/Lv4vQtzC5Xcf5BQ2PDWtA
      K4Xl0MTeL74CFgbYtXdfJMBLJJpcMdKT1Js4J1g6neaAh+d5/CBD2iXof2JMYiJRatP1VCFE
      VHmA3s6k6zoGBgbQ7XaxtLTEnWUAeAEuSsLJZDLcZqB3TFJzxHehforMHxdEJzM+/U27yGd6
      ATi2zUMGPgkKggDuzDmAhZjpAs9mkgf9WmcST3zta1BVFaffO4Fmo47BkW04cvRRfs3Ytglc
      CYFUcTQy4Kqq4oWXXsX1K5M4e/I/o1vYjyeffxaLt6ZgDj2Gk2+cxz+b0OAEDMHEkzD1LEbG
      tkPVNGRyBe6cjGNqERoUGUB0QtF9xWIRt27d4oGMlII4MDDAURegt6gpzEB8Dj1DhDgJCRKN
      YdplKA2RFiYl19i2jZGRkVVjTLuO7Mmlv+n54v/yYonzAlOf5OpzYXj3mNTPKlEaJqEIcgWw
      e6XFxQWUnSUoYFBUhnTMMadEjtErSjszM4Py0DB2792HQ4ej9Tkd18VsK4VUcfXkAsCuvfvg
      jz6JdO0jFPJ5PPrUF3HssScwsP0oliyGnA5MXTiNdCqNoeFhqIqCd995K7LNx3lViZJqdVK1
      tnw+D9M0e/nQd/VgQkdk5pDDYMRn0OdkTJqmiVqtFok2DYIAhUIB4+PjGB8fx+joKFeX5D7K
      /8vvFedoE6+jH1ENShon8XqeE/xZpbKwNb7z1lvYuWsXhoeHUZS25M2SoRtoGQMA7kBRAqgJ
      4sD2AAU+VxsoK0mmwcFBfPm3/1fkBNXCtm3Ua8vI5vL46NxZtJZmkZ98CYNDw9xozIwfwMmT
      15Gt2gg8B2dPvonde3aj2+lgV0K1hzgSsW5ZX9Y0jevihUIBxWKRqxyUGyASMRHZG6Rm5XK5
      Vc/VdR2lUgntdhvtdpufE01YPBm4g4ODHImp1+tctRIltbx4qS9y3+LeXS6sFXePbBt8phcA
      kaIoeOmVVziUde7sGRRLJezYsfOe2h0ol+GMHkS4cBtMVRGndjoecPJmBi/9V/+c50jLJEqb
      XD4fmcQTb/4UyuzPoGo6GhaQ2vksjj//SmSSxrdvx0JpFEe1G5huKlCNFE688zZefvkVXLt+
      nRus/bz0cVu/CJNWq1WEYcidX2S4Un5wt9vlJUOISFcn2NK2bSwvL0NVVQ5fikSptfV6Hbqu
      R3JvVVXlAXCu66LT6ayCX+PUnTh7oF/YRZz0jxsX3v6D6Aeg6sPyAG6G3vzxD8BmP0IrW8Se
      9HVsL7iw3BBNqxfKcCfcg0Nf/C0Uiz1pRVXzPM/jIeGko1OcC4WVUOW02Zlp1C7+GJ1GFU9/
      +3+OjaRdXJjHe3/yv2NOHcGr3/pXOHXyFBSFYfvEJMrlMoaHh3log6ZpkRMtiWnFuqRkqBOK
      Qx7/drvNUwqBqDSlcimMsQiCREQMZFkWLMvivgBaWO12G/m7AqDVanGHW68wcJ2XRKSFl8vl
      UCwWV0l/6leSxzeOxHtFFU00qqkcIrCSyvlALgDauu9HsV5iZk3T8P4b34OyeArK9peQKY7A
      MHQMjU4gl8vB87xIHR26F1hhQJJuxWKRpyDScTyO4+DOrRlM7twTK8kD38fF8x/hw9Mf4Fu/
      8ZuYnp6C47gYGxvDubNnMTw8jIOHDiEIAqRSvRqknU4HmqYhnU7D8zxcu3aN18ARY+ypogd9
      VqlUeIHaJHVCXlzyO5NXWExMKRaLsXZDGIZYWlqKOL+ob5SLQOVNaAFtNiatVqvh5s2bmJyc
      RLPZxOTkJIdlxaomXF18EBfAJ0XdbhezszPYuXMXAPA4GcqhBVZLJlFXtW0b3W6X70xiKY/1
      UqPRwNtv/BQ7du1BPp9HLl/ARx+dw5NfeBIZKSmEPLvZbJaXD5FPiSeVR4ytCYIAc3NzGL97
      8LZM8nvJRN/Nz89zn0GpVOp7X6PR4IdSBEHAHV4UPkFpubVaDSMjI6sQLHou9U/+n2yA999/
      H0899VQvzOXECZimiQMHDqBer2N5eRm+72NychKNRgOVSuXBsAE+DaJdZXBwCM1mk0uoWq3G
      C0YRiQfCiZ93Oh0uVePqq66Hctks8vkCPj59EoGi4Zkvvoxnn30uNvtOLgnearW4cUtEhqjY
      TyoiRe8dx7gy44k7LqkTFDovJ6jLRMY0pdeKAXS6rnNI1HGc2BglGXoVbQMRdaJyPoSWlctl
      5PP5CIK4Y8cO7nyr1+uf7wDAClpDnkpxEmVHj+h8kSMrHcdBqVS6e+Tp5iNsN6L7EnU6Hdy4
      cYPX6/R9H+12mx9WIbbVarWgKErk87iqDtSXJIlO8TT9yHEcLv3z+Ty63S63DUSisAuS/vTs
      JENYJHFOarUaFhYWMDk5yRN4DMNAq9WC53kol8uwLAs3btwA8ICgQJsl0eGTRJ7nxR4ELUod
      MWSYJoN2AFoIdEYVSZ92u82RDqB/sBqw+tCKjVAYhrh69SrXn0niDQ8PxzJ0JpPhJQhJZZKl
      q3wPEX1HsOpaC8C2bWiaxvumqmokhEJ8npiSKT+P+iELHrqG5qRcLqNcLvOCDtS+uOA0TcPR
      o0d7YMG6RvgBpQ9Pf7DmCed0NJA80IwxOI4TKQwGrLYBxPuy2SyvaUlViev1Our1Oj+WM86h
      Q8FphJRs1NlHsCKd8KNpGnRdj2DiomFLOnuj0eBIT5KkFX0K4ne6rsfCjXF9I/uAPMypVAoL
      CwuRxBgxwyzuedS/OOAjDjGKc66J19PnW3oHeOILT/bVwylwTCQaaNoyTdNMRDbkiSDXv+u6
      aDQaEYcZYeBUBVm2HahN13VRq9UiaBJJPIL1yAahNpaXl2GaJkqlElqtFizL4ti+7/u82oPI
      KITlN5vNTaW/UnhDnE5OpVZc142t8kwJOuLObBhGYqGFfgb5vdKWXgBrGaFyap44yJVKBTt3
      xjva4oxFYqxUKoVOp7Nq4RCjNJtNPvkUTy8aoaIKRUxLRjXF7vi+zxdGEARoNBqRLV5McqK2
      CGKkPpPKE3es0XqInFuysUqHUKfTaS75ZRKNXSLTNHnusRhX1M+4FqnfnNBncajSllaB1qI4
      28B1XdTrdWzfvn1Tbaqqina7vcrIEweeCrc2Go1IdQRZDRENVMdx0O12uZpAIQyEftDz6Fw3
      kTKZDNLpNI+9p8VIRWQpYYQ+X49qAyByJBT1s9vtIpPJrJL8tNjI5ioUCpFnaZqGUqkERVFw
      8+ZNzM/P89Is90v6x6lOW3oHkEmUABQMBoCX2aaJFL2T6yVRvYiT/vLz6X+5/EicRE7qixiR
      SSEImUwmEq5BC0rXdaiqysuhq6rKozIpDr/VasVWVUgix3FQr9cjMTgUApHkzGq32/xQjbgx
      dF0X4+PjUBSF20Qb8ae0220uGMrlcgQmFYULLb4tuwCmp6ewbWwb7Ltbaq1Ww9TUdTzxxBc4
      REjeVEoP3AjTxxldMkIhMnIc3h4naWmS5Do7cX0jPdw0zchZXbJaIqIs5CcgJqlUKlxa90uK
      j1MhyuUyXNddFaeUtODJ3lirTDqdHUzh09VqFaZprrIRLMvi8UvkVdZ1HblcDtVqFbVabVUA
      3yrhshX9AGHYqy9z9sMPMDQ0hNGxMVy5cgXHn3qGIzskNT3PS4zuXOsZwIpTTJQwjUYjNliM
      SC4YRQwnSrlGoxFJWEmyZ6hIFeX6rqXPx6FQhNEz1svysm07EjcjXisv3k6nAyqwHEe+76NW
      q3Fkaj28RjsyLWyyY8iHQO+aSqU46ED1QskuosVNiftJYR9bcgH4vo/K0hKGR4bhuh6AELre
      q5UjB3jRFi7WQV0PETOIsfQ0wOtZAElQntiGaAwmEaE5BIGKfVvPOxBRXD+9E/lGRD8KhVOL
      9xJqFZfgAvTgTToDmN5zPRSGIV+MQRDANE2OHi0tLUUEF8UkUVgGLSBSg8TQa5m2pAqkqipG
      7h61Q/pwp9PhRpVY9sNxHJTLZe7ZXE+JGBH6E7Ox6LN+vgcg/jR0OSlFfFY/pqFylmQIr3WW
      c5KqRtAp2QdUv1NcJPV6PWKgk9MtibmAlVpCcXkE/Ygxxo1pstdIXb1z5w5s24bruhgZGUGp
      VIr4JTqdTuTgDxnqjjxnK+4AMvm+j3q9DmAl31WcEGLIarXKvYZxxx3J0i/Ja9lqtfj2HOek
      kdsTdwR5F+mnK1M7YngznfSYdK2M2YvtkqSnnYdshTt37vCSiOL7kkdXtFkUReHSl57ZbDYj
      Fdzi+rXWO4o0PT2NXC7HQ06oKkYmk+ERsiT46EA8UtFEwQNs0R1AJNpK6W8geno5Eeny2WyW
      x6/I+QZJdexlIkybMZaoComLKS7ykZ63lspAEk6s10OppGs9VybyMVBlB1KFSPJSFQlqI0nv
      V1UVzWaTh4eTKkV6uAjVinMShitZXTIcK44PZZxRWPjS0hLS6TSHhkmg07jISUxiu1veD0Bl
      RIjEevIiWkGLQtM0ZDIZ5HI5Xmx1o6SqKofuarUaD4EghqLQaiJ5oolooa0l/RljvJ+GYfS1
      P5J2I9L1FUXB7OwsarUa72sqleLe7W63u6afgJKBgF7s/+DgIK9qpygKzpw5w/tMi6NWq+Hq
      1atYWFgAY9Hq0WJ/STVaXl4GsLJoKRFfrCpHpdzFPA55PLf0DhCGYYSB6e84J42sghBk2Ol0
      eEIJ0VoYPWWsUY1OyoH1PA/FYhGO4/DsKVkXF2ktlYC2clLpqCSJqqqRI4Pi2oxjYtoFySdA
      u+fQ0BAAcEYDsCrCVCbyR1iWFUmWp3Zu3rzJnWKkvpAaWi6X0Wq1cPPmTRw6tLr+Ujab5bt6
      JpPhkl9WsxhjPFybQlNodyekaEsvAMuyIsgFAI4U9HNOiYshm81y6UcxNUlEDOO6LmduADz8
      t9FoRBxFpCbR0bQiUYhDHFHwnqIoHIZUFAWtVgujo6NrxvbIdoBIjPUqQpAkzefzaLfbXAAw
      xnjx2rWIUjfpmeI7hmGIsbExTE9Pw7ZtTExM8IrWZOTSbi33UdM0fq4B+QcuXbqE4eHh2H6Q
      ykV5AIwxfrbYljaCb926FVE3wjDk58rGGafNZjO2NDd5aOv1OorF4qp6mMCK1Kc4nLj2aUJF
      KUXOOOqb2BdRlUlypImIThiuFKwS8xtEkhd8nIdU/F7sM6lcGzkiVzwPwDRN2LaNWq3GpXW7
      3QZjDLVajatJmqZxB12pVIoIK/JaAyshGO12Gzdv3uQ7lUg0Lr7vY35+t5mYlwAAFoVJREFU
      HowxDA4OcuN4Sy8Aikoko0ouFiVLyXa7HTkZR2Q40pPJbyBKbUoIT4IDRbSHFhF9Tm0TOkVB
      b+12m0N5QHxMvozqAD0bIJfLcYiynw0T16ZIlGBCMTrAyokyGyGxn7VaLcLQa82J2Ab5POIc
      dBTwF4fUOY6DarUKXdd5FTo68WZLq0BiOAGpDGshOOJkycxPcCMxPNWxBBCpsiC2QW0SiaHQ
      Yj9ocikYL24xxSFFccgRXUcHnosomLwryeofBaxRbFReKPMiwosbIXGhy31Yz5wAPV1fLtsi
      tp/NZrngEJ+5sLCAVCrFK1NTFTu6VrufldY+iyQPbhKCQZNBhqD8nUjk1rdtOxJGESeRxcmm
      MOa4NkmvJ3uBDqEQr5VVL7kN2urp4HNSXSzLSsTaSRKKcKRlWbxaNH0uIjv3QoqirCrEFTcn
      Yj8pmrUfMdY73ouQJQCRRUx6f61W4/BoLpeLwqBreTAfNGKMcYaTmVOWgIRTUzSkvHDkv8kg
      FtslKDUJyhSfLx8MR5IwLgguDqWKI1oAdM4WtUsqLiXIeJ4XyTswTRP5fJ4fT0SYOhHZFQQg
      3AuJxQL6zQm9/0ZULkpNpXYpdILasywL3W6XZ/j5vg9N3FL6IRwPIom6Ient4nf0O27gk0i+
      Jk7SJzGr+Ey5zaTnrJfhqM1KpYJischhQZKMjuPw2jhEFMkp7zZU0IvCuu+XjUgCifwiSbsz
      fVcoFDbFk9QmBQp2Oh1kMhnuERYX4NbieInovFxSA6rVKi8MKxqf4iT0ixsBokFg/WLU46pG
      WJYVSZKXFwTtDDJMuZFFQEFjYkVpYjwqmpVkcFI/iFk2k6C/Fok2EJVakYkqWWy0phKwMu7k
      h3AchyNKcWO55RcArfhcLgfLslCr1XhtTFJZxF1Qxrdp65Rd92EYIp/PJ9oMYpsEdVJ4M11D
      34m7yvLycqzTbS3EhjHGq6xRcBwVqqUUTJL0cpuiCncvzLceor7EhVsDveA58UTKjRKFcdAC
      p9yCpMW+pReAfIxOOp2G4zhIp9MRZowjUp8cx4kMoFhqg7yJMsMDUSa1bTviOY2zLRhj6HQ6
      yGazqww+el5SxKh43dLSEp98OoBiZGSkr/5OMVBi4atPigixocjSOODgXp4v95+SY8SFT/Au
      Y1s8JZIxhrm5ObiuC0VRePpftVqNOJ1kIne5pmkciw+CAAsLCxxaBHoRmxS8RdKVzs2lvANa
      JCSJZdRNVHPosIo4Ihh2rfeVvaGO42Bubg7btm3jGWTAijEqRq1+WkQxV+I5xsCKUbwRtY9I
      9I6LlMvluO+BPNOkCququrUXAFU/M02Th0STXtjtdnkqHTmOiBmpGpwYY85Y79hROn6TsqAI
      oaB4esKhadeg0irLy8uR3SRuSyZ0pt9uIhKpEYqioN1ux5ZrpEm/fv06RkdH+XlgYqGvOKK4
      n83g/ushyuSihZ0E066XqFK3TAR+2LaNUqnEARFeEGzzr/DZJ3KAUNViivOn8niu6/K0SKJ6
      vc7d9OKWTKesULFcsRQJYyvxPAQnUuUzwzC4nUDbrky0IAqFwqqMNSIxvh7oLbj5+Xlu7Lqu
      G1v9GOgxB4UviCUbxWspMI1CR8ge+CSI/BNyTVH6fDOLoJ+KR9WzqWL36OgoFzYaDVQQBJEK
      aVvh5EhKiPY8j3sKgRWnDqEjdHYtBbINDQ0hDEPOsBSY5vs+JiYmkM/neeKJHOBFv2UbQN5p
      ZArDkMfMUPK367p8YuV76MwtKq9C6FISxNpsNiPlU+h8A8dxIkiYeLr6J0kkkCgO6l6f1+9+
      KnBMRPFglmVBIy8hxVFQpOJWWABExWIRlmXx5A7P8yKHPZOLHOgN5NLSEocSqTI0OcnEujxi
      OqSI5Ih/09gqigLbtrlBLDPq8vIyZ+JKpcKrLxMmr+s6arUaV6EI2arVajAMg6trcagRGbhU
      tIpITPAh+jRtAcMwIguAeO5+LAgiss9kdI92bI3cwqSHOY4TQRw+zQH5pIicOxQTUywWUa1W
      IxlKVIaQ1AFVVXmKpJgrKyaeUNsiEiTCmmQDkF4vejXpO0o+JxWFjOahoSEOZaqqCsdxMDQ0
      xGt+kp1AUZpEcbo0ebnpDC/R8BUXK6ltnxaRMUy8lslkeH7A/Qi7IEqn0xwOJaJ51ZK8kzT5
      VGn3QSfGWEQFCYIA8/PzGBwcjOjdoiSiBZFKpTAwMID5+XkoigLHcSKhynHRjMRYVLOfsV6W
      E6mZ7XYbtm0jn8/zxUQGYSqVQrPZRLFYXDVp4m86EknMHU4KFmOM8YPrKIuKBBz5HdZKcrnf
      xFgvpISqyZHgtSwLhmHcN75TVZW3KXuWlbiHEORHE7VWeMCDQuTkobpAxWJxVZlwImIQ2hUp
      ElGE6eRxERcXneouGnWKomB5eRmLi4vQdR3lcnmVqskYQ7FYRC6Xw/LycuIzwnAlf5aSfkRc
      XbyedhVSbXO5HAqFQkSFo13h0yY6vlWM2aJSkPeDKMqWFpfsUFToD/Gn0WhwRMF1XW6cPehE
      aE2pVEKxWIRpmhgcHIxg8yIgIBaglT+XT4ARnU8EebZaLX6IHC2kkZERDA0NRaS+zLTACmM0
      Go1VO4sIVAwODvJK1tSe2K7cPyKy/WieN4u+3A8S322j9YPWQ4qiwDAMTE9Po1qtRpKk2MLC
      QihLPzKsCCkhO0FEJ/L5fCSw6EEj0dNr2zY6nQ4GBgY44xDyQ44wEfsXSS5DUqvVeNKGbAgD
      4DEpwEqyhpimKUpxOo1RLHsiO4rof8qoikvmkXcrQqUo5IDg0c+CvUe72b3Yn2TH0oKi919a
      WsL8/DxGRkZQLpd7ggyIbt10U6VSwcDAAHdbi6EDVLqbSlB82p7E+0GMrSRR0Ekn5CQi5qVz
      gcWwWpmoBAoxGN0PRGNs0uk0arUaFyqMMa4mUVK77Csg9YgO6aDSJKIBHoYhT/ImB15czgFV
      pKD+kDCjXfGzMn/3Qw0j2wsA9/3Q32NjY2CsVz0un8/3FkCr1eIHwxF2Pjk5icXFRT5QYsdI
      JbBtm5cS/zTRg/tFhA6J+a4i9at4RqTrOjdyyZlFhXdFIo8teVh930e32+Upep1OB91ul5dT
      kXcDSkRvNBo8sZuSSwzDwNjYGFKpFM97paNZyajM5XKRRH2ycQgi3UpE9YKotCL5HHRd57YF
      zY8GgJ8hS1KItmba7knKFQqFiEeSJBfBhg8qxTmaNkKyPyCdTqPT6UTUFEJhqEKdKIHF/5P6
      R3NRKpVQrVZ5uQ9FUfjxQiS8xAJRFM4gtk8GNHmFtyKl02moqopWq8ULdGWz2UgR4TAMVzzB
      tFJI1dE0jW8jitI72rLVasE0TV76jh5i23Zk639YiSRvq9Xi529R6mQmk+Hn+g4PD0cqsIn3
      A1HDWFangBXnDqlq5KQTs8rI8UNIlEhU/GsrOTtlItuGfAAE5pimyefBtm1ohCVns9lI0gDh
      0ZVKBaZp8uMryREjGljU4HpqxTwMRAavYRhcYruui4GBAb5b0pgDq8sjyni/GKpANXpEw5bK
      Irquy+eOiK4j5xnV0nkYhJXrujz8g8rik/HPfT2KoqBcLq86ojIMw1VH3YjIAv0PgD/kfrqw
      H1QSjWeigYEBLC8vc6kEJNf9lP0MIkMT5k+qKu3GIkPL8UjioqLI2IeFNE3j4yyWTKGKHtls
      Fgo5eGSoTHaly7/FwaXSc/V6nSMbtEs8bEQYM0ldGgPxb9LRgaj9IXpz48IbiNmpXj55qpMC
      4cT/Ke7pYSISHhQFKs4Jz4ugi+QKYdRAXGyJvANQ7Ucq1UfffdLpdZ9FklUYyh0WHV/z8/M8
      yE6+l66Rvc5AtNCv6DuoVCr81El5bmhnjksLfFjIsiyO9lEsF8HGmjjIMmohehOT1BtRysge
      VQq1pV1GxtK34oSQl5hKAlKCjOd5HAWi00wARHYFAKtUGSLxIAwA3L1P+QCWZfFD8sTYeCpp
      shXHej0kImhkC4g8rcmeQlnHJwfZZsnzvFUnIQKIHOy2lYgcbK1WiweqybVC5eK1pEbKqqU4
      J7RLp1IpeJ7H/TakSpGEI6ccCZ1+qZ8PC4mORUKFuH2VdDGw2u1+P4gCs9rtNlqt1j0trs8q
      EeORbk5eWPHgirgD7WT1RfycsV5lM9u2eeWHuIO+qfoFIUMPO/PLJAreMAzB5ufnQxokMY6E
      KMkw3izJNgV56Qhi3UoT5nkeLl26BGClSJN46owYcSqrnyQYxDkhr6+omiappb7vY2ho6KGA
      OzdK5PfixXHFQZJtgvvNkHJ7JB0B8KSUrULkWBTDlUl1ISgzboeNC8sgHJ9isPrNC6lhW0mY
      3E9ibCUnmQfD0RdJCRWfBKQpSjKKk9lKC4AxhrGxsVVndtHxPgC4g0Y0VGX0TRREtm1HapIm
      kVgZ7nNaTYRSKnGSXkygWGugN0NJbW614rwAVoWIkKOs2WzyMGwKn6BoTWC1f4AwbMYYD6Po
      p97IyR+fUzxpQHyBV5HEzyno6l4N5DiP8laMTSHvr5h2aZomL8dCAWmGYUQWAJHoSCP1if7P
      5XK8tLlsQ3xO6yNNjh/ptwhEA62f0yyJKCSVwnnF5xF+vhVJLrhL+QHyziD/LULUVNmZ1J9O
      p4NqtcprEcWVNUwqPvs5rZDS7XY5nCYOYNwWSgug2WxidnY2cvCCeA0RhQTX63Ueg0JlMGRj
      e60t/UEmEbkRozxprMUapnESnDHGqyfQ99lsFuVymccHiUQIUrPZvG+5tVuVFDG6cy3Ik6TR
      7OwsRkZGcOnSJXS7XSwvL6Pb7eLGjRvwPA+Li4uYnp7mtWrm5+cBgMdii+0rihJJ5duKJGaZ
      iTulHC9F5Rtv3bqFRqPBY6rEXGSRyIHGGONhErZto9lsolarodFofG4HrEGKYRirkt5JJUqK
      VfE8D1NTU8hms5ienuaTZNs2ZmZmeOz7/Pw811GpJo9MFCu0lfVWWeqLi59+wjDEwMAASqUS
      stksj/RsNBqoVCrceShLdKoZRCXY6WCLYrHIM9XWIpq/h5E0VVUxPDzMz05Kih0RDVZKA1xa
      WkI2m8Xo6CjOnz+PQqEA27bx8ccfY8eOHRHsWqYwDCPFZbcqhWEv+V4sbS4Gu4lEqZRUFU7M
      taYS3xTmAPRSWVOpFK/1GXeSy3oY23EcOI7Dz9J6mIgtLCyENBlUZZiyi8hrGee8oiN4gJ4U
      ojqTpmlyPZ+cMfJh1aQKDAwMbPkBp6R30bklq0I0BuIRqrKNRMeoGobBXfkLCwsol8scQRJL
      LlKba52xRafWB0HA85EfJorAoEEQ8Mwwqqkeh/pQLqoYpEVwH6VKUnti++KEbpWyi2uRWKKD
      KC7mJy4uiDB/UpPoGFUqp5jJZFCv13lqKoVei/YUFfWKI0ocj6t3+rBQrOUZN2Gyo0yE6NZL
      YnTjw2CckfFKTqy13jnue3HcLctCpVKBYRgoFArI/f/tnW1v4joQhQ95awgtVKjtl/7/P1ep
      vFUBBAHfD+wxE8eBbEu3vfE80mq7CLoosZ3xzPGZ+3tMp1OrCJXaItJWW6FcW8o0rvVH6yO1
      4Fxe7DzPrbRW2ujxfe6K1ZYylT/7qpx9hqI0+W+JLwxyFxf+zIPddIIDULN0Kcuy1oEegPU6
      kuz3e+uQLe+PtE4PCTsB3MHKI3Qs2bvmSW2D+xLyPX2s+rpUVYX5fN4a7uV5XjsjTPsZHt9j
      doxiQdZKONDn87ntd0b/f+As9nLl0MYYa4zrLmJ9z8S1kUiNia/j4Wg0wnw+/+vD1NdK8yHE
      mnEcN3p+yc0w+xWwdwAAm/qsqsoOYnZOlHAfxdWbJl55nrc6vRljGu1T5XcNcgLIsMTnSMbX
      XT4bw/N39tWQScKzwLL7PHAOc6TrBqvl0+nUmpKx84srmeC/3exalmUXbQ5ZUfZVh/sqQ7mG
      PQ/AAX84HOyqBJxb6VxbHdwNsZxA7mQJZbXhIGeTjDYNFXB2MAbOPv3Sl9Wn9ZETw9de1fd9
      5ASQC1yXJ3IfhXaRK7ySPpJs+ObbvLmpTF9mx7dPGAx+lxnrdyMdIeQ1kE9ZIp/Gxhhrkb5c
      LhsFLdklhjH/NYwxtYwR/z8W0to+wz99lKtHjP3lai0lt1wdfGrFtrSmO6mAs9bfNY0KAXn4
      X/pSXlsEaIFYFAXW63Xts7L5RtfBycM3wOnpwf3ApfvBSTMYDHqZuEhYpvelNoHzxun9/R1R
      FNlNHTfPlwpa/H0s5IQS+7uwr8Bms2mEGsYYaz8J1J8C/JlOBm9vb7VkBLNBAGyfgUvwTAJ/
      L3uCXRIiytCsjySUK6zXa4xGIywWC7u6cG/A7uNsMM0Q5trAB1C7wHme93IVuQYnPoWBfI3Q
      QKwNNsp4fn5GkiRWJSrpovmR3dnla6GEoz5siyQ2SpO9Z2utZP6s5GVZWmWn72nBv+M4RlEU
      di/x8PAQ5OAnXbJmvpCSiw4l4wxZmFni+7sMYukmx8+FfE8ATyV4MDg1aaP4Cjj3mU3TFE9P
      T5jNZt72SLwJRVEE40DclUtZFjfLxkHKPmOuaFDu04DuYYoU43F/EWr6k0S+lYkXeDwe14Rx
      fK98lLufp5xaB38dWkMCzScnpQnGGMxmM2unvtlsvIpZWbwsigKTyaTTSs6nMhtHs2N6yNjp
      Lx+jUoHoFsJ44KIsy5rJEwDrPx9yTHkJysZd0jS1jQhlKx+ZLq6qyt4PHnWk1qfr9ZYSF+VE
      BDRjT9krgIcuqPen5qSt1B6CyvOz8IiorzDIMxQ0t2UDP75XFg+ZfaNGSPk81hy3LQ3KljIU
      UfE93DQTmb5T/LDb5G63q2XHsiyrdeEE6nG+e194LiDEE1y3JmpbtflalmUoigKj0QhVVWE8
      HnsvPEVZekPa4cKxWq2wWCxQVRVWq5V9MrgNNYgxp1aotPZmd5g+5+f/FTYN6hPByYnBjpBt
      ZXN2HdQJ0A6rqa+vrxiPxzbOl72DZTWe92KxWGA4HNbMC+gRpHyNSIYuPG9KeAOWyyU+Pj68
      qTzqUDTt2Z0sy5CmKYqiaKziMtyRC9Jms7HvzfNcB/+NiGSzNteinDqhw+GAl5cXzGYzu/GS
      wrZQK7yfReqrfOGnW9UdDodI09Q6Sqvv/+2I5BnS7XZbyyyw+hvHMZIkwXQ6RVVVVp3IY3SX
      ZBFKEy4cbRkztyjGwiIl0vqkvR12D9CG9LOJ4xiTyQR5nmO5XHp1LUo3fM1AXLk0XyOyv61y
      G2pLie+RLK0ypH78eDzam6gT4O+Rha1rsCrftw46v4FagwygedDicDhYc1eZGXp8fNSK4heg
      FHm/37caC1B/5dNdKbfBTgApX5aV4aIocHd3h+PxiP1+b/cEmvL8Ovf39yjL0io8OSkkeo2/
      F2uNKBtfSJktcLoJUvcTiqvbv0D3UT+LtUaUcb4vO8FQSG/UbdHr+bN45dC+bESbvbmi/J+J
      uq5AIdrmKf2nVk9vszXR6qPSV7xHIqVrQJqmGvsrvaWhqEqSxGr9ddArfacRAoViW6gowB8p
      BA+yUPymKKGQALDNll27DUXpOxFwEmbRn15RQiICTlXeUPvEKmGTALBeMbr5VUIjAvyHMxQl
      BKKu3UEUpY9EamWohExnMZyi9BFN+itBE/Wx8ZmidEWfAErQRGqxp4SMjn7l26DlSxRFv9bL
      VEMg5dswxmC73f7qBtvJbrf76e+g9JgkSXA8HrFer3/6q3j5D5uvPxEndyxPAAAAAElFTkSu
      QmCC
    </thumbnail>
    <thumbnail height='139' name='Increase Mortality2000-2016' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Increase in mortality1980-2000' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Mortality decrease 2000-2016' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Mortality increase 1960-80' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Story 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='mortality 1960' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy993NcWXbn+bnvvXzpgUyYhHcE6A3oWWSxfHdVdattqVumFTOhkVYjxXas
      VjMROxO7io3o/QM2Ykc7uxMx0o5Mq9VG3dWmqk15y2LRgBaE995mAukzn7n7QyKTiSRAAixW
      Fadb3wgGkpnPXHPuucdfEYlEpK7rbAdzs1Mk4jFa2nYycONt3GKFuqCKECCLrhsPezBtlR2V
      MYSAlQSUe0AIEGvXSHKfVxKSWFrgrz9FTW194RlSSlKpFFIWP/n2b0KIwm9CiLteI4TAtm2E
      EBteW3pP6XcAiqIghEBRFJxO55bGa7swTZNMJoOiKECuX6Zpous6UkoURcEwjHVj4vF47tqn
      Twt3m5vN8Narv6DemSVqOTjgi+FQYDYpKHNIEg2nqG9ue2Dt03Rdx+Px3PWi0k60tLZjGAYu
      lwtPsJXF7n+k2alxRx9XFMYj1YiVZfbUm4QEkLr98+SSRdArcOkKo9Mh2o98kabmtsLEA9i2
      TTabxbKsAuEWE7OiKHcshGICLr6+lIiLry1dYPnvS5+bJ3y3272unQ8S8XgcRVHQNA3Lsgpt
      VhQFXddJJpOFfgPk5/BhXACZdJqXf/oipx59jMbGpi3d09TaTiS8TPzqS/jWbmkFltNgVB/B
      7XYD21tUm0G71wXxeIwbl17H7fFz6PhTqKpa+AdQWRViVm/iyqyCYizREUrhd+cIY2etjU+f
      5+Kom521BpqqFBETjMwrzKabaG1p5PSzT+P1+u54f57T5YmtmGCLib8YxZzzbsRfjM04fvH/
      i6/5uIi/GKZpFtomhMCyLDRNw+/3Y5omqVQKXddxu90PJfEDOF0unv/Clwv0shUcOnyEaDTK
      u3OjQHfh+5UMuH1lvP36q3hcOifPPvmR+33PWZyZmSGYvUQg8TofnnuTeDy27veamlrOfv7f
      IvUqDMMga+QIx7Yllg1LZj1Nux5hcVViWrIgIgkBFT7wOAw0YeLxeAvPzIs9KysrJBIJpJRI
      KbFtG9u2C9fkP5dCSollWeuIuFjsKf1+o2eVXltK/IZhbPr+jwIpJS6X644dDHK7YX48XC4X
      5eXleL1eVFUtjNFGouKnDa/Xi8vl2tY9ZWVldJ5+kqthB7Hs2nwLlXgshj74KiOX3+TauTc+
      cn/Vv/zLv/yWw+EAci9Jp9MFGRegoqKSwTkFmZxESw0xMhkmVN9OLBolEl7G7y8jnU4THv4V
      R1oyeJy5+7oGDfoWynEH2jASs4zHGxiYlrRWJlCV3OQ6HRKBQdO+zxIIVBTEmlQqtU7uLyaG
      /Oc899+IE28k3pR+t5VdoPid+X+qquJwONB1/WPjunmRr3Ry8+Nj2zZOp7Owm9m2jZSSbDa7
      bu7+e4e/PIiv/QTjspql2UlMKRhLaBxSxhFmGhGdxQy2EghW3Pc7CiKQlJKhgV4WBn4JrlrO
      fOYbhUlvat7ByOXzHGsxSaR7uHbBi+4qw7HyLonYC3TsPgSBw0RT71OWE89wuxwsxMvZ6bqM
      uxwWoiqyAnTtNtEEvApOLcv47AgtrR2k02kymUxB7i1VWosJYiPiLsZmRLDZgtlMgS6+BsDt
      dhdk8+1s69uFpmlks9nCu/Jt0bTclJmmSZ5x5cdhu1z2YYeiKAQrKgicOsvq7gMYhkHs1X/C
      rQmOhASGFaPrxoe0tLXf/zvyH6anJujrehmnmiG1OkUmkylcNNjbhVAcDMwq6JrASkyjOz3U
      lhmIqe9y43oXJ848R++sF8uSLK5KYnaIkC+F2ylJZyW15RZ1AeuOBqwkBRW1HViWRTKZxDTN
      DUWLPJcD7kr4eXGmWBzIL6T878WEneeoG3Hb/N/i92iahqIoHxvxCyHQdb1A6E6ns0DoAD6f
      r7BT5/uU35l+XSGEIBAMYktJVXYapwoZC2aSKtVrFsP7FYU0gMXFBcrKAxw8/dsM9l5FK3et
      4yZnn/oihmGQSibovfwjyrV5qutauPiGl0d3JlhKplFVlc4n/pjBoesEm5roPFDBUN8VLk6N
      4syOc6Rdw7JBXVtytpSYFswnAhyvb7jDwpPvVOl3pbLxRh3faMfYbLFspGBvds9WzagfFaqq
      4nK5UFWVbDZLNpstvD9vCUqn02SzWZxO50OrAD9ozI4PETMcXAmcwe3xEWrdTW19A+++/RZV
      VRXsO9C57WdqUkr6+3pZmp+iXu/jVJ3F1aVdhQvS6TS6rqPrOh9+8Daq3oaRUmh06jTvPs2H
      k6OUV5tMTU3Q0NBEVeg5AJaXl7CzUaqajqHNTzI6Z2LZ0FGf42zjiwpL6kkOnH6ksNg8Hg/J
      ZPKeNv+8+TOP/P83E5eAOxZQ/vO95OXiRaEoCtFoFK/XixACh8PxsRFfvh+maaKqKrZtF97n
      cDhIpVIkk8mCTvKbgNrGNhrb/oKq6hBSyoKv5NHHHr/vedAMw+DEyUcY6O/Bs3iLcFxSVnVb
      prradZ6Kimp27z3Awc5j6LoTn+8zaJpGMPgUsfAUvugr9F3ZSUPDH/HeGz+hpeMQqWSSWq4y
      NDxJJuMnGo3w+eM6GUPidAgsqXHo2KNUVlYBOUJzOBz4fL6CpcPpdJJOp4H1BLyRKbNYJt/O
      dpg3L5YuhI30jbwZUkpZEFE+TuRFLcMwAAr9M02zsOB/nUWfUtTW58Qdy7K4ce41koMXEI2H
      OPWZL9234q/c6HoXy7LYf6CTVNVXiFd+nYNHTt9+aV0jN7vewrIsQqFaAoFgYfIVReHY41/D
      s/MPOXjqt5BS4nNrTI/dom3HTsYjPg7Wh6nyJnnyoE44Dj+76ucXV8AMni0Qfx6maWJZVsHJ
      lM1m15kAi2X1vKKcb0e+TaVWmzw2WxTFIlDp7pAXkYq/tyxrnZL+cSK/6CDXx/xO6XK58Pl8
      hZ3o1wXF852HlJJkMrnu/73XLhEcfY2jvmWMqZsfyRSq/sW/+1++1dDQiBCCmtpGQjV16+Tu
      8vIgLm+QYEXlHYOdSia4fulNVNVBXUMTuq5TXbeD8mAtNz74Z9rK5wl4BTUBcOng0aGtKoNl
      QXnTGSoqKxHiNvGpqkosFisMRLEyvJEOUPpb8eeNFODNiOVuZtGNxKn8TvBx7wJCCDRNwzCM
      dQsgvwtqmvapLwApJasrEYZ7rlNeWX3fY5Kfb1VV1/Xp5pVLLC0tUFvfAEAiHmfmtb+mw5dl
      PAZDUUE6laKyrgXtPkRB9Y//hz/+VmVlFbZtFxo/PT3JcP916hpaEULgdntJpZI4nU6SySTR
      6CrZbJaF+Rm8kZfxW73c7JsiZblYWVnhtV+8yLG6MQLeUiUyZwYNeKGnt5/Kxk7c7vVhGPk2
      2LZdCH/I3XsnZy+16Rd/X6wnbKYPlH7e7Lr8LpEX0fLE/0nY2/MLsFTW/7gV8a0iurrKwEv/
      Lw1LHzIUNqlr23Nf7cozwNJ7/YEgdWsMWghBJBLGHnyboBMCTsFuv8FsOMp8xsHswHUmh/tR
      HU58ZYEttUOrCAb54M0X2X/0aapDITKZDKNXXgQhyWZPo+s6I0M99F59i2Nnv8RAXze+9FVs
      VDoe+WMmtBM0colG1zCO+RHmohqaVkv/YhUePYtTyeLQBEtGHcJYoda7iqoIvLXHCG7gwHA4
      HJimWXDq5LGZR7bUNFoct7ORI22722Vp6IWiKB+7D6AYOQbk/kTetVWk02mklBhGlpuvfY82
      uYDLsT4Q8kEgP1d5Q8CvfvrPaIlFDpW4O4xklLLel9jhM5DA6OwV1Gf/lFBRUOVm0BJzlzhS
      dZPr7w+x2P4U+zrP4Cyrx5e5zuLCDD5/kEAwxPTMLPa5V6lyLuDzWjRVmgyOj3H87Jfp7+3A
      ME202e9T7rZpbqrn7NNfxLJsEvE4qVSSffUNSCm50fUODqefRw8c2XSF5pXfPNfNcz/Lsgr2
      7424fvH/ixXijXaJ4kEuvrf4eaXPzGazmKZ5z+DBB42HgdPnsbiwwLlf/ojy7AJlSooj3hRL
      NvQ4D9LR+egDa+vc3BwzY4NcuHCBIydO41FtxPQNjgWieIqCl4WAk1XGunt3Kyt895/+hq/+
      0Z8TCATu+h6toULiSAqOt6WZXHyF2ZlW0oZCR8Cmt+ufSGQEp5//Jr//R/+B6+d/RmeNgSLA
      oQmysRSKotDS1o7X6+XtiffZ7Z9jIRHHsiwcDj3nwLAtrl1+HyltOvYcwe32FmT/jaAoCoFA
      4A77fz4EIZ1OF6xDm6FUTLrbdZv5CDZ6RvHi+02ClJKR/h5G3/0hx5wRqstsMpbglllHxekv
      cmLnngeyK1qWRSS8zC9/9B3OOsc5oQtWri5R6zNorzBRxb3n1LChXVtmamyYwOFjd31fITBB
      SmgIWnRd/B5ZJciilHQ2xhmalSSScbxeP1nbTU/0EEr8FgebLJAmoyODLI5+yN6TX0bRvPhc
      UJu+xS9f/BvqG1swbQ09doH68hSKEPS9d47Q7i/R2nHgrg3bjDAVRcHtdmOaJqZprhuMYp2h
      OFbobgO2mdxfLF6VwjTNh0IB/SQxOzPF8rt/z9nyXKzYcFwn2nCGg48+i9d3ZxTv3bC0tITb
      7VoX/SulZHR4kKXud1GWhvlyIIFHEzQLWBdDD9zOJtkYugrjcUGt23vX6wC0REYSnpMML3lo
      CJr4lEV2NUSwbIEtcyENi1fOUVUV4vNf+QPmZmeYv3KTsQWbhj07mer5FfurZ+i9Wo6dXUUI
      qA0IqsumgClsG/RaQT7qYld1nN6J3nsugHuhWAEtFVXuRryl2AoRF+sO+dicWCyG3+//tV8E
      UkoG+/sYfOv7nC5LIxGcX/bQ8bk/YW9L2331f7C/jz379uNdo89EIkFf93XcPT/hoCeDUgb3
      InK4u07XWeeiouLeQXJaxncSve0Qle4pVhavsrM6Q/dsEMXfjmWkaDl4Am9ZEMcaxwvV1DIb
      ehZFc1BTW8dkT44QU7EFnMGdhGMLVPgVQKKpAkp2xawpEY7ye25j9+q42+3Gtu2Ckyj//Ub2
      +7u9J+9f2Mh8V6pf5K/3er0PZdjxx4Xrlz/kMV8Yr0MwHBUETr5AU+uO+37e6UfPFj5blsVP
      XvwhNctd7K8T3Isk8g7A/OeNQtkjWYHY8yyVVdX3bItWV9+IoiiMXf8pDcEMi/rjnHjuGXSn
      c0MiVVWVoyefLMTcn3jmD+m+dpHW/U1UVFbT31PO2Hw/WQNC+iSmLZA4SKt1YIQxbQd7T3d+
      ZM6Zj5cxDKNg6y/m/FvdBTZLkClFsQMumUxSVlb2kdp/Pyie+E8Kpmlirs6jB+DcLETrT/GF
      ziMP7PmLC/PEJnv56o57Ez+sD/zLO0aLGdVoxs+g1k6HL7glJqtBzupy6vlvkk6nqau7bTq6
      283xeByn04nH42XvwWPMzkzjdns4fuox4DEMw2B1dWUteyyXxWQYBqqqPjAH0kZ2/mKzZfF3
      +f6Uiktb3YmKB/7jygXeShs+aYyPjREyZkkYYJQ18rkvfvWBOgC9Xi87aitQlel7XlvqkS/+
      3rZtFtMKsvMr+CdHGf/wF+zYte+ec6XF43HcbveGNnkpJeHwMi6nq6DoTI4PMdjTxZWr13jq
      medo7TjI9Tf+ivZQhg9uaCREA8+/8KdomkY8GiEaWaB9z2FM0ySRiBdiaVwu90cmpDxR5mN5
      7pahtZlHeDs6gGVZeDye35gFsLS4wNjb32NXuaRrUbDr859DfwB9zyc9ra6sYKQTZBUnpi3R
      lLv3byNxJ/+8lazCdddhIu+9zq7Dp9DKQjgcDqLRKE6n844EppwHewVt5NY7iANPUF0duuNl
      c7PTDJ//rwhPA6ef+xMMw2DsxsscrJpn91kYD/czNuLicEsWXVOo9NtcHl0E4NbVd3CvvI6Z
      sBlU3BjhbmRihL55L/vqs5jCS1njafYdeuS+JzbvH8jnzsK9Q6Hv5135cITiRfSbgFg0yvTC
      MifbIOtvYOeu3fccv+GhQSorKgmsKaB55pS/b6DnJlNX38ZjRCgzI3g1yVOuexN/HhuJtWNp
      N4m2Z/BkJGJpmNqRl+he0XlzuodgZpaMcJFyVXHgiS9RU1sLQH/3dVYv/hAtbTi49Npfs+/M
      N6ivb0DTNGzbZnxshP5LL5JOpAk6cy7qZDKBq2IPmjKPqUg8NUdIprOoax76WMqmvOUJZmen
      cYTfpKrcZijagXfs5xxqSqMEYHIxQqVHECpPMTDxEssNHVRtQVnZDHlzZKkCDLeJPW+7LxaZ
      iv8VB8NtFFKdz77yeDy/MdGXUkqGrrzHroDkn0ccPPONF+4Zdm3bNpd/9rfU7T3OY89/ldmZ
      Gaqqqwv6WCQcJjo1wCl1CO0BRXDPJeFiooKG6SGaEn00VkoUIVDKU6RT/TT5JLDKWCLMxGA3
      +tpukEomaHbE0PbXx1HL4/z0lR+yo85F477n6b11jcbmdvbXrrAQFQR2ncUwDM6/+rdIRyU7
      6sHrFCzPDhCo2UXGUJhctAkbNZx+7hg9196nzWuyGIWsdHG8Ll3IA64OOBhaqWU0KhkcnaP2
      WPYjWYRKCbaY6PMofnZpQkt+cjbSDYq9yPlMtU8iDPphwOhQP4HFqxyoEix5mmloarnnPVfO
      v4uwDezFEcZGhkilMwz29fDYU8+QzWZ58Xvf5vTZx4nNv0vwAUiRUsLwiuTpimkqBCh+yJtP
      q91QHJzR6jUIj73E8ODbZIWOnUngD0gUVRU4VMEXDoY5UjfDcNf3cKWuM95/kdWURku1IBqZ
      R9d1qup30lnZh64JFEXQpN/CsixG5yzS3mN85oW/wOv1koqM4HYKTMsmmzXXafdZE1r2P40Q
      Cp8/kmXo/N8wNzdz34OwWQzQRibQzbLN8teVBtvlP28UpPXrDCkl4cgKQSfEDGg/9vg9ub9l
      WSTHr/OlpiynXZNMdb3O7j176b5ygfHREX7w//1njhw7gaI5mMx4se5ioNvMeldq/RICHq0X
      VLlgKxJUhRMO+mIc8y5zoiKNQxE575QQ4HbmiPpMR4pHdtr4tBWiaQ2PUyEemQLg8KnnmXU8
      xcpaeLZAUlUVYmAxwI49JwoEZRq5MIUytyCVCJM1i+RxO0tq8O84GJqgwq9ysCnN8LWfr5Pj
      t4tSIt/MKpT/XJofnBePShdSHoZhfCLhzw8LlhcXmL/2Bk1+gZSgOu5dOTARj+NJzt5mdq5y
      hntv0ljhZW56Es1KUTPwz8Su/wr/6W9wK6xwNyt16Tzmv3vQUDJZuWFD6v2rlLvWEuOT41iW
      ha7rnDjzHGOJdiJxyaLoJLw8R3tVlJmJwdsNFDluUeZRCLnCTCzdJtBHdit01Cm49bWgNQFz
      MxMMD/UzNNi37U7mKyYUizTFnKKYmxeHR+S5+51c5fZzincIwzDWmd5+nRGPx3Cnl1jJ5MIK
      4qsr97xnariHej0XsrCUAuGrxr78HdxWDMfwGxzzhqlySg6pk6xc+hE3oy5mkhs/q3QnzuNj
      WQBpY+MfmqoEbTW5Brj19R7Xg498hWXP8xw+82Uy8xc41ALmwtuFmkK+6j1cGPWRNqC2PEMk
      Zm24oiG3++ysyZAc/h6Jgb9nsL9nWx11u934/X4cDscdfoFST26pCFT8tzR/IP9P1/WC4rtR
      xtJGyJtMPwmYpsniwgKGYdwzQHCraGpuJRw6wY/HHIDEGL+MaW5CKMDE2Aha98+oXAtTTpgg
      zTRlqkmN22bauYNxM0DWzs3JbkcYl8eH9yHYUNX/7c9f+FYqOk8yCy7HJsWhpMF8uprqUC1C
      CFxuD7UNraysREhNv0GlXyCkxapop7KyCkuqzI124VAMHCrsbVJRlM05boVfpdInuT5qMzI2
      jaLqBIJVWxI5hBCF+HxFUQqi1Eayfen3xSjVCfLtLDa1qqq6pYJYn4THdnl5mZ6eW7z1xi95
      881XGezvpufmJXSnh4qKqo/0bkVRaGppYXhsEr8RxpmJMLCYprlj74Z9v37xAxqS/bjWDGQB
      J0waPlYtnUOOOertOeKpLH5d4lJzC+T8socOTxL/9uoyP3Co//pP/sO3RiNlpPQ9jM+s0hi4
      k4u4dYgv9TM6m6a6phl1jTATiTjx6fNU+AVel2B4Ikx922G8Xg/hxQk8IkIooOBQ1w/afMRm
      NQk+13r3d3OVYGRqhV1lA9wcs2hu7diS8pnJZEilUuvEoVKiLxZ94M4FUGwKLRaDNE1D1/VC
      gvpWokBLxbAHCSlzZSNffeWXvPvmr2iqjKGqKgF3Epcawyv7GZ9J0Ny65yO9x+l0sufAIaLe
      ZqL+HejeMlKJGLYt8ZTWcFV1okOXCOq3dat5RwPC6aPenEVXBXUeWVggkYxkJK5S4xFUOT9d
      sVL9sz944lv+zDVIjNAYSONxbrADCHBpNlpmnJ7RVZp37CebzWLbFguTPVT7cqLPTMxP887j
      OBw69a2HSGjtjM5Z9I/HiWZ9xJMZRsPlROMpJo2DCGOJYFHEqmVDTUChwq8yOzVKVqmkKnTv
      rJ54PF7YXTZzVBUT/lY9wnlRJpvNFnJyP82ygwvzc3x4/n3eevN1Zsa7OdCus6vZQV2FxEpn
      SKYs5ldUGtqOkslk8fn9H6m9mqZRFaqhsbmF+oYmBq6cY/Lyq2gVTXjWapICTE+ME1jowrO2
      YdvAqHc/vqVb1Oh3MlSfA+ajGVp8Jn59+xG8DxLq//Hvf/tbAW2RUHmOixfDtMCSAk0V9Exa
      9IZ30NCym1BtA5fP/ZLw5GXKW55gZHwexU4SSbsxpJvK6hqEEASDFdjCTWTqMhnDwlHzGPUd
      Z5hcFjz6+GeIZMohPoxnzSasCHDrOQ68uApprYmme9SCl1IWqkkU1zgt/lvK9TcTxTbzHiuK
      gs/n+9SI37ZthgYH+O53v8Ot7mvsqE3y1HEPB3boVJSrdHfHOFZmUSYsLo1liI4PMdF9ETxB
      KqtDWw74W4mESSbiuNx3lloXQlDTtIOhqQVil3/MbO9lRqfmqW3ZQTwWY2G0l5BuIAQoQjBi
      VuJJL1HtyIBYH9wshKDOK0iZgjL99ncbWe8+bqhf+caff2shHSIWmaPSf5t7prKSm3PVLKTr
      wFimoUKwuJLm2GMvMDc7TWrqFXZWLDIdUaltf4y3Pujm2f1R+keXMPCwEl6goqqGlZUIvtRF
      DjTZxMIzVO84S21dA1e6LnLk2BkuXR+hzhdFU9fb3926ZCqssmP34bsOhBC5TLF8tlhuZ7Lv
      8PBuxO03EpVKF4uiKPj9/k/NA5xMJnn3nbe5dvVDqr0L7G7WWFrK4HQI6qpzC352MsWuSpWF
      uI3XtPlSq01HmcWVG7dYHb3O3OwcwfoW7nUQygc//C/M33iH2v2n0TSNSCQC5PK0pZQkEgka
      W3YQGzjP0bIoDcYkl/onqdt5CMMbQsx1414bpmnvboxshjm7jPEVg5DTQCviHw5FUqZvHHIO
      n1zck9bkmWYyGiXu2MXEUi/RtEbWdpFQGrGzK6wuTlN+7CssJ1fZdaIRXdcpDwQY0XbRN30d
      y5NEdThpr3MghIWSnWN68DxqdpaWHXsR5Agxa0r6p0xcLbNU1TRw9rGnsC0L3d/AewMRntiT
      xKHe7njPXBlHn/7ClgYiz+E2qiu6nYHML4a8t1jTtE81/EFKyUs/+wk3rnfR1FhLa4uK1yVY
      iVrMTSS5EDNIGbDDZSNQmVi2eapRQ9NU3MLiC60SmMdYnafnp6Ps/NyfrKuk3HPrFl6Pi+qa
      OjweD2X1HXiCIUBypesygx++yuNf/UOGZyeYnZtFm7lGzN/GDtVCypxofMzuY+y1CZwnfp8h
      s5qTzlwsWPnqII79T5Ps+jEx4eJKJsBp9/Rdxc7SXeCTgPq//88vfGtleZq2zq/iDJ2gac/T
      tB94kmQ8yux4NyFvAqH5aWw7RGtbB6qq4nS6mJseIx1fwF19lHQySp2jH68zpzBr9iq6QyVs
      VNN75VU6GxNICWF2cuz0Z3G7PTgcOpHwAouTN7GcDSxHbWp8cZQ1l15deYahwSG81XvR9XvX
      v0yn04WKcptde69n5D2+brcbr9f7sZ4CsxX09fYwNjZGNpNiZXkOTQUpFc50evH4HdiRNKdC
      UO3Lyc/TqzaVTgWXtp6QVAEhEWOwt5ukq4pARRVCCFLJOGM//3+ITg0SbO+kZdcBsrZg4Of/
      FXPkQzLZLNMTI+xfPUdNepx6ZwYlPs+uMqtgvFCEoMJhMjXUQ7Uap3yNq6eyFtN2gE67n4BI
      0hN1sdObRN3ECJFnMvc73vcrMmkAiYzKUF8XTt1JcqkXzaFTv+dZmkIODjWapI0uIoPX+GDg
      IEIopFIJypnkUIfFD86/w8kdaaqqAARBnyDog6tjEEDikTOAiqYKKrVpEok4ZWW5jLChm2/T
      4R/mytJuYo465iKzNFblBkJTBXuqlxl8/6/I+jo59fjm5e9s2y5Usy4diGL7fp7DlMYJ5XWC
      vJy/kRPm00DbjnaSyQQTIzc4ttfJoQ43lYGcptna4OTtiRSqcrsvp9s0PhgyOFOjoqul3BX2
      6suMvf833Fx5gc5Tj+H1+XFrEE2kCC8vM9z7Fp7Rt+gszyKqwLQtJJPrnrU7sDGH3l+eWSfn
      h9VK9hzoZP61N3EqYMQjJIOC8g1igDaal+3ifudLQ8DJtjhSXsCyJVqzwLQk5y58F13kiMrl
      ENQFbGrl9ZxsHVgLOLOg0mvhdkhKqzzsqctysfddjjTdFh+qvXGmx4coO5jL1Pf4q5mJpnjm
      ua+iqRq33hkBbp9Aoyiwuy7DavIi596SnHrstzaUY/ODV+oRLi2iWzxYpQOWr/v/MEFVVQb6
      b9IYUji210OZd70oJhSFnM1l7XohsSyJKiCSgTI9x/0L1wto89t09b2DcfQRFmenWUnbnPj6
      vyWyskr12Ku0lOWiKQEc25D8ikdzOQ2+g08y0fUmx30SBBwPQWYT+t7MSfpJoFAVQogc14Xc
      3x1VKSJxm+KkXiFKTYfwxD6jMGDFcOlwpmWGjJmL2jMswUy6iUMde9fuFRx+5EwGycEAACAA
      SURBVDmkzBWa7eu+TLUnXqiELKXEMCUOTVDmltSkLvDOT/p45HPfxO9fn45YXER2s1LnG8UI
      FQZhzdZ/N+QrThQvqPz7tmpl2Q6klHx4/h0O1I0xrWjrDhbJo6LCwUoqS+XawoimIeBQUBXB
      bErlw4iHw+Upal3rAxI1RSWbzdDQsoNoIMCtX/w3UlmLM34KUbv3g4EVwUzWScJdR0c2QX2s
      F7HmHe4oezjDSLQ8GRQTHuRCIZqqNmYBxYFjmw2YEIJkRnJz5RAiPYHuq+XUk19bVwoxL/ct
      LS2Qnvw5jaHbXljLsrgw4mNnKE5NQFBXAeOrYsPyY6Vx/Zu1Z6PPeUX3bgRs2zYvv/Rjamtq
      OHz0BKsrq6RSSXpvXcflSHPgyDNUVd9/TsNGMAyDa10f0tmWxeVUmFkyqSxXKffdnpN01saj
      3+5zmQtWTIlQFHaVWaxoHpb3fJ65mV7k4iAVSopVxY/n6HNcffkfiOGmJhujMxCBBxCeHHTB
      sOkFhwv15k9peEiJvhiFPT8fu5JPMbwbNtPW81z31oRBXVDFliqr0SjhqIfnj59ddxBe/p2K
      orC6sopHSyOEUliEiQy07n+ahGGwmvglpq0Qan8c/wbJ6HmLTf4giXshz8l1XS+ctXU3XLp0
      kemRixgRlYWFaWT8FuHVLJ854QZsblwRPP7Mbz9QEWpqcoyTu9OMzxg8e7qMWMLmxlCGs51u
      QNA3brGaDXE9GuFEKFE4eETXBfGspMypcso7z6Xhy5z+2p/l0gbDyzhTSZbf/w5HnRHCGYnT
      A1spQbIVVLskzzmXMO0lHBs4VO+FT8r2X4zCjBWfNHiv/NrNFki+8S0hjXe7s7gqOgg6I7h8
      KUxjfehfLBbj8jvfz1X6slJ0BGFkzkJ3aDRUSJyaZHF2kBOPf53zr15DagGefPzUpu/1eDx3
      HB69GfJ2/a0Ots/rZe/hz3Lzypvscl/nzBEXUubvV6lN3GJs7AgdHbvu+aytQErJla6L7AuB
      25kTaQJ+lZP7cjVCV+MWpu9RvvTsZxjo62Hs2t/SHrRBCGxL4lRs8tPnDoRQVZWF+TnqGxq5
      9PYr7HFEUBWodj94YlOEQL9Pq/GnYXhYtwNstQF5jrnZIvG5BM8e0bm65ESkDU7vS7Ew/X26
      E2H2HX4sV4Zl6Ca7yoZyk2bnPMCxNEzNeajyx3A6BG3ufrrO/YzjT/8bUqkkirL5yOb1gI1O
      V4TbYpLb7d52gksgGOC9d99gb4vKyf2OdbqQlJLZiJMjByu3/Ly7QUpJX+8tGryDWJZNY81t
      3cS5FjYwtWhz6PEzCCEYuvoOnU4rZ4SQEhtB2gRNkShI7PAEszPTXPvRf6Yr2EJt217Gkw52
      l20e3fmbhHV7f57754lpM9GgWKHc6LqlqKRn1kfbvrO4HGv5uFjExl9joL8XgJYd+xjNHiPi
      /wLp2j+gP7aXjlp49kAcpyM30QGvpIarLMxNEgrV3LMzeY/lRu2F26LPdjlNQ0MTv/O7/4rZ
      VS+iSAkxLUn3ZBU7j/wOFZUPZgFEIstM9f6Y5hrJ3LJBMn1nf3SHA8PIcuvGFQ45h6n23rZq
      tVQKFlO3Y50axRKT196j4cxXaLcnaBz7Kc2efyH+PE2ssy0U22M3s4WXikfF4tDonMnIokbz
      wS/TefIAt7pvkkhZLMZUVsueB3uEiVuv0NTcii0llQ372b17D4qi0Nq2iw/efJHDlTcAuDgk
      2FkHNQHB9ZEu2nfuu2endF0nlUqt62Cp8nu/26xpWbR2HOf6zCIVWj9Jw4/0HePkM489EE+x
      lJKB/j7OnXuHbHQVMytoCOnUVd7WK2xbMjitkPU8ytT4KKL3+1SX385nANBUBZPb4di1LpOy
      +EW6p67SFjALoQoPIz6qDlCa1Xc35N+jjc6bNDslLj1H/JG4zXJM0hYSBa9s8QuKY2VKX1Rb
      oTK8WsPho6cQQnD8xCkGy8sw7BR1lY0kgjUcqq3F6/XS3zeO7rg9uQ5dp23faQau3qCjVlJR
      7uFWpInaaB9bFSoVRcHpdG7oFMsryvdb0ycUChEKfRbTNJmbm6XR76e8/O6lt7eD4eEhfvHy
      D3j8oEHQ7+H6QJz6Kgfnb6Z48pgHKWFwxkVlxwskEhn63/4Oz+/I3kEwLRUa1xJZVjOSoBsM
      W+JU4Vjlw8/1P6oOUGwJ3GpCkhZLCW4tOdhXb5DICL73PlR5M5R7XFSVGFxKS4MXLwLLht5I
      B8999ffXOaN27d6Hbdu89N3/k8a2A7S0tjE7O0MoFGLgxntkUlHc3nIcmkpTUxuTE8/TkwhT
      q1/CMMZxd/wrAls8AFqI3Bm7mUym0IbiNt/L3LmlAdM0GhubPtIzimHbNt3dN/nJi9/jiU5J
      e6NrzbQscOqCRztziu/Mko2j6hla23Zy6cJ5nmxO3eF/yZuPE1nQ3JLVtMX3BiSn61QOVP76
      1zK9H4ea1lGv0jXYxpTaxHJqmWePdLOr3ouqiA1X0UZJ41JKehZCHH38d+448igvdhw9+9vU
      NTSRSCR45Zcvc2BvB83aBczwBbILELN0+la/xJlHH0MIwejwXlLDV/FaFk1bKMlR6JCm4XA4
      1qUvFi+Ghw3JZJIf/uDbnDmgcnTPnQdvONaE1ERGp6NzF0IIqkO1hMcUPI47IygnIhbCAK9D
      wbShrDLEikMCS59Edz51bHcRKOOrlTzy+G9ho1Al+tlZayKQhdr7W0EsJfHUnty0TryiKDS3
      tuNw6Ph8Pr7y1a8RqKwjkYagT6EmoNBUaZIe+yFDA32YhkFb+24e++zv0tjYTF9fz5Y7lDeJ
      5pXzUqfXw4bFxXlO7VMJlq0X89obnYxMZ7DXpiCSdONbG19VU8mUFNEQQhDPSC6Pg3rwi/Sa
      tSgC9rpXiXoaSZm//jsAbD9xXnGJJIMf/h2B+Ot0hNIFsWYjhbFYtCnGQkynvmnnlkOXA8EK
      fGUB4iUWjo46BSb+gZ7r54hEIti2jb+sjH37tneWgKqqeL1ePB5PgejvZtX6pDAzPUVfX9+6
      71RFY3Qmi0tfP3aRmEXArzG/bJLO2jjVDNHVFWzbZnlxkWTWxpY5x7gtYSQMP7uZ5bPNCkGf
      m4pHvs5iVqNGz1IXuY57g1CKfwFobVUpNHdkS8RbvDiKsWLW0LnNUACv10vGcgLFdT2hNghX
      l2coq2rB6/WSiMd5/62XePYLv7ctDp5PknG5XMTj8YfiNPVLly+zZ8/edd9VVVeTzOqkMreZ
      QTxloyq5jLy6qlyfD7ZluPTWf8F0dbIcWWV2qZ7B8Dxtba3Iyr20Hd7H3vExLl/4IWr2PBMo
      nHaZuHVJjedO692/IAcNSgtLQd9CgIXlOG4txf5mrZAqmR/AO3QDsf3KadHVCD7nncWwhBDY
      ZpKWllYAeru7aNK76e/tZv/Bw9t6Rx5e772Pyvm4kN+Sx8fHefzxJ+5oi6ZpSFvSVp9boBlD
      8uqHCWqCCsm0JJ6SLIQtmmpUsobF6afOoOtONE1jamqSsd4rOJb66YuHWR3r43SVja5M41JZ
      C4/IzYtp2XeN3bobPo1ElU8K62QCIRQuDKosRNJUedO01agIsXEZkWLo1jzXuz7Y1iANdb9P
      y9qmUXpfpTZFz7VzRCJhYjMf0hoShMff3XKsTyk+rfh+y7KIx+OMDA/z4x+/iNfrvSPq1OHQ
      aGysQwgwTMnQUhOBuhMkswpv3/DQN2aSSFlcHYTqlicJBIL4fD4uX/iA11/6Pif4gBPuIZKj
      59mlLxN0gtdBITYIckzt8oLk5+P3JwJ+2qLjxwn1P37zhW+pRi6NTQhw6yYdtSa1wVz6Xd4K
      oaoq86vgUO/kItVlJjMTffjrj+Nybe1MW4erjPmJWwQ85h3EGfRYyPgwEwNd7KnJnSus2XFW
      zFoqqu7tEf60kXcm/uO3/56R4T7SU6/QsfcRmjYp8+L1lTEwMMhqtpaDj/weHo+P0cFrPHYI
      ekfTHN2js2Qf59TpJ0glUzidTt5581X27O/kZt8I8bSBlOBEUO2+s8KCEKApghlHI41adNux
      Or/WO0Bxt6SUVPpv1/Eprm+TSEsujAXJrPlTir2fihDsbVS4ee0i4XB4S3U+GxpbibuPYW7i
      rwh6bfY1ZAptqS6Hmf7Xtt/DTwG2bTM+PsbI6ChL072585LnLnLp/Ot3XCuEoH3nfs48/+85
      8eS/YXx0gJHhAWprqqithCePubBtsC3Jyz/9AdFYlGQySaUnS119Aw6PC8WlkDYt3KpdeH8p
      ajzwxeAU3vtQhR423UEI8cDytO8qEeYPkAOYWTYQVhKPfjtytBiaKihPvc/IB3/F+V/8FeMj
      fRs9EqBQuUFzV2NswzznEnGSyU0KSj5EyB8LtW/fAeKJFI/s1miviuP1bx4v5HK5uHLhFUT4
      ZXSnTlXzo8STkqBfJZa0SWdNdu3tpLa2jt6bXXSWjxG58U901mU41Oxgd7OTzN1KLv8aIa/Q
      PwixVtnqkGkqPLknharmHGQbcYUdIYs9dVmONCyRGv4Ovd1dd+wGUkpefeWXpNMphMwdbb/V
      1Rz0GszNTP53sR23tLSwa9cu5iI2Q7MmL12S1Dds7tCTUpJcnaTCbzMzNcrycpiFiMXAtMbI
      ciNHjp7kwIFDqKpKZGWFm5MGM/MRbk1luDlpILDpWbUZiphk7tPm/zDkQW8VGxXSsmVO39kO
      1P/1f/paQQfYDEIIyj0C3bH1AfK7bMyVXm7eGiCRUTBMC5crF4rc3NzC6kqYleGXqQtkN/U7
      lMLnlIyP9JKkhkCw4qFVzqSUTE6MMzk+wvLyCu01Fid3CYbHJqlrO7phu6WUDPR10zc8x8Jy
      knhkBFNUgPcAT332awSDwYKXc2Z2jnbHIPsbNFqrVJIZm1uL8OhRH8uodM9k6Sjb/tgUp3du
      h8lICfGsTdesRTgjKXcqOD7C1NxtXovF8nXRCMCbczo+1cK3DTFP/Y//41e/pRgLd72o1Ewq
      xO2/d7vH44Q6XxQZ7WFh9CLj8ybNbbuZGB0g3PNtdtemCrlImxWxKv4NoMpvsTp7nes9Y9Q0
      7Hogh7Y9SEgpiUQi/ON/+79ocg2hukOYwo9bjePVkiTVZgLBO0UhIQTC4WN6PonQ/NiKn9/5
      g29SVl6BoqjcuvY+N6+eZ24+wsD5X7E0F8d2KFT4FG7N2ZzY56bMo1AdUJlYMGl1bZ+j5wl/
      q8Rv2ZLuBYveWYvJBYtdQhKLWcyaUO+/fWrPQkpQ5txa6cP8/G927UYVvgEShqBb3c1ObRH3
      Nhz+W7q0+EVzKzZ9kxYZQ3C0XSEUUO7IJy7tUNAnKPNIboTDAGQNkyqfsU70yQ986QAUhzNI
      KRFIVuI28ZUBhvpvcODwqYcqxGF8fIyut77NwSaTuYjN3mOH2bXvOF1v/DVHq5e4fv0HVNf8
      u4I/QEpZOICvvr6RZ5//MkIIDMMgHo/Tff0SWvwmu2ti1AYkMys97G4zkdLD8JLBXMwmVK3j
      c99mEns63Fy8FeNkrbZhwYKPAiklXbMW0aQNGajX4JgT1LXcZF2RXFg0+faixcE6jZWYzfSq
      ze8edt6zysSWF95aNfDCfcCoUU5NuRvPFizlpi3JmLlq6NumnP4pi4EZ2NP5KPPRy4QC1qbE
      XwxFwNLCLEOD/YRqGxkdUQn6busRxUF2pYF2xd9ZNjg0eOaQg+G5l7lyIcbJR5/fbjc+Njid
      TgSC03t1luNgVtTz1ms/pdYRQwABPUbPrRscOXoCTdMYHx/n/Td/RE1tPUdPPVvop8PhwLZt
      zPA1TnbkFX/Bbo8Ecr6EtCk52uEsJBDloWswnlHYb7Ct8uNbtfaMrtocFJIm352iiksVPBFU
      WTVshhdMOn2CzgrBhTGDU63aHZXCi7ERZ99KW6cMP2b7kwR7XsIZvPt916ZMpmdMrISNXqGx
      bUmtuVpFSpOAK0VC24Flbz0Bob4szkokTDAYJJrW7iDujVD6u6YK9jSqKAq0hcDKrD5USrFh
      mNRXmNgSlmMaukPHTIXZV58BJA2VCsrczxjo6cK2ba5efo9kdAZp3a5wva5QlLqxF1vKnOMs
      lbFJpNczoFRW4rNs+iMW2QdsGUqa4DUlVfrdd5Zyh8LRMgWnInAqgpBpMxyxP1INoFi2lDHC
      UkajJ1NF+ehr7A/cPQcglpUMjBrsWbU5YAnaF63t7wCtNQoepyC1cI2BOZ1GXdJYtbVtdl+D
      xc35y4wMV1DuWm8dKhZ7YmnB3IrKztrN/QnprGR8UZJ4CGJ8ijExPsbUbAKt/BiVB04Sj8cQ
      RpjhWYu2WhXdARYOKkON9Pb0EJ69yY4GnbKqnXc8S1EUcFZiy8UN7dWpjKSrJ4lTEzhdCk6n
      gmELVlYMmlp0ylyCG1NZjtfefZqLc7wThuTchIlTg+aASlv5eh45FZNoNjjvwsk3Qr1T4fyC
      xc4KJZdTva27oXfJYiVukUHQWK7SFlD4+YSC5Q7yiHeEOtfWnlgubiuvKkV1gbYKRcCXTzl5
      v8dkZ63BQlShsWpr9woBe6pmWZ74R3bWrT/qfn1yjcQWOlIa667JYymmEXadZTQ2RKj+zhj6
      TxOnzzxK8vARvB4PiqqSTqcZ7S5nOpzCtCVZ20nC9PDBW79kZfoWRxpsume97H5kB7BeFFyY
      m2F5aYEbqTR7m3R0R3EFbait0Gh0QXWZhmFJkhlJxrTpKFMJelUsWzIwozIQNtkRUFEVsSHh
      CSHIGCbzccn1cYMTXgEWzM9keX1RIehWWI5ZqKqgMaiScSmsGpLgNqyCQsAeHX54I4vfo+DR
      oKFcZWfl7QUmpcSwBbNxm6QhqfcrlDtzdDEXs3m8RsNG4cZSljlN4+l6SBkLBDaxg5Qaaq5M
      mrSk1n93X9pjuVcQCig0V4PLYbOSyJlJ8w/OmnB1zMHJ9jtT9nQN6jbYqoq3xYAHAp4ksxGY
      M3aSSKYxjRRBvxNTOmjoOEFjsIGJ3nfx+I8/VPZrVVXx+/0ApFIpPjz3JmWVTVTWPoXmcFFV
      Xc3o8CDVkz+DJpvBeYugM00qlSrUTRJC0HvrOnrkdT63XzI6p/L61SRNIQcHW50IAbaUpNM2
      7jVzp0PNzcG6tiiCx/fpXBrKMrlg45OSXUGVYBG3FEJgS8n7YyYTqzZfCOREFoBWt0qlJZFp
      mz1uhZQliYZNjqo5EWe7qHAIvhAUJEwbXQh65g10zUG1BzwOhXBa8uGUQbtPodKl0DVlYilQ
      6VkzhEhQhc2+oMr1sEW/ZeEUElsRNJbsVsspm+4FC4+u4HMIGvwQX7RpKg3xH7n0D9II31w3
      IDlrC+uWiiCnba+7fS2A64fnLL7xpINQeY5DJTOSC4OCUzslbufGXOdeGF3UmEp3UFvfjLes
      kq7LF6muDvHUZz6Poiicf+tFOlyXGYv4SanNdBx4jIbGrWeOfRKwbRvTMFA1jdXVVd569SW8
      DosGemmrtBFAPANv3MpQ0X6W3YdO4vP5EUKwvDRPYvj7NAazpLMShwaX+jNkDInfLVhNSPZW
      KXTUbM2JaEtJKguv3sjwXK2y7mSWSMri6pDBfje4lU/OIWZLyc24zWhWUFkm0IXgkepcdev8
      74YNcUPiUgXeoh1HSokkF4ZjS8mNsEVaKKhCsJKyqXBAZ6XCUhre6s4SlLDDlOglfdPMlEVm
      9f4SpuXainhyp+DGQIpQpYrPreJxaXir9jKlNuBcfpeWyu1FcQ4vOOibL2dPaBA93M3kdANf
      /71vkkomUVWVlZUIWvw6nnLBvto40eQtlhZ3PXQLQFEUTMviJz/4exp8SfxGlJPVq2t1PnMT
      4XfBV465mI9eYnQoQOfR3HnLlZUhhm40MTvdTdAtGQ3bPH7Yx3zEZD5ikkzZeHSwpYJtS97t
      ydJYqbGrXrsjFVTKXMFbrxMqXeBcWzP5OkoZCzQp8agP1rF4ryoPihBUa4K5RQszKTixXy8Q
      f66UTq6tG+kbQtxmrIoQdFZoZGxJxpSUB28zhemoxV4TyqTc0CSsVfsFuv3RAotyGrlGPCPp
      mlKh5gSh2kY6du9hZqqK7qGfcqAhtaVnzUUsLvVleepQmupylXd7dOr2HEfTNPxlZUgpmRof
      JmF4uDIpwEqSSWeYz37Inv2H71nk9pOGy+WivqmV2Ni7HKlLbVjkFmA2YjIvBzmfjBEMVpCI
      zFFl9nJgl0YiYzOybHOhL83eJpWz+91cG8kwmYTxqI1pS0yhkpzOcjklOd6+3jAghMC2JR8M
      GMi0jSqUte9ypsRqN9x0KwylJe1OgPWHF94v7kb8SSvHwYdWLPaZ4LDg8tUs/jqFR1r0bVuK
      hMiZYF0li8WQglk/eP0actmmNW2vWwgPxIOUU2JhJQUxrYlGp8XElZdwCJOspTA4q9BelROH
      7oaROZPuMZNaj8n4uEBtdXF2j6RraYKx0XoaGhu5fvUy+w90smvvIRRF4eKF83h0jWjfOaR8
      uKIWIbcLPPrEZ5nddYArv/q/eaL9zt12KWYRR+Gzu6Z55fIQE90mNRUafh9MRRRuTFocbPfQ
      Xp+brtllE6dDcKD1tva3mrAY7jKZnskQLNOIpWwON6vYUjK0AMuylr7FMF9uTKIq63UuIQTP
      tDt4a8zESEns9k7sVIK28DC+kmix7djq82bd4mtt20YC7y/YqGmJKgUaOZF7pw3DMxbLNTaV
      W7Tq3AunahVS1TpdCzZDLkFlSlJeLNpHrv6d1Fdv3uURW4eUkLVydeUF0L+gMJUMMj4bIWq6
      KXcbnNrrY1coti6nwJaSa8MGLl3kok3TBiCw3Q7qKlXe7bYYmpPs3n+Mwb6bvPC7f0RrW/va
      O29bTT6txJetQErJ9atduMf/iaaKEtPissn5MQu/L2e5Ob3Xhdel8Mo1QVnDKeT8TdTsAopb
      IRy1MKTgS6e9KEXyesaQfPdXq7i9Lg4/9XuE5ydJTneRTKU49vyfUh4Icv2H/4nHqxIbcveE
      ATeMWprPfo2Wth2MjAyT/MF/oknPja9pSyayghqnik9Z73fYSNTJE3/xuQ0FM7ct6Bo22LNm
      pim+c1DAocM6NQ+gbmnWliym4FJvlj2Z3I7joqQ6+Ed+SxGEAOfaE+MZyZWlWnbsPsBB5Q3M
      8h3UtB1heWme8cW32LGW15JM27x2JUXWlPhcuYSOoy0aWUPy+oiDkVgtoeAMexptehen+dJv
      /2uamluL3inW/X1YIYQgWFnFTI+kqWL9b/UVKsElyVNH3YVre6ZUAo3HuHzubfZXZdAUWFq2
      aKxx4nYKppZMmkJagXh0TVBb5yRKC0eOHmdlpZ0PftZHkyvNe+++jSMV5oubEL+Ukl5aOPn1
      P8Pt8XD9vbdYuvgmDeScVr0Jm1VVoT+hsNe0OOqROIoY2EZjn3fkFTMoW8K7ixbZpKRmE/3A
      JyXnh7LoHpVjdbmzhLcDKSVXl2wMWxBfNmHV5qAUhaOZSvGxBdFkDGhoaiGweo6dTRbvzUWw
      LAN/4h2CZTC5JJmK6CRWYnxhv1Y4QdCWgv+fu/cOkvM+7zw/vzd07p7p7sk5B2CQAZIASZBg
      FEUxS7IC7ZV9693buvPtJVe5ylU+/3N7Vbd1ofbuavdqT177fJZLtmUFi5IoMYMESeSMCZic
      U3dP93R4+w2/+6NnBjODGWAgIQz1rUIVpsPbb3ie3++J32cwpjKl7eLxFx/n2skfoIdaETUP
      8fIznQ9sYN2dQMrCREWXy4XjOCtsdAvzU1QXK+s+W9gtHVtyZjSMoqjsLJ9DUSS79uyjraOL
      0z/597SXmDzRrHN8zOFwq87bl7LMJt00lasYpmQybqOoGl/9+u+jKAqRSJSOw6/gSJUjbe3k
      clkuHv8F9bMnCGkm2ioBNhyBUlSJ2+MhHotx4YNf8mVPEtUFUgqSQuHJWo2WrEKlT+PT0Tyd
      moOCQFPAtUlXyXozSRGgOdCW39ghBaiQUJGUkLK5MmNxrUrjiTptyz6J4cD4iEVrTlICmwr+
      Mu6ZAqiqwO8vRo9bCKBan+DsZ+/w0j6H09dhOlNGsV9jd3UWXb1huw/EvYT2/R67GlsKF5R7
      joqqRnwPsLH9TtHf18Po5R/jdWvYtoWjBhGKzvDQOE/WO1h2gfL8eiLIvFKHM3+NipaH2fnI
      CyQScXpO/l901sC1M39N17H/ivYjr/CTf/oHnqi3mE0JLo1DR6VGTwqceQh4VWrrPCxMNhJa
      NT+hpf0GnYzP5+ehZ1/j7MchfvXBTwjrebrKdSr8hbj/4sAZbPurRKJR2g8fJXXmLYpVCUv2
      uaYq1PokqgIPVymcmwZTSvI5yQHvjUiNlJK8U1jdry46lOtgLyWkSt0KQgMD2Cx9uXpXaJKC
      3gmL+TKVyCpyQMHNu05B1yTTaUnAkrg3+Mzy+d0zE2g1HAc0zYUUGopiIB0LIQ0+HGwgMTvE
      Cx1jFG+wvSVllJbyqpWTbGq9M06g7YB4fB7VnKU0pFIeVoEFAHZEJNdGVJKzDqZhQ3E1L3/9
      97GsQl/00EAf509/SnHkCLHMWVrL0vRc+IDa1kN89Z/9EZ8cfx+pXGZM3UO8/wxPHvFSWaJj
      WpJLfQadu46snINpmszNzpLPG1RVVaO7XCiKwsGjzxKMlqN+9F1iCyZXpyQul0JrFPqvXqBj
      z0EefuYFfpY2kKfepsJVUIErMYszUzbtEYUDpSqPVBV24pgh6R632BMsPK/ejGQmD1lH0u5X
      SDqCCxkFXdcpzmZYSDq03IG52iYFJ8/lMZA4FBTJF1ZpLFMJewVeFa7O2swtSIQjKU46NK6f
      zH0LqH/yn7/656oxQyILA/OCEv+t6/y3CrcO8ekhGouzqApMLIDqr6bOPcXhuiz+dUOSxxNw
      bkyhd1YnUlZFSckW6yu2IdLpNDM9J5mcy1Ma1leqNVVFUBFWqYyo5AjQvO/LFIdLVgrgFhYS
      xOJxnv/yayxYpYwN9VLjHeLypfOUN+zn0cefYHCoB3eym9ZSh0+u5ZmLZPihPQAAIABJREFU
      W1zuz+EeTDE1F2fRVkgm4vT88h9wTv4U2f0pPb29zBoSj89HKplkZmyEnosX8WqFIXq9CZuY
      CbMzI1S37cPr9ZJOp7HL6piZGmU0ZaBK+FK5wmxW0rcoKfEIXKpAUwSXExJsh8EcXMoJ3EiO
      FiuUuAQlOtS4HLBMsguSVhPcmwjYZnmDUqASQRWCSgThjEN83mFg2mJs1iE671BjQKkBwdtJ
      vlhFcC/ljSiQlDA4J2ksuTsx4DvB8LzD2cVdHHrkCK2tbUvnub2d2luhr/sSrut/yflxk6cP
      rqWLdCScmWzg0LFvomkaQhQYraWU/OxH/y9KdogXvvU/ABCPx/j0vb9jd+kwJ3p1ajueYGH6
      LInZcUpDOtMLAhHqYmZmmlBqhpxwUWYvsD/kULIq5CwBw4bhnIJLgRLdIajBJ3EHylwkMpLn
      ugqDPz6ebuDFb/wXDA8Ncfr7/zdtboN6l4nCjYUxbUlOJuHZpQmgGVtwYc5mMGUxlxe0BgT5
      jEOnT6FvwSFvSKoMSfl9fKYbKZMFTNbUYFZWUnfqFClFuVEOLQQ0ld5d4d9sWMXyP8eBz/ot
      xtMhXv/aN2hra3+goUzDMFaGbW+lx2EzTA5dQ0gHl/tmh71nXLDv8a+RSiV56yc/YH7+Bmlt
      JFwEyg1amXA4wjMv/QFX5hspqe6isroeV9FumspdtFZpOL5Wdu89QCRcwg53lq8VxXm2RK4I
      /3IltAA8KrT7HRq9BeGXEuo9gutDBuMxkxPdBheGLUor6xBCUFlVha17aHSZqGKtVeDXBK1e
      +HzaxpbgURxipoPwawR1SOYcQrrgypRNa9Jh130W/o2QFILx9nY6v/MdkmNjjO/ZQ/D3f//e
      +QCw8Sq++rWPek1mFwU7HvsSXu/W+ITuJVwu1wq9+okTn7Bz505KS8vuuPfYNlJ4vQJV3KxA
      Fi4ymQxut4fXvvqtNceuad5Ly47DQIE5IxabY2EhScrQqC0vpaGxhYrKGv7mL84xPj/Dlb4r
      1NQ3EwyFmBlT2RFYHZuH0ymNh0LWhkbBqKFwOa1QqxloiqQrb/H+nMpzzxeKCz0eD7ueeYXY
      +98lZxfGLVWu6jqr8QqKLcmFWZv6kELUI3isy81ixiFtQEVE4b3jWexp66b6m/uBNW28wOC+
      fTz/9a+jKAo7X3+dXbt34zjODR/gQSBvQXeynGeef/HXHlxxN7G8+6iqSk1NDUVFRfT09BAK
      he4o/JpMG8yPXkJxa0tOcKF5YyKuYhY/TnvnHrxe7wq7hmPb5PN5AsEQiVgM3eVianqSk+/9
      DbmZ0/hKd3H40SdWZqRlciZaboh4LsDCQpq6unqGhgZp9xRWa1sWQo7VbgeWCHQlElsWTLBE
      3iFn2RiWQ3daoTPips4jKXNJRhwfpdV1aJrG+NgYvRfPoigCUwrOxW1cCoS0gqXgUgTDCw4f
      TdhIYCYLPe+lSeYFqk+QEYKZWZuKe/K07gza7Cwzfj+jZ86QB8KlpVi2fXczwXeKWFpyItbB
      19/8wwfy+1vBMh3jndQYzc/PMTI0QDYdx5/6gJRowEGnvHE/bR176L54jpkr55DzkwjpoGka
      WipG96KgMZVmdtd+nv3a19E0jbMnP6Cz6yDRkrKV49u2zY9+8DcUhcvQXV6y2QwLCwskh3vZ
      p8ZJlrZQlBzHl0+RLmulf3QCmY7jUwWagLwsrI67igTn4g77wwqlS2ZTzoZeWYRV1kQ+Pk2X
      OUFglZ1wNSlJmpJDEcGCCRc+zOLPSGIucEtByJRcqdaY1wT1UuJyaVTYkgopyTsOrgfI5BFT
      FJJ+P/6nnuLAE0/gDwTurQl0O0gpmJ6dJ5fL4dniFJj7jV+nuC4aLSEaLSERj/Ozv/iUgy88
      WqjIlIKP/p//ncr4EF3CvGGaGCAFzOQcKhyJaeTw+3yomkZr5wEi0bXM26qq8tpX3+TixQvM
      TE8RCYcJhUK0Pf0M0rYJFRczMzXJiU8+ZM/+h/Clf86RQIrlmdonYw5dQfDpgqOlKu/N2LxY
      WdhdPCrsZgE5f65g96+TkM6g4K1xhxOTkslBk6YMaEKhfKld0QEifoX6sEo44VAhYEQVfGo4
      FLlU9LxN6wNSgrzXS8e//Jc0tLaulGbcVwVY7ZnnTElvqpwXX3pt2wr/b4ru05/yjD7Lwi/+
      AwpwctbmSxGBRLK+SyIvJU5eYioKocYmxJKQlJdvzIWqKAodHZ3oqsCRgs4dO9ewYxj5HBVl
      IWpra+l16WQzEl2HrA2LFnh1hYQpcQmo2MD6XJ4Ptz4QkHckxrSNMmHR4hSuY/VnYnqhWaot
      qtCXLPQ81Auo96qMOZLUA3SG8x4PnlVjsqSUaLZTGPep3WGP51axuhBq+Yfn0gqTvsd59NVn
      t4Xt/+tgmc5E1/WbnH0jl+PcOz8l3P8JXg28akFAgnqh8G99GYCUkpgJIamgAoPXrlK3bz/B
      YBC3x3OT/2FZFnnDwOP1bkoZ39LaQUtrB6OjI8yM9OEJF8yXeF7ycEQBCVOGoMUnMaXAlnJN
      2cBmETBbgp2y8TmwPttkIZlqcnG4VCFjSXKWRKo3us6GTcmBLdzbe4Xa+Xku/OQnVPyrf7Xi
      72nXR0wm+nJUlGu0VGj4l2xBy5ZkTYlHF7eksrgd1herTaU0ctUv8dDewwixPZndtoqhoUFa
      Wm6ejHPhvZ/RMvj+SmEgwGSuUPQzaUiq15X6CiGocMOIx8bOCSIDvXz27/4NYa8Lu6aZ3S99
      jehSYjC5sMDZH/wNYmwAZe8RGvYeoKa2btO0/8XzZzGyJqeQxPJQpBcSQUKwEtus88GpmORQ
      5Pa1MwBig6pzG0l/SOUrTRoBrZCh9Veo9EzZdGiCBcBAILeepL3rEMDi4CATIyNU19cXFKDF
      J5h2RZhOuklOTWC5FaQiyGQdokLiuBX2d7rx3oYGYzWWF4/199KwJHPBxzm098gXOtEFBaFt
      a2u/6fVUKgX9p3Gv0u3xjENPQrLLLwhu0hAjgF0RlU/GLQI+lYfdFoq0sEYucf7vs5QeOELz
      zl2M9fdRNXKFYkWSO/cOFz9/j0sNNYQq6ylt2IGiqkxdOYGntB4HheHrZ2gLqmRzNnVSErEl
      5yYlpUUK7cHCrlzlFSxYMJmVVHtvnQtyqQK1WmOxzySw1No954V0jYvWMpXi5ay3AJcCy1XN
      LgrDKEwpN80E3w/oySQXTp6kqq6waGjdaZ2ALtj5xj9n+of/C62eXOGTwcITNGzJZ1cNju71
      MLVgE/YruNc9REdCxpBoKrg1Qe+sSkKtRZMGPiWNjyRhn0BTJJrb/4UX/lvBcWyk46yMHkma
      kv6kZF9QELjNTupTIakJDnhv0HZrArpmrrP41nVOfxDF5fXRuNSk4hHgEhb7vRP405PMnv4M
      CRzyQmzoMpoCZxIW5X6YcwThvKRUVyjVYTLtcMEU7IqIQqJLSj5LKLQID12eHJrYeNi4CoXJ
      9Et/Z4Uk3+Di5TZ9DclUxpLE4w7tSxfiF4LDHsGpbMHXadIFdzZU6+7AVlW0VROOtKaHn2bg
      7UnOvvtTFq0wzXJyDQeNWxW06pJ3zmQpkQ59msrh3R40pUBfEssIzi600ty+m4VkEhJ9zOUF
      T7/0Jl6vDyOXZTGVZGr4CpXJX5KcvAI8ed8v/G4jl8uhKAJV1cjlcmTSaSLRKP2nP6GaFCfn
      HXKGjV9VOBQUaFtU+iqfQlBZbyJBUIXO3DxOdm6NDyEciWFDwAVlq0osx9PgViCqwdWYQ5cO
      pauYHCpdCkFb8smUg1BhQihUH3mOrsOP0/2X/xNd7swmC5XE0QWTLS50BSr8gkdL1TXC70g4
      Pe1Qb7CGgF+XEsNw6Ew6jHlVxj2CDpVC5ebK0Qv/t6VkSDokFYViCbWw5Xt4K7RZFtemp1f+
      1jxeH6nynXi736HkoVe51PMxO8T0GnbfKp+gyicAhbjhcGkgz74WF+fGVKzKZ3jlG8+sYux9
      buV7Qgh0XScQDCEUjeH33savTZJMJteU7X7RIKVkdHSU0dERSkuiZDIZPC43x9/6RyqmL3Pd
      Bp8D+4rvPMimK5CTEu8mD3u9Ay0cMDewyTsjgrdHVSx3EY84MYIbZKUDquCQWhC2esuhu+8a
      gee+jGvfMwyf/Sn1npsPLITgSKnCJ8Kmq0hdU3MEcCXhEDOgLCXxrVdkoMGv0i8FVWkHkZOc
      8SloLoFHKZBUJe1CqQWqoNWl0ybg/bxkwpY8zG9evpzweGg/fHhFudU/+7M/+3OXy8XCSC/W
      wgwNz36bof5eSpTMhs6KVxNMJ2zyboVTsxW88TtvrknnL3vXGzE8j16/QC6ziOWtpe/6dZLJ
      JKWlpV9Ik6ioqIjGxibC4TDVNbXkcgbBaBnu1v3kog2M9V6jwiU3bRbZDJMGRARrOq5uhTlL
      Eo5qBNb5aKoAA42D3/zv6JucpSQ5s6ltrwiBXxWU5JL0JXPsffpLOHW7GBgaJpvJcirnx4ND
      cKlvQ11qqJ80Cv7DMgbSkrlxmzoDghuQcAkgoggq3QpzPpWkV6DnHMJZhylHMiME0azNtKZw
      0KsSRNJng2k61EvJlBD8ujXCUkoyQiCfeYYDTz+9InMKQHNLK49850/AE2Ss+zzhx77OQGrz
      g3UWKcwO5vCpypbrZHw+H5GOF/C5FYy8STRaQk9Pz4bT6Lc7hBBomoaiKLhcbtLpNEXFxQxf
      Os/4J++RuniKDl1wLeEwmLmzgrqMKfHeQXDMucXhmwMmQ90X2Pni6wwpt6+18gtJ/sxxfvqP
      38MXDLHzW/8a/2v/msWyVnoCjfSmBeM5wVDaYTArqPUJZg3J3BLrTa1XsOAS6Nw60uMS0KnB
      QbdCZ4mOr1xHC2m4Iir+qM4xvyAoYFEWhP+QEGhs3kSzGrdaTMdDIXY999ya19Q//dM//fPl
      mbpT8wli1y/S/tATpPxVGOM9BNWbBVRTBBVehXzTEeqabua03Awer48Zo4i2jh1cvXwRr9fH
      1atXqKuvXyoN/mLtBMu5AMMwAJj44OfsT45TnV8gKGA8B+cG8iw4UO4Xa9oQN4MjYDjjUKRt
      zW+YMSWRkpt3AABNSGZn5yjf9RizWRPv5CC3m5ddpDicn5mnvLkDTXcxdP5T+s+e5Knf+Q7l
      h19ANu8nW9GOXtWK0voQtD9CLFSLHO8lZznkVYGVlgS2+CzdAooVQV46NDW7cIdVuiW4s5Jx
      CVV2oSOtWwialhThVthMhga9Xipee42yqipM00RRFBYXF28oAEB1fROpvOT8R7/ksRdeY0Yp
      Jj9yGf8Gv5o0JU7Lo5RVVm3pQg3DYGEhQThSQjQaxe3x4nK5iM3HyOZylJeXb9uJL7dCKlXY
      KlPJJPMXT1ElDZZD7GNZSdmIiWvO5kpWEixSCdxGAos1QV4RHI8X6AN9ClzNFgTFs4EC3UoB
      hBD4yTJkFdPx8FGujoxRsjh3y9VZFVDhmJy9dgmn7ziuuX68i3mMoV7m8jbtew9QVVNLXUMj
      5VXVlJSVU1nXwNnpNL3nBglkHMrE1vIJq6FJMIsVdpapfDRgYdgSlw3VS2ebkAUTqZIbjrIl
      JXMUdobNBF8CE6EQDb/3e+x66CHS6fRK5bGUcq0CCCGorKmjuLyaUFERJZU19MUtQomBlab1
      ZaRMEG2PEinZOJhl2/ZK9vf69T5+/Hd/RX9fD4neXzE6eI142mTX7n1UVVUxNTVFIhGnuDi8
      rYZd3A65XA7TNAuUJz//MXsSI2siaHFLkp63CdqC0KLD4JxDzCMo8W7MUmBJyfVFyeCYTWdK
      kk05nFh0KDIkk4sOYw6EdAXPqmcxbUpybgXDgnhOEs9JYlmH+WxhCEQiazMwk6KyZRfeyhoS
      Fz7Hf5t1xqsIiiyTsbjJWMKmWhc0kcMz3k9PTlLbujb/oSgKje2ddM/Ok52eogLJrBAENjn+
      ekgARXDNgmnHTd7tZ24hxyOyYKMrQlAuBONLOYQB6TAUVEhHVeraXZyM25RaNyhWbGBEVemv
      rsb93HO0v/zymvofz1J23eVy3byjCCGoqqld+buyYx+z/e9Tq66lKo+6Bef6r9HS3rnm9Xw+
      z8l3f4aYG0B6ijj08rfxeDw8+dzL+PwBHNsmMT/FyKV3OfmzHoJ1D3Pw4EGuXL70hWB8WIaU
      kg/f/jnO7GThhekx1p99sS6YVwWYhZqZiowkfTnPe3UaTzbqeFZ9IWlJTk3ZRBKSjqXgi0vC
      zrwk4RG0C0E25XA5I1EDCvsChWZ2KSX5eRtj1ZMUFIRqXha4MOsZ5tI7P6XrqS8TExpweyrM
      iCZ4SBNMm5KEVTBDMo6gpKZuw88risKxF17g4vgwvbEYea+PilR8S/dyyuunv7qeYFk5Bx89
      QveVK8yM/AB1JWVdQAfwmZQ4qkqZW2FnrUZtSGGqwU2fuxWP7iYzMED5gQO07NrFYzU1K0TF
      y/D5fCsTZsQWTCrMvIG2QQhNEVA0cYbY/FEi0Ru+ec/VKzSNvEPIJfjM2YeiqNTW1q1JqtTW
      1VNd18wHP/4u+e5f8lZ/Hzt2H+LS2TPomqCmsYXicGSFvs8wjG3RMLMelbV1+M69Q2hJkNcv
      6kEVjHWrrd8GddjiAwsaq1SagwrTOUnvmE1rVt5knoSAcUfiqAKvELQ7YCzYnFgUhIMKk47g
      MY8gvOGTXC76gngmSbS0lMmnXmXuwx9RIm+tBI6UzFpwNSt5NCCIO4KhPU/ydFvHpt8pLS/n
      8H/935PP5zn9t/8f9NxeARaEguzaw5vfenMlehiORPnupcvM9/VRsiQ3s47DhLtAoHtUASvt
      cOKiwYEuL8GHXuPo4aOc+egjrmSzPP7GG7dcTIeHh2lqKtDR31YBausbuNTyNGrv25StY+tq
      UJKc/8Xf0nLsdYRQmJocZ+Hqp7S4BSOLkqIdnaw2r1ZDd7nY+egrlJdXYORyvP/Or5g/8xlP
      Nim880GIAy9+C90XpPfCRxTLCfyNx+jYdei2N/R+QQhBIBAgW6iH3PAzigBTvfk9jwM1oxaX
      Fm0uRjQqsw5N9sYs2g6FLX1ZjwTgEYLdDgzHLWqqdCL6rac6CgHawiypVIo9R4/x6WKK4Klf
      sJ6pct6SDBoQNxxyCFq8cMhfEMrrrjBHnnzqtpW7Pr8fn9+PuXRXbuUJzGk63q99m4f3r52c
      6fP5eP0b3+Ctf/tveTybJS8l40Uqx+pUZnIwMGrTJAqKfSHu4huHjxaa/X/0I0obG2/pS46O
      jjAxMbGiAGt8gI2gKAoVjW3EI+2kihuYz0EqEcOnSnQFKu15Zi59QurKcSpnzzM9OUM67fC5
      XcyxL39103r6uZlp0okpIqWVmKaFpghqdnThajlITdchiiJRxkb6mb72LgdqDEanU/hKWvB6
      vfc1WpRIJIjNz6O7XCvb5jLylknPiY8IKHKFU389Bhcl4fTGvdHFOUlOF7TLzSnkLQTzGlRt
      cM15KdFCKqW3aVlwpGQikaHv7BUq9+6juqWNs1eu0T+dYDInGc9JpnMOqbhDTcah2gLDdPD6
      NTL+YrzHXmH3a98kEAxu+d7HEgnUnmsbRp0MILlzD9XfeJPmri7UDfy+YDBIOp9H9PUxpGnY
      SJqjhfGrSSEhJPC5FIpSBudmY+zYuw+lqYm9Tz216eRQKSWfff/fowx8Tqj9IXw+39YSa0II
      GptbgBas3Y8wMTbC5StncAZOg3QQ0VpKF4eYyxr0xR12+gT5cDGXLpwnbxiEggF27t3PakWr
      rq2jurZgTwYCwQ3r3qMlpejCpHu2j9rdT1NUVHTfQ6Ver5f5uTmmpqaoqalZ46T3X+tmcT7P
      JQWiRSrVnkJdTdxaYnsDHJfA4cYKLpd2CykEOVUWyh42WbyllAzpgsYNlEtKSUJKtjKdKutA
      fMaiUZng5IcfcvT55/HuPQxXB6mWgJRYgC4EUhTOl/IKKt58k9KyMorDt5k8twGq2zsY+7mG
      x17rO84oKsahwxx4+VUCgc3dZCEEMdPkVDTKQ889R8+Pf0zfYp5dRYJD5YVnMG9Irg3ZOJ9/
      yodueOaN372l6TPQfx1vZhZXtBL/0m/fcchF0zTqGpqoa2jCNF8FChMNx8fG+Ogv/x1vlC3S
      l3bonB6g9p0h8o7kXEZy+vhH/PP/9o/v6LeEEOx9+CngqTs9zbsGXdeRQHpxcY3wpxcXSR4/
      ThcCHBiP2fzUEhQt2GiOZJlUOWpJFArlwhN+hYxHISvA7dEodiStSzThG8nxlCoI64J1VKII
      IZhFolXodGwhOzSRk5gIxh2H8V/8Ao/HQ3ldHfOKirBtEIXkVR6YrKjAs38/Dx8+TNkmzThb
      QWV1Nb07diMvnV25NgfIHX2ao6+8uqWQ96tvvAFvvIFt2/R8/jml2sjKe0lTkjRhQoVyWyKG
      TnPu4woOPrH5xNDicJhLto4tInRms7jd7t+stGLNil5Tw7N/+N9w7bPjDPT1kkxPM7do4hGw
      xyvoV0wcx8G2bTYzudZTdq+HZVkMDQ5SW1d33xpphBA0NzffdD5enw+jvoG3RkYJKYJHhGA0
      a9O4aN/U7TWvw3RQpcOlUOxIzuuCTtNBl5JuDUxVUJaXqEARMKOAx5b0+Tx0UmiaXy0uUkrm
      NMHhkLIlGpucIwgCYSEosSx6fvhDkseOYXq9hBYXGfJ4kLW1lO3axdGjR/H5fCvUML8uTY2q
      qlQ8fJjkpXMULW9xEmQqdVvhl1IyMjJCbW0tilKYQ13e2Mip04M0lbop1yxO91lEFx1CCmQl
      RDRJbnoAx3E2PX4kEmXUDpIfHuI//p//G7sOHb67LZEl5ZU8/srXeRyYn5/ngx/+PaGhy7hU
      ByrrsSxr0y3Ktm0unjtDtLScVCpJXX3DTSGsXC5HRWUlhmHcVwXYCIqioIaCWKpCHPjUlph+
      hcGsjRTQmJEoCLIKTEdU9iNwL4X1mmzJSZdCQEKTJigDxpcCDMMSShVBDjggbd5XVV6wbdbH
      wLJSkndY03ewDAlMGZKcDSUumInZ7BBiRYkO2jYfv/cuoqGB8mef5eljx1acW9M0mZ6cpKyi
      gtMnT1JdU0N1Tc0d3TPDMHC5XLR1dvJLX5CiTBIoZLm1LTD+mfk8586epbb2RjheCwYZzKqE
      O44xn5jBuHqOKJJiWzKoFThLhWPeUgEWEgnqW9qYmpwkazmcOnny3vUER6NRXvz2P+N7/+m7
      9A9dozUS2dAhzuWynD7xEZnxbi5c7adtz0GUyW4W9z7JjoOH0TSV+fkYuWwGEORyOXbs3Hmv
      TvuO0LV3L9fPnSM0PsUuw0EKMIp0kkIwIiyq0w5DfsFuBEkkMV1g2Q6mUIi6FBQh8ZoOCEH1
      0jGrBSsdRQnHISAdkhtUhyoWDGclOwMCG1bq95fNqWvzDoYotGE2GmvbMC0pWRCCCrebzkce
      YXRwkNmxMRaGhmBmhqwQvPTHf8z+gwd/rdzMMqmYpmlUPf8Ciz/8PgEggyBad/sxVpZt07Ru
      11VVFeH2cPDwo4TDEX6a+S7JE6e5rgtqd3jwBd3QdGDTRKqUkvfef5+6+iYc2+J6by95w7h9
      FOg3gabrqBpIcwAtP4mntAOfz8/42Cj5fB6f38/pj9+nafQtFuPz+P1FhBdHeSycRUz3MXjy
      XWIDVxnvuUj+8nt89PkZAtEymlq2Xn90LxEOhzn42GMkMxkSw8NMCPBJKHckA0EVO6yiBVQW
      bUmfS/BMrU44pHHVEuzXJIaUhKRgoyCOIyWXFRCKgteRhJeEwZGSESAIzOQlKenw+ZiN4hYs
      2nB2xmE0LVGmHayUg+lAnRBr8jCqEFRIMOfmmDl+nPwnnxC8coXoxATFCwssVFfT9vDDv3Z9
      1uo+aT0QZPjUSUJWntGSCkR1NdU1tbc9bigUWtnlhRCMj41h5lIcPPI4LpeLhq4uzuQzuPVZ
      5vyN7HnpD2nu2JxIeWxslKmJCQ4fOYLL4+PEJx/jcnvurQIAlFVUUVS9i3Nnz9B/4VNmBs7T
      ffUSAxc/YWRsmpLpz6n2msxmJcI0aQiAX5X4NSj3QgkpatUUFV7YGXIYS+YhECUciW6L4jlV
      VSlvaebiuXO0xVNc0wrJmjSSQ36VJk1Q5FGQAmoCKsWaQveiTc5xcOwbK/96zAjwu1VcUlLq
      FCI0c8CVpZLgCiGYsyWTi7Aj5pCZc5ifs6lISHwLDsWWZF4ThN0Kq2M4y8PlPBQiUROmieY4
      +ClEqtKKQsnrr1NRvdmZ3Rk8Hg+j8/MkFhJEX3yFoY//kUBZDcXRzfvBlgvVPB7PjV7ysVGi
      g5+SCVVQVlmNpmkURyLMp/O8+NU31yRj12NmZobzZ8/w7PNfwuVyUVRcTDI+RyQUuPcKIITA
      HwhQ1bgT4QmTnB1j/7HXkZoX2fsueyMWioCgSzAat/AIB6/GSuXkahFXhWR8JkZ28DzZYCXR
      0vJtoQS6rpOxbaZ6ryPSeYZVge5WaNIEiij0w84gqfQpuDWFK8k8FgpRyya8zl7NS8kCBS6d
      3brAJeC0JVlcen+nEASXhLhMCGxFYcFyKLUg4BTsfHUpCTXrUihzCfywoTPrp5BfMITgjBCU
      A3NtbRx5/fW7dl+FENTt7MK3o4uiSAT63md2dpb63Yc3/Q0hBKlUak3jlNvjZS6xwMTwADVt
      O3G5XAUupJ17bsndJKXk3LlzPPzII3i9XhRF4bMTHzM7OkS9MXLvFWAZPr+f6to6GnYcJBIt
      obSimsXhK1RqaaDQbB30KOQQ9CQk/QkLtypW5tkCpC0YTTsciEh6rl1lOlegFJ+fnSUcLXmg
      xLqVDQ2E9u9hbniU6sk4KZeg2qUsURVKJjWFJp/AQjCKG6eiGndzCxldJ7iwgKAg/NcVEC6V
      Wk3gFXDVlByQggohiIibF4ViIOMSJE1JYFUDl0BQYsGwlIRcyoZmFixRsgANQpD3eGj5zncI
      R6N39d4IIQgEg7jdbi5eOE+oupXq5s5bPiufz4euaWRzOVRVJRCWMiHgAAAcx0lEQVQIoBWX
      8e7bbzFx7QJlja0E1gVJNsLszDT9736PyWSeqtp6zp8/T29fH1/91u8yPjaKSKfT0ufbSqvB
      3UUmk+HS9/9n9vo3rhfpjTlopkNDUMGwJW5VkDAkvxi1OFCqEtJhYBHKvArXrDBPfPu/LPDo
      uN0PtKw6m8lw8vv/SN9Hn1AUcVNUX4/w+pjKZKm1k7ja99C07xAVVYUy8nQ6zbv/5t8QmZtj
      HGh1C4pXycUJw2a/U1jxM1IyoAjKbIcAMAZklsp0FxxBVdzEI6HYWa4Bkgy4YTqk8ajjEFi6
      L6aUOEIwJCUZoI5CiHTm6FGe/Pa378oislFDPbASCdzKb1iWxT99/68oU9OEG3fTcego733v
      /6A+d51ptYyH3/yTlZD6+sig4zhcOH+WnuM/5VBgnpPTArNyD1W19Rw5cgSfz4dpmg+QGlFK
      kubmghpwQSxbuInvTzhI6RByqzxbo3J+3qHcK2gICEo8kmQ2j2EYnP3wl1Q3NLLr0KP36ypu
      gtfn47Hf+yZtzz+F2+2mqLh4ZVqiZZq419XS+Hw+HvmjP2IhFkOPxxk4/gH7JkdXVvlGXWEk
      Y5HRVSYQPOFSmHIUpqWkXhV4KUSAbCmZLNcxJVxJWugIDE1QHNV51q8ylLYYTTtYgOVScLKS
      5qWSZQWYaGzk8TfeuGs7qGUVMsDrrYs7KXfXNI0nnn+JwV/9FfLST7gsNAINe4kM9ZPOJlhc
      XFwR5PPnzvLI4SOoqophGAxcu0D8+PfIJ/KcWJDIukO8+vrXCK4q59A07cEogJSSd/7pB3Rq
      sQ3fz5iSRE6SXOKbbC8SxA3YV6KQdyR+TdBepPDjEZuoG2Ydk4WzJ2mcPc1ENoa9/5EHWlqt
      qiqVVVU3vbbROQkhKKuooKyigmwmQy6d5sKPhxFSogoFt4ABXeFghYqSdPBakmZVsD53rAnB
      0rwKZos0Hg6o6AJOGg7FquRQSCEbUHCAz+M2e5YY6vLAbEsLD/2Lf4HnLlbcqqr6a89XWI1s
      Lo9Rd4TYxZ+xs/sf6Akd5IN4MR2eJD3d12hpbcOyLA4cPERPdzclJSVc/Kf/SIs2x46wg19R
      aCxWuRAKrHGql3HXFWCzMTfLcByH86c+IzN0lnCNjeWsbRU0LMnfXjPZVSQYT0uuxGzihmRX
      REWIAk1LyAWfztjsDgsibkHQZWDPfoDXC3ayj77uq3Ts3HW3L+2eQUrJ4uIifr+fqStXSOUl
      nW6FXimJBBV26BolLhg3JMr6zqR1WHAkxbqCLsCSIJZGnSJY6TXO2wXhz2gauWPHOPKVr9xV
      4QfumhlaVV1NPm/Qk3iEoZEP2a2e4t2sxj9NKQRSx9m7bz9CCPL5PP2f/YLjk1NUu7NcdCSK
      gCfrNHRFMN9/kfm5xxns7yWTTlNVW89AX+/dVYB4LMbFixd45JHDuNzuDRUhHpvHvvhjvlTr
      cHbaIZaTtBQrdEQLc7KydoGsdV+Jyu6IQsyQtBUra1gSdoQ3Xt0zluRXUyrhT0/g8fqIlJR+
      IehX8vk8Ri5X2M6zafZ7VUJAwJEkNdgZFMTyW+uzHZKwwwWD0SqM0kpE93l0bu7rzgiB/ZWv
      8OiXv3wPrujuQQhBTW0dc3NzTMZaaJHX+HKtxTvS5vOZOMlkkmg0im3bKLbB6w0GqlAIuG4o
      4FRa0nDoWaanp5mdnsS0bDI5g4b6Ou6qt+j2ePC4dEZHRzdle7j2+fvsDOXw6oJHazRqA4LF
      hE33nIMjJUGXQFGXqPVUQYVP2TJFSNKEh6MOtfFLnPr7/0D3X/+PfPjDv2Z6YuxuXuZdhZQS
      RVEoKS1ldmaG+kSMYlHoAfAogskcmI7kWsym5jb3QUpJzJH8IiMxdx2iqKUd07RZsNeaIkGP
      Rvappzjw/PP38MruHnRdp6OjE3e0mj5Zg67CkSqVA81lJBcS2LaN2+0m6a9j0VLXCL/lSEZF
      Ge07ulicuE4wP48xM8TQ4CBef+juhkF1Xaemto5INLrpFjg5Mcb86HUibsnpKQdXzqErpDC7
      KOmZdxhJOMTzgh3Fd66bAV3gUyWWhENhm0q3SUlmnJ+f7iE9PcxMsjBIQlEEPt/2mDsshFiZ
      EukPBJhYXEQM9XPCkSy6BZUBlek8lKYhcBsFiDuSPgRBRbBgGExdPMej5Lmek0zZkjJdkJYC
      19EXOPDiV9C0ex/+vltwu91IB+byCp54P1GvwGOleOvDk8wtLJJYSLJn3z76Lp9DlyaaUsgb
      JQxIND5HbX0j8XM/w5eZwvSEeea1b5FIJO7/fIC8JbENhw8HTLp8grC/8FDbAwLDlnwy7+D5
      DdioQ66Cj7AMtwrHAnMUJ+Yw5k+Tc2DC8TK970U6Dj2+LZgoVjNoH3rpFT5IpSi6epL9xYWu
      sssxh8ot3JKwpqLmJbUqtM0PI2RhNGuXWzBjSS5mJFptA0ef/tKmFbnrIaUkn89vCxr7lrY2
      /MEg8yEvnsG3qPPbPFWvonbuQlUEVVXV+L75xwxf7yFumcwPXSWbnqYpWopQBDGlmJjtpiQ7
      QW/3VY4++dT9V4DU5U8JZfI0uRUiq5JcMcOmJytoLdGI3OV7HV06nk8rUGhEyJK4+AM+GerB
      V9vBgSNH7+4P/gbQdJ3Hfueb/M3/Osr742MEBDQjtmQGSilJu1y0ua3Cg131lTJNYNiCkXDV
      HUXIbNteYfB70BBCUFVVRXFxMdcsm1DfW8zmVA43NrKcywqHI4QPHcZxHFI7dmOaFsXFxWQy
      GZRQBeGQwsCQwvynn7H/4EP3LxO8fAGTU1O0ZMcpWZeavJiU7C7XqfCK32gH2Co8KlSY0yyO
      92FVdRHcRs6ypmksZAxmPr+IlZFMGJKcS1CqCDKywOmgiZubaCQwWRSmzsmx0RNNCQV9516a
      Wlq2HO9XFAW/f3uYi8tQFIWKuibi/kZOdI+TuPIRs1PjuItKGBkaxMjliMcTuN0eXC4Xbre7
      MKk+WsbA4DCvf/2bNDY2IOUWeoLvNqpbOrkyPk90cXyFQydvO8w4Ki1F97eMQQiBSzhMhZqp
      2CLB1/1CpCTK7Ief0pzMU27CqAroglOLNnNZSU5XKFlnvRU4cSTjuptaYd8Uh/cimS8uoalr
      17aoofp1oSgFSs5ItITS8nKyC3OoU1e4ePpTXJPncA2f4J0TZ+kbn0PTdSKRCLlcjkAwiMfr
      LRQwlleg6/r9T4RpmkbXc6/S/Z+u0akVWNV0RZDNO6RNBV2R6OqNnqrlR3gvHpcQgjlLp7Si
      8h4c/TdDIBjE1dqInLuIAJoXbKbTNl0WeBAMBxTW35UhW7JgZUjhptuxKVcFIXEjL+MAnsDt
      62e+KCh067XQ2NiEbdsckpLRoQEmx8forDOYnJ6l++IZTn70LllL4vMHSC+mCEeiuFxuFtOL
      DyYTHAoVkW/Yhz36EcvWTldQ8NmEScKC5+o0XAqcnbaZWZQcrdcIr+fwuEMsF8otT6mHQnGd
      0fYkFdtQAYQQKD7vSoOLjqBmqb9cAvmcg9TVNSoQR3KsWAMs4hb8MuHQ7NHZvcTv6hJg9lwm
      +9Qz3En9Vz6fR1GUbcvat7wjADS3ddC8xF203NaZy2bRXS4+fv8dFhdiPPOV1xkbG+WXP/nB
      /TeBluEtjjJ56STFioUQAq8qqPcpCEfy7oTNXMyhA4HqgMsvCK1ymG+Xbd4Iy8K/DMOGgcrH
      2fPUy9uSkU4IQc6js3D8JK51FQUCSADnbMm0KlCWhmFPOpLmQOFavIpg1oRh4UI1TFISejMO
      41MJfA0NlFdVMjk5id9/+4k9ywL2RTOblkPMriVKm4bmFtp27GJxcZGFhQVeeOnVu5sIuxNE
      y8pJtT62ZriDANpDKk+WqpSKAmd9vVuhd8rhw3GbnL1xheFWsFr4czacM6PsPPaVDTlptgOk
      lMT7h3Btwn9embOpSpqU+BUIKsx6C4Pofhm3MWWhDMJ0JJrU0GIW1qxFbcJmryHJLxa6C1LJ
      JJMTEyvHHOi+xolf/eom3+FBlpnfTSwrRCQSYefOLlRVfXDVoIqisPuJ57jY/Qld7uya96xV
      D10XcNAlMEzJ59ctpFdwpFrF9RtEisazCs0vfQev9/6XgW8V169eI/O3PyG8ST3ZlYhKZ4lO
      q0csNcYL6jyCq0v0itcNSVhKFswcmqRAVCsEGQHa0o7X1n6D5DaXy3Hi775PUTKBfezYtjV3
      7iaklA9uB4BCKbDWcoCMvcq8ASZyULWO7tutCPZ7FbwZh8Xbc7tuCiklNoUGne2M8d7rFFub
      V1P6FOjyiTWsEBEVdnsF789YzE9ayISDZuYZWHUvvRJSsRtVuMszDj56+xd0zU8TzRuMj47e
      k2vabrjvmeD1EEKw/8Wvc/Hzaoxz79Boz+NWYMp2UypN/BtQpkV1hTOTNjXFCp1hZY0/sBXf
      QAiBIh2cW41WecCwLIv4iVM3UaGshiLXXqeUknHDoR9QNJBCUmpBXLLSDSaB6aIAew/sX/md
      U7/6JQvXrhAZHiCE5GK4lJ2/BhPcFwlSSoaHBjj5ydsPVgGgUDe+78hRUl176T7xHuHu9yh2
      skQ3cUzLNEHIkVyds2kMrU2abdVOzet+PNsgtb8ZhBBMuRyMEpVc2lmKBElcEipzEjeCUNLm
      eELBpyvUuSQpqeD4VZ4vKmTI+hclAz0mlWkbr4SkprF4YDd7X36JsqVehZnJSey336JV2ksD
      J6Bxxw5CRUUP9PrvNYaHBrj40V/QWWo/eAVYRjAU4tCXXuVUqITEL77HguXgcd1soQlRIIOq
      FHB9QdIVuTNfwJZgVO/dVpnf9VBVlfbGWtqcOKxqz007MGRKzhsOPpcghCSA5IQBh0sF9atc
      miINdKBUClK6RvAP3uSxR9cOKFc0DVveoGTPAUX1Db8VDu9mcByH6bEeHm13cOvK9lGAZZTX
      1OErVekbl1R6Cq2EyxgwHEY9CsEijZFJk5cDd/6gcjZ4K5u2/UNuefo5Jq5fpkrcuH6/Ajvd
      goQteaxYQReFBcKTtbEdiZQ3dkHDAdWWzEaKqfr279B56OBN1xwIBjGLimGh4BMkPF7aGxo3
      PJ9UKoXP51sJGUspSafTtyS43S6QUmIYBoP93SzMDlEpzuBemmi/7RTA7XKRECqaaq0Jx1lS
      EivReHF/oaf2Y3eh3PVO0a3U8Mje/XftfO8VauobGNr9ENbFz2472K7Tq3I14eBSFGqWdoGZ
      tEPQgbTPR0PXzg0VfqK/n6Lkwsrf2epaSsvK1nxmmeUtNj+/Ek+HG/MRtjvOnT3J4mwvWn6c
      mlCcKr9AXVVYuO0UQFJoZXP7BEMZmxGgyJFM25KqqhsJO49HcGnWptorqPXfOk4tKUy1nzdV
      wgef/EKE+BRFoePp57nec4m6fHrl9WnTZhGBsq4Mos0j+Gy2QMXoU2F+2qERMKemmRgZoaXj
      5skuQ++/Q4ssZIlNCUW7991UHr6cA6hvaLjr13gvYRgG7779Ixo9V2iOmCiKgA2Cng++GH4d
      kvOzFGk2zWGFi7rClx/1UL/LzStP+AhokulkwSQ42Ohi1x4v3aYgbW68E0hgNgef5cu5UPwQ
      C7tfp3Pf9pkyczuUlZezWL6WmDZmw6GQyvo0yFReEnQr7HCBk5d4l8h5/bZDfHyCDeG/sYKP
      KSode/fe9JEvahIsEY9RJs9SsyL8G2PbLYVGNkNAwJxhs6+ucHo1S91hO8tULk+bXBkV7KrV
      KAkKdjbqfNSb54XStTO6TAd69Dq0fUc4sufAbUf7bFeI9dEwUdgl5RLTtACmTMk0goeCBYHt
      9At+rksqDIeU20VTRcWGxw63tJK5fA6PBLOx+bcq+pOIzxIN3l55t50C5DMpdCEZsQTPVax9
      +ELArgoV05acGjVwalxUhVU+NCQZS+JfmpUlgfN6K4e++ofbOtu7FbiqanGGrq5s1Y6UTOYl
      YVVwLm0TUAQpITi6KhqWsiVpHeL7D9Ly3DM0NDdteOzOg4c43X8d0zTpeObZbdEdd7eQzuSZ
      mhOU3kant50CmItJPCpY9uYOrqYILAluXZDKOoT9gr4Fmz3RgsIkTYG/Y/8XXvgByusbWPgY
      wkuyKYDrebBUwd5IgXvHt84eOhWTJCRUPH6ExpbmTY8dCAZ5/Pf/s5Uamd8mCAGmZSHlrRmu
      t50CZEYuM5izaa28dYWqVxOc7TcxTRuPJWkN36DbUwXks5n7cbr3HPWtbXxeVIIanyGkKSAE
      +4oEDR6WBmbf/HD3hQVC17bE8bkdK2HvBjp3dHFm7B2ESN7yc9tK7WdnZ4mYMaaloLV081MT
      Ag7VauyvEFQKwdESFb++qr9YLaJ5xxeHGOtW8Hg8NHztdzmuujmZl+RUQYNHrJkWD5AwJe/M
      OEwbkqguaNy9l5Jt0Mf7oODxeHCVPUzWuHWofFspgLJEjKVtEPiWq6bxSilJ5yUfdJt0hW7E
      dU0HepICZ9/LlFVsrxbHXxdCCBpaW2nbuYNHy+BwqYJHYU1jD8CFhKTUlsTykj5fFXte/daW
      mR9+W1FR3cxs6ja9DvfpXLaEifExdMekJHTzacWzMBC7QR/SPWOzo9XNhzHJTLYQGh3LqpzW
      22jr2ndfz/t+oOXx55i0tZXw5/rw5L6wwB9SCPtcVD7z+m+F//Obory8gvnsrVtAt5UCBENF
      zOUFHv1mrY14Jc2RGytexnSojagc2uVhyqtxNW5zQa3na998E+23cOWrqq1jsbwZucmOHtIE
      RS6BPPY7NLZ33t+T26ZwuVwoofZN79kD7wdYj2w6RX1ArCS7NoOUEkeoxNKSnimb9lqN04aP
      h5/5CkXFxffpbO8vLNMEI7Pi80puEAbkHBjDCy/8ATseOvKFTFzdCziOg20aK/mhQo+wxHYk
      eVNyZbZ6e0WBFmanaXHDZPbWjosjwZA6EoX99QoLWcmeI88uTbP/7YTb48GoaGG2e5xFR5AL
      lWEVlUDu/2/v3H7juOo4/j0zszt7x+tL6iSOm1BCFDBK1dILfUAtogIkKqGq4qVC4g/gj+GR
      f4AX/gIQF6kPILUVAhXS3KC5gB07juN4vTszO+fGw+Z3Ojvexet47ZndPZ83r8/OObPndzu/
      cwtQuXQVK998GefGdK/XtBCGIdT+HWCxtxTm5kMfonwFSgOu52Ptre9ld0NMmjiO8fGvf4na
      3j3MLXtYHjAOSHK/5eHxC+/CKxRQKflYe+U7U5fLTqOkxJ1bN9GcX8D84qJ530ldrnDSaK2x
      tbmB29c/RcGVWHv1+6jVG32/VW48wKOtTSyEG9gR+sB2yEGs1gVa0RZee/tnM9P5juviyjfy
      cUfyJMAYw/LZ81g+O9wz5sZkfvHxH7BSktj3HDRKhws0Y4Bob/ftF7BYjkpuFEDsbqLgAHqE
      vboBBz7dKuP8K+9N7Uym5XTITQjkLlzA0+111MqDdVJr4PcbS2heuIq51Qt480fXZn6ix3J8
      cqEAUkp42//CvbbGlYv9TaIcrlDAucvX8NrbP86ghZZpJRcKsLe3h739Dh48UVhZ7f/ffhf4
      e/cl1DyB5csXM2mfZXrJhQLs7+3hdugjFCHmUofhMKbhN1fw0rU3cneEuWXyycUg+OHGOli5
      ga8U1IHFvXWfYefB572ZUItlzGTuAbTWUFrhbNXFnGDgCnATarm5D3z73Z9iZfXF7BppmVoy
      9wDdKAL+/QneqzxAARr3dr7M68cS2OJ1zDVnd1275WTJ3AOAMRQdDcjeHcHNigMuNe7uagSN
      q/j6Dz+Yqs3alnyRuQdYv/8F+M46drvAX584kBoouAznGwz+wiXMNednZqmD5fTJXAEazUU8
      Kp+D52gsVSVeeHbcYbXIcGb7j/jL735z4MIGi2VcZK4AW/+5i5f1fxEJjXLZ6RsA+45Avblk
      PYDlxMhcAYLWLhoFjRtPNUqJ2x5CATxofBffev2dDFtnGRWtNcIwRBzHWTflSGSuALSep82A
      N178cmHbnd0iVtfesovdJgjP8yZuT0bmrS035rEvGGoMuPWolwJ93NGov/ohFpfOHPJtS15g
      jPUunp6Ag4eTZK4AjYUldLWL1xcYdp72LsJtdYG5+cGxv5QSnU4HURSddlMtU0jmClCvNxAU
      6ih5Ds67DB99FuPG/Ri3rn82sDwd42eXQlvGQeb+qlqrIaqfAwuf4mLdwaVG74Db3979HFr/
      4IAXcBwH5fL/uz7OYhmdzD2A4zj42jvv4xbvn+198vghtjbXT6xerTWklHaOYcbJXAEAYGHp
      DCpvfoB/xk0jkA23g0cf/Qp/++TP2Hy4gfaz283HBd0bJaUc63Mtk0UuFAAALq9dw6Wf/ALX
      C1/FnnCgugx/uhFh+/EOgiAYe3aBQimbZp1tcnMuEBGGIe7f/Ac2793GTofj/Q9/bmeCLSdG
      7hSA6B1jp6yFtpwouQmB0jDGrPBbTpzcKoDFchpYBbDMNFYBLDONVQDLTGMVwDLTWAWwzDQT
      qQB2HY9lXEycAtD1oPZeAMs4mEgFYIyZtUFCCOsJLM9N5vsBjgpjvf0CQRDAdV07Y2w5FhOh
      ABTyaK0RxzHiOIbjOCiVShO3B9WSLyZCeqSUxuJzzlEul+F5nl0lajk2E6EAJOhxHKNer1ur
      P8PQGFBKOZbQN9eDYK01OOfgnEMIAd/3bbx/SlDYSaFnXoiiyLRpULuo3aOmyXNvSoUQiKII
      juNAKQXOOYrFYtbNmlpoq2hyu2ilUoHv+5mFnJxzcwpIsVhEq9WC1hqe56FYLKJYLPZFCUEQ
      QGuNSqWCUqk09Lla6/wqAOccjDHEcQylFBqNBlzXnbiTxyYJSikHQdD3eRiGcBznRAyPlBKO
      40BKCcYYhBDodrumn8mKB0EAx3H60t4UHQRBAN/34fs+ut1u33e01uYUEfqcIgspZT4VQGuN
      TqdjXrhardpB7wlCk4pxHA89JIBCj3F5AvI0nHMTshzGsDJaa0RRhCiKzBgBAFzXhZQS7Xbb
      pMullKZOIKchkBACrutCKQXP8zJ1v9OOEAJhGEIpZSwwCVEyhhZCmLKO45j+KRaLxjhprc3c
      zDCUUhBCmHQ2gL56nrefk2MCaouUEkII838Koxljpp5cKgCdMdnpdPo6xDI+KLV81Jn0tGDx
      Z5cXktA1m82BfUVWutvt9i1jOeoAO12e6koKdbo8nSYI4EAInSsFIC2mF6G/4zgGYwy+72fc
      wslBa208abLTlVKI4xhhGA4VPvrdDxtvUV8lvYVSauD3yHskrfSwZ4yTwwxnrkaUYRii1WoZ
      C5Fc9mBXfx4Nzjn29/eNpSbCMDSDQ4IEPimco3jcZDkS5EFparo7YFCdo3r2YWnPYWWTbRrm
      GYAceABqiJQSUkoopUwKjnNuXoJG99VqNeMWnz5pqzkKJIiUPXEcB4yxvrx+8nlJYRxV+NPf
      TR9YTDn5drttsnpk1JIW/yj1Url0pECx/aD2pUnWn7kCkGCXSiXjOunHSrpTyvtOA8MEOj2I
      I6IoOjSfnX4eeVGlFFqtlkljJmP+44yrkhacYuzkADiOY3S7XQAwKU4654neb5Qw67A20HuQ
      gh8GKYpZVfzctY8JshqMMZTLZROjUuYn+UOTh5iUuYBkKEeTOfQelPsmxabZbiklarUaOOeI
      ogiu60IIYcrQOIg+I+/oeR48z0MYhibLQnUDPSFMpwmJdAyeVsRhgpW0wJ7nGa+jlEIYhiZt
      Sc9L91s6fBo1JErKQ/KZw0KktGcgZWSMge3u7uosZ1YpH1woFOC6LjqdDrTWKBQKB+JXxphJ
      u00CJAA0n5EMEZJLDUixqVMKhYJJFwL9HVipVEx4SANc13XNoJeyMsPCjFF43rQkpaw55wfu
      ChuWvTkOSYVJG8ZRlep/9QnMjnFNIh8AAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
