<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20181.18.0510.1418                               -->
<workbook source-build='2018.1.1 (20181.18.0510.1418)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SortTagCleanup />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Data (mortalityrates)' inline='true' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='mortalityrates' name='excel-direct.1lminzr1vxudjh1chy39k0isww4p'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/macbook/Desktop/mortalityrates.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
          <named-connection caption='african countries' name='excel-direct.12yn0pf1btutlr1383hcf1dmy61q'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/macbook/Desktop/african countries.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
          <named-connection caption='europe and australia' name='excel-direct.0ldl3ip0dhmv5n17ido6v0rb3csz'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/macbook/Desktop/europe and australia.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.1lminzr1vxudjh1chy39k0isww4p' name='All countries' table='[Data$]' type='table'>
          <columns gridOrigin='A1:BH265:no:A1:BH265:0' header='yes' outcome='2'>
            <column datatype='string' name='Country Name' ordinal='0' />
            <column datatype='string' name='Country Code' ordinal='1' />
            <column datatype='string' name='Indicator Name' ordinal='2' />
            <column datatype='real' name='1960' ordinal='3' />
            <column datatype='real' name='1961' ordinal='4' />
            <column datatype='real' name='1962' ordinal='5' />
            <column datatype='real' name='1963' ordinal='6' />
            <column datatype='real' name='1964' ordinal='7' />
            <column datatype='real' name='1965' ordinal='8' />
            <column datatype='real' name='1966' ordinal='9' />
            <column datatype='real' name='1967' ordinal='10' />
            <column datatype='real' name='1968' ordinal='11' />
            <column datatype='real' name='1969' ordinal='12' />
            <column datatype='real' name='1970' ordinal='13' />
            <column datatype='real' name='1971' ordinal='14' />
            <column datatype='real' name='1972' ordinal='15' />
            <column datatype='real' name='1973' ordinal='16' />
            <column datatype='real' name='1974' ordinal='17' />
            <column datatype='real' name='1975' ordinal='18' />
            <column datatype='real' name='1976' ordinal='19' />
            <column datatype='real' name='1977' ordinal='20' />
            <column datatype='real' name='1978' ordinal='21' />
            <column datatype='real' name='1979' ordinal='22' />
            <column datatype='real' name='1980' ordinal='23' />
            <column datatype='real' name='1981' ordinal='24' />
            <column datatype='real' name='1982' ordinal='25' />
            <column datatype='real' name='1983' ordinal='26' />
            <column datatype='real' name='1984' ordinal='27' />
            <column datatype='real' name='1985' ordinal='28' />
            <column datatype='real' name='1986' ordinal='29' />
            <column datatype='real' name='1987' ordinal='30' />
            <column datatype='real' name='1988' ordinal='31' />
            <column datatype='real' name='1989' ordinal='32' />
            <column datatype='real' name='1990' ordinal='33' />
            <column datatype='real' name='1991' ordinal='34' />
            <column datatype='real' name='1992' ordinal='35' />
            <column datatype='real' name='1993' ordinal='36' />
            <column datatype='real' name='1994' ordinal='37' />
            <column datatype='real' name='1995' ordinal='38' />
            <column datatype='real' name='1996' ordinal='39' />
            <column datatype='real' name='1997' ordinal='40' />
            <column datatype='real' name='1998' ordinal='41' />
            <column datatype='real' name='1999' ordinal='42' />
            <column datatype='real' name='2000' ordinal='43' />
            <column datatype='real' name='2001' ordinal='44' />
            <column datatype='real' name='2002' ordinal='45' />
            <column datatype='real' name='2003' ordinal='46' />
            <column datatype='real' name='2004' ordinal='47' />
            <column datatype='real' name='2005' ordinal='48' />
            <column datatype='real' name='2006' ordinal='49' />
            <column datatype='real' name='2007' ordinal='50' />
            <column datatype='real' name='2008' ordinal='51' />
            <column datatype='real' name='2009' ordinal='52' />
            <column datatype='real' name='2010' ordinal='53' />
            <column datatype='real' name='2011' ordinal='54' />
            <column datatype='real' name='2012' ordinal='55' />
            <column datatype='real' name='2013' ordinal='56' />
            <column datatype='real' name='2014' ordinal='57' />
            <column datatype='real' name='2015' ordinal='58' />
            <column datatype='real' name='2016' ordinal='59' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Country Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country Name]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>Country Name</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country Code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country Code]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>Country Code</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Indicator Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Indicator Name]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>Indicator Name</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1960</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1960]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1960</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1961</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1961]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1961</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1962</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1962]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1962</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1963</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1963]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1963</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1964</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1964]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1964</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1965</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1965]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1965</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1966</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1966]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1966</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1967</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1967]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1967</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1968</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1968]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1968</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1969</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1969]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1969</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1970</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1970]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1970</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1971</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1971]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1971</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1972</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1972]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1972</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1973</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1973]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1973</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1974</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1974]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1974</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1975</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1975]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1975</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1976</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1976]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1976</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1977</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1977]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1977</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1978</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1978]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1978</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1979</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1979]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1979</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1980</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1980]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1980</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1981</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1981]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1981</remote-alias>
            <ordinal>24</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1982</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1982]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1982</remote-alias>
            <ordinal>25</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1983</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1983]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1983</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1984</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1984]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1984</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1985</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1985]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1985</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1986</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1986]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1986</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1987</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1987]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1987</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1988</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1988]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1988</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1989</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1989]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1989</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1990</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1990]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1990</remote-alias>
            <ordinal>33</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1991</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1991]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1991</remote-alias>
            <ordinal>34</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1992</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1992]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1992</remote-alias>
            <ordinal>35</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1993</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1993]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1993</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1994</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1994]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1994</remote-alias>
            <ordinal>37</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1995</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1995]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1995</remote-alias>
            <ordinal>38</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1996</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1996]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1996</remote-alias>
            <ordinal>39</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1997</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1997]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1997</remote-alias>
            <ordinal>40</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1998</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1998]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1998</remote-alias>
            <ordinal>41</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1999</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1999]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1999</remote-alias>
            <ordinal>42</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2000</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2000]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2000</remote-alias>
            <ordinal>43</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2001</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2001]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2001</remote-alias>
            <ordinal>44</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2002</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2002]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2002</remote-alias>
            <ordinal>45</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2003</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2003]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2003</remote-alias>
            <ordinal>46</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2004</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2004]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2004</remote-alias>
            <ordinal>47</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2005</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2005]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2005</remote-alias>
            <ordinal>48</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2006</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2006]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2006</remote-alias>
            <ordinal>49</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2007</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2007]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2007</remote-alias>
            <ordinal>50</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2008</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2008]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2008</remote-alias>
            <ordinal>51</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2009</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2009]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2009</remote-alias>
            <ordinal>52</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2010</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2010]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2010</remote-alias>
            <ordinal>53</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2011</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2011]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2011</remote-alias>
            <ordinal>54</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2012</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2012]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2012</remote-alias>
            <ordinal>55</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2013</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2013]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2013</remote-alias>
            <ordinal>56</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2014</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2014]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2014</remote-alias>
            <ordinal>57</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2015</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2015]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2015</remote-alias>
            <ordinal>58</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2016</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2016]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2016</remote-alias>
            <ordinal>59</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[All countries]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:BH265:no:A1:BH265:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' name='[1960]' role='measure' type='quantitative' />
      <column datatype='real' name='[1961]' role='measure' type='quantitative' />
      <column datatype='real' name='[1962]' role='measure' type='quantitative' />
      <column datatype='real' name='[1963]' role='measure' type='quantitative' />
      <column datatype='real' name='[1964]' role='measure' type='quantitative' />
      <column datatype='real' name='[1965]' role='measure' type='quantitative' />
      <column datatype='real' name='[1966]' role='measure' type='quantitative' />
      <column datatype='real' name='[1967]' role='measure' type='quantitative' />
      <column datatype='real' name='[1968]' role='measure' type='quantitative' />
      <column datatype='real' name='[1969]' role='measure' type='quantitative' />
      <column datatype='real' name='[1970]' role='measure' type='quantitative' />
      <column datatype='real' name='[1971]' role='measure' type='quantitative' />
      <column datatype='real' name='[1972]' role='measure' type='quantitative' />
      <column datatype='real' name='[1973]' role='measure' type='quantitative' />
      <column datatype='real' name='[1974]' role='measure' type='quantitative' />
      <column datatype='real' name='[1975]' role='measure' type='quantitative' />
      <column datatype='real' name='[1976]' role='measure' type='quantitative' />
      <column datatype='real' name='[1977]' role='measure' type='quantitative' />
      <column datatype='real' name='[1978]' role='measure' type='quantitative' />
      <column datatype='real' name='[1979]' role='measure' type='quantitative' />
      <column datatype='real' name='[1980]' role='measure' type='quantitative' />
      <column datatype='real' name='[1981]' role='measure' type='quantitative' />
      <column datatype='real' name='[1982]' role='measure' type='quantitative' />
      <column datatype='real' name='[1983]' role='measure' type='quantitative' />
      <column datatype='real' name='[1984]' role='measure' type='quantitative' />
      <column datatype='real' name='[1985]' role='measure' type='quantitative' />
      <column datatype='real' name='[1986]' role='measure' type='quantitative' />
      <column datatype='real' name='[1987]' role='measure' type='quantitative' />
      <column datatype='real' name='[1988]' role='measure' type='quantitative' />
      <column datatype='real' name='[1989]' role='measure' type='quantitative' />
      <column datatype='real' name='[1990]' role='measure' type='quantitative' />
      <column datatype='real' name='[1991]' role='measure' type='quantitative' />
      <column datatype='real' name='[1992]' role='measure' type='quantitative' />
      <column datatype='real' name='[1993]' role='measure' type='quantitative' />
      <column datatype='real' name='[1994]' role='measure' type='quantitative' />
      <column datatype='real' name='[1995]' role='measure' type='quantitative' />
      <column datatype='real' name='[1996]' role='measure' type='quantitative' />
      <column datatype='real' name='[1997]' role='measure' type='quantitative' />
      <column datatype='real' name='[1998]' role='measure' type='quantitative' />
      <column datatype='real' name='[1999]' role='measure' type='quantitative' />
      <column datatype='real' name='[2000]' role='measure' type='quantitative' />
      <column datatype='real' name='[2001]' role='measure' type='quantitative' />
      <column datatype='real' name='[2002]' role='measure' type='quantitative' />
      <column datatype='real' name='[2003]' role='measure' type='quantitative' />
      <column datatype='real' name='[2004]' role='measure' type='quantitative' />
      <column datatype='real' name='[2005]' role='measure' type='quantitative' />
      <column datatype='real' name='[2006]' role='measure' type='quantitative' />
      <column datatype='real' name='[2007]' role='measure' type='quantitative' />
      <column datatype='real' name='[2008]' role='measure' type='quantitative' />
      <column datatype='real' name='[2009]' role='measure' type='quantitative' />
      <column datatype='real' name='[2010]' role='measure' type='quantitative' />
      <column datatype='real' name='[2011]' role='measure' type='quantitative' />
      <column datatype='real' name='[2012]' role='measure' type='quantitative' />
      <column datatype='real' name='[2013]' role='measure' type='quantitative' />
      <column datatype='real' name='[2014]' role='measure' type='quantitative' />
      <column datatype='real' name='[2015]' role='measure' type='quantitative' />
      <column datatype='real' name='[2016]' role='measure' type='quantitative' />
      <column caption='Percentage decrease2000-2016' datatype='real' name='[Calculation_251427529587380224]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='((SUM([2000])-SUM([2016]))/SUM([2000]))*100' />
      </column>
      <column caption='Percentage decrease1960-2016' datatype='real' name='[Calculation_299137538176614400]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='((SUM([1960])-SUM([2016]))/SUM([1960]))*100' />
      </column>
      <column caption='Percentage decrease60-80' datatype='real' name='[Calculation_477170460220043275]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='((SUM([1960])-SUM([1980]))/SUM([1960]))*100' />
      </column>
      <column caption='Percentage decrease80-2000' datatype='real' name='[Calculation_620159748490080258]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='((SUM([1980])-SUM([2000]))/SUM([1980]))*100' />
      </column>
      <column datatype='string' name='[Country Code]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column-instance column='[1960]' derivation='Avg' name='[avg:1960:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[diff:usr:Calculation_477170460220043275:qk:2]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='CellInPane' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[diff:usr:Calculation_477170460220043275:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Columns' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
      <column-instance column='[1960]' derivation='Sum' name='[pcto:sum:1960:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1960]' derivation='Sum' name='[pcto:sum:1960:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1961]' derivation='Sum' name='[pcto:sum:1961:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1961]' derivation='Sum' name='[pcto:sum:1961:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1962]' derivation='Sum' name='[pcto:sum:1962:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1962]' derivation='Sum' name='[pcto:sum:1962:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1963]' derivation='Sum' name='[pcto:sum:1963:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1963]' derivation='Sum' name='[pcto:sum:1963:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1964]' derivation='Sum' name='[pcto:sum:1964:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1964]' derivation='Sum' name='[pcto:sum:1964:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1965]' derivation='Sum' name='[pcto:sum:1965:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1965]' derivation='Sum' name='[pcto:sum:1965:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1966]' derivation='Sum' name='[pcto:sum:1966:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1966]' derivation='Sum' name='[pcto:sum:1966:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1967]' derivation='Sum' name='[pcto:sum:1967:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1967]' derivation='Sum' name='[pcto:sum:1967:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1968]' derivation='Sum' name='[pcto:sum:1968:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1968]' derivation='Sum' name='[pcto:sum:1968:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1969]' derivation='Sum' name='[pcto:sum:1969:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1969]' derivation='Sum' name='[pcto:sum:1969:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1970]' derivation='Sum' name='[pcto:sum:1970:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1970]' derivation='Sum' name='[pcto:sum:1970:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1961]' derivation='Sum' name='[sum:1961:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1962]' derivation='Sum' name='[sum:1962:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1963]' derivation='Sum' name='[sum:1963:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1964]' derivation='Sum' name='[sum:1964:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1965]' derivation='Sum' name='[sum:1965:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1966]' derivation='Sum' name='[sum:1966:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1967]' derivation='Sum' name='[sum:1967:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1968]' derivation='Sum' name='[sum:1968:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1969]' derivation='Sum' name='[sum:1969:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1970]' derivation='Sum' name='[sum:1970:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1971]' derivation='Sum' name='[sum:1971:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1972]' derivation='Sum' name='[sum:1972:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1973]' derivation='Sum' name='[sum:1973:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1974]' derivation='Sum' name='[sum:1974:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1975]' derivation='Sum' name='[sum:1975:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1976]' derivation='Sum' name='[sum:1976:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1977]' derivation='Sum' name='[sum:1977:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1978]' derivation='Sum' name='[sum:1978:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1979]' derivation='Sum' name='[sum:1979:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1980]' derivation='Sum' name='[sum:1980:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1981]' derivation='Sum' name='[sum:1981:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1982]' derivation='Sum' name='[sum:1982:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1983]' derivation='Sum' name='[sum:1983:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1984]' derivation='Sum' name='[sum:1984:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1985]' derivation='Sum' name='[sum:1985:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1986]' derivation='Sum' name='[sum:1986:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1987]' derivation='Sum' name='[sum:1987:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1988]' derivation='Sum' name='[sum:1988:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1989]' derivation='Sum' name='[sum:1989:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1990]' derivation='Sum' name='[sum:1990:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1991]' derivation='Sum' name='[sum:1991:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1992]' derivation='Sum' name='[sum:1992:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1993]' derivation='Sum' name='[sum:1993:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1994]' derivation='Sum' name='[sum:1994:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1995]' derivation='Sum' name='[sum:1995:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1996]' derivation='Sum' name='[sum:1996:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1997]' derivation='Sum' name='[sum:1997:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1998]' derivation='Sum' name='[sum:1998:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1999]' derivation='Sum' name='[sum:1999:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2000]' derivation='Sum' name='[sum:2000:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2001]' derivation='Sum' name='[sum:2001:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2002]' derivation='Sum' name='[sum:2002:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2003]' derivation='Sum' name='[sum:2003:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2004]' derivation='Sum' name='[sum:2004:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2005]' derivation='Sum' name='[sum:2005:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2006]' derivation='Sum' name='[sum:2006:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2007]' derivation='Sum' name='[sum:2007:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2008]' derivation='Sum' name='[sum:2008:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2009]' derivation='Sum' name='[sum:2009:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2010]' derivation='Sum' name='[sum:2010:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2011]' derivation='Sum' name='[sum:2011:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2012]' derivation='Sum' name='[sum:2012:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2013]' derivation='Sum' name='[sum:2013:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2014]' derivation='Sum' name='[sum:2014:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2015]' derivation='Sum' name='[sum:2015:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2016]' derivation='Sum' name='[sum:2016:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_299137538176614400]' derivation='User' name='[usr:Calculation_299137538176614400:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[usr:Calculation_477170460220043275:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.169043' measure-ordering='alphabetic' measure-percentage='0.830957' show-structure='true' user-set-layout='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Country Name:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Middle East &amp; North Africa&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;South Asia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Caribbean small states&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Central Europe and the Baltics&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Latin America &amp; Caribbean&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sub-Saharan Africa (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Syrian Arab Republic&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Korea, Dem. People’s Rep.&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Late-demographic dividend&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Not classified&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Arab World&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Early-demographic dividend&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;High income&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;IDA total&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Other small states&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Heavily indebted poor countries (HIPC)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Post-demographic dividend&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;South Asia (IDA &amp; IBRD)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;St. Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Northern Mariana Islands&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;East Asia &amp; Pacific&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Euro area&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Low income&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lower middle income&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;St. Martin (French part)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Venezuela, RB&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Europe &amp; Central Asia (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Macedonia, FYR&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Middle East &amp; North Africa (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sint Maarten (Dutch part)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sub-Saharan Africa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Swaziland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;East Asia &amp; Pacific (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kyrgyz Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pacific island small states&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;IDA &amp; IBRD total&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Virgin Islands (U.S.)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bahamas, The&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Fragile and conflict affected situations&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Iran, Islamic Rep.&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Latin America &amp; Caribbean (excluding high income)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Macao SAR, China&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;OECD members&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;European Union&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Latin America &amp; the Caribbean (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;IDA only&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Korea, Rep.&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Small states&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;St. Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sub-Saharan Africa (excluding high income)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Upper middle income&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Congo, Dem. Rep.&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hong Kong SAR, China&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;St. Lucia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;West Bank and Gaza&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Gambia, The&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Low &amp; middle income&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Europe &amp; Central Asia (excluding high income)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;IDA blend&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lao PDR&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Least developed countries: UN classification&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Pre-demographic dividend&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Congo, Rep.&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;East Asia &amp; Pacific (excluding high income)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Europe &amp; Central Asia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Faroe Islands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Middle income&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;IBRD only&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Micronesia, Fed. Sts.&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Slovak Republic&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Egypt, Arab Rep.&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Middle East &amp; North Africa (excluding high income)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Russian Federation&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Yemen, Rep.&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1968:qk:1]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1968:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1968:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1988:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2008:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[avg:1960:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[diff:usr:Calculation_477170460220043275:qk:2]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[diff:usr:Calculation_477170460220043275:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1960:qk:1]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1960:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_299137538176614400:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1964:qk:1]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1964:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1964:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1984:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2004:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1972:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1992:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2011:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1969:qk:1]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1969:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1969:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1989:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2009:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1965:qk:1]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1965:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1965:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1985:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2005:qk]&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1978:qk]&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1998:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1961:qk:1]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1961:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1961:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1981:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2001:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1976:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1996:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2015:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1966:qk:1]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1966:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1966:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1986:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2006:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1973:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1993:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2012:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1974:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1994:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2013:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1977:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1997:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1979:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1999:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1970:qk:1]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1970:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1990:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1967:qk:1]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1967:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1967:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1987:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2007:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1962:qk:1]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1962:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1962:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1982:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2002:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1975:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1995:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2014:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1971:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1991:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2010:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_47287801348087813:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460218281988:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1963:qk:1]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1963:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1963:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1983:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2003:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='1960-2016'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='real' name='[2016]' role='measure' type='quantitative' />
            <column caption='Percentage decrease1960-2016' datatype='real' name='[Calculation_299137538176614400]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='((SUM([1960])-SUM([2016]))/SUM([1960]))*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_299137538176614400]' derivation='User' name='[usr:Calculation_299137538176614400:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' included-values='non-null' />
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_299137538176614400:qk]' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_299137538176614400:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_299137538176614400:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
            <format attr='break-on-special' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_299137538176614400:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='1960-80'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='real' name='[1961]' role='measure' type='quantitative' />
            <column datatype='real' name='[1962]' role='measure' type='quantitative' />
            <column datatype='real' name='[1963]' role='measure' type='quantitative' />
            <column datatype='real' name='[1964]' role='measure' type='quantitative' />
            <column datatype='real' name='[1965]' role='measure' type='quantitative' />
            <column datatype='real' name='[1966]' role='measure' type='quantitative' />
            <column datatype='real' name='[1967]' role='measure' type='quantitative' />
            <column datatype='real' name='[1968]' role='measure' type='quantitative' />
            <column datatype='real' name='[1969]' role='measure' type='quantitative' />
            <column datatype='real' name='[1970]' role='measure' type='quantitative' />
            <column datatype='real' name='[1971]' role='measure' type='quantitative' />
            <column datatype='real' name='[1972]' role='measure' type='quantitative' />
            <column datatype='real' name='[1973]' role='measure' type='quantitative' />
            <column datatype='real' name='[1974]' role='measure' type='quantitative' />
            <column datatype='real' name='[1975]' role='measure' type='quantitative' />
            <column datatype='real' name='[1976]' role='measure' type='quantitative' />
            <column datatype='real' name='[1977]' role='measure' type='quantitative' />
            <column datatype='real' name='[1978]' role='measure' type='quantitative' />
            <column datatype='real' name='[1979]' role='measure' type='quantitative' />
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1961]' derivation='Sum' name='[sum:1961:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1962]' derivation='Sum' name='[sum:1962:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1963]' derivation='Sum' name='[sum:1963:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1964]' derivation='Sum' name='[sum:1964:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1965]' derivation='Sum' name='[sum:1965:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1966]' derivation='Sum' name='[sum:1966:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1967]' derivation='Sum' name='[sum:1967:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1968]' derivation='Sum' name='[sum:1968:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1969]' derivation='Sum' name='[sum:1969:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1970]' derivation='Sum' name='[sum:1970:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1971]' derivation='Sum' name='[sum:1971:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1972]' derivation='Sum' name='[sum:1972:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1973]' derivation='Sum' name='[sum:1973:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1974]' derivation='Sum' name='[sum:1974:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1975]' derivation='Sum' name='[sum:1975:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1976]' derivation='Sum' name='[sum:1976:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1977]' derivation='Sum' name='[sum:1977:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1978]' derivation='Sum' name='[sum:1978:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1979]' derivation='Sum' name='[sum:1979:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1980]' derivation='Sum' name='[sum:1980:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1961:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1962:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1963:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1964:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1965:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1966:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1967:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1968:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1969:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1971:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1972:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1973:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1974:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1975:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1976:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1977:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1978:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1979:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1961:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1962:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1963:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1964:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1965:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1966:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1967:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1968:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1969:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1971:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1972:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1973:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1974:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1975:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1976:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1977:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1978:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1979:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country Name:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;American Samoa&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Andorra&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bermuda&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;British Virgin Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cayman Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Dominica&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Faroe Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Germany&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gibraltar&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Greenland&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Isle of Man&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kosovo&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liechtenstein&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Marshall Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Monaco&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nauru&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Northern Mariana Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Not classified&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Palau&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;San Marino&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sint Maarten (Dutch part)&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Slovenia&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;St. Kitts and Nevis&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;St. Martin (French part)&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Turks and Caicos Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tuvalu&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;West Bank and Gaza&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1961:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1962:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1963:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1964:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1965:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1966:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1967:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1968:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1969:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1971:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1972:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1973:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1974:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1975:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1976:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1977:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1978:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1979:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1961:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1962:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1963:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1964:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1965:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1966:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1967:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1968:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1969:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1971:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1972:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1973:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1974:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1975:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1976:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1977:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1978:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1979:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Multiple Values]</rows>
        <cols>([federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk] / [federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='1960-80 mortality decrease'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column caption='Percentage decrease60-80' datatype='real' name='[Calculation_477170460220043275]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='((SUM([1960])-SUM([1980]))/SUM([1960]))*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[usr:Calculation_477170460220043275:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Aruba&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belize&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Brunei Darussalam&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Burkina Faso&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cabo Verde&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Costa Rica&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cuba&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gabon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guam&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Hong Kong SAR, China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Korea, Dem. People’s Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liberia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Libya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Macao SAR, China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mali&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;New Caledonia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Papua New Guinea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Peru&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Syrian Arab Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Virgin Islands (U.S.)&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' palette='green_blue_white_diverging_10_0' type='interpolated' />
            <encoding attr='size-bar' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
          <style-rule element='refband'>
            <format attr='reverse-palette' id='refline1' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='1980-2000'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column datatype='real' name='[1981]' role='measure' type='quantitative' />
            <column datatype='real' name='[1982]' role='measure' type='quantitative' />
            <column datatype='real' name='[1983]' role='measure' type='quantitative' />
            <column datatype='real' name='[1984]' role='measure' type='quantitative' />
            <column datatype='real' name='[1985]' role='measure' type='quantitative' />
            <column datatype='real' name='[1986]' role='measure' type='quantitative' />
            <column datatype='real' name='[1987]' role='measure' type='quantitative' />
            <column datatype='real' name='[1988]' role='measure' type='quantitative' />
            <column datatype='real' name='[1989]' role='measure' type='quantitative' />
            <column datatype='real' name='[1990]' role='measure' type='quantitative' />
            <column datatype='real' name='[1991]' role='measure' type='quantitative' />
            <column datatype='real' name='[1992]' role='measure' type='quantitative' />
            <column datatype='real' name='[1993]' role='measure' type='quantitative' />
            <column datatype='real' name='[1994]' role='measure' type='quantitative' />
            <column datatype='real' name='[1995]' role='measure' type='quantitative' />
            <column datatype='real' name='[1996]' role='measure' type='quantitative' />
            <column datatype='real' name='[1997]' role='measure' type='quantitative' />
            <column datatype='real' name='[1998]' role='measure' type='quantitative' />
            <column datatype='real' name='[1999]' role='measure' type='quantitative' />
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1980]' derivation='Sum' name='[sum:1980:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1981]' derivation='Sum' name='[sum:1981:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1982]' derivation='Sum' name='[sum:1982:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1983]' derivation='Sum' name='[sum:1983:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1984]' derivation='Sum' name='[sum:1984:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1985]' derivation='Sum' name='[sum:1985:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1986]' derivation='Sum' name='[sum:1986:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1987]' derivation='Sum' name='[sum:1987:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1988]' derivation='Sum' name='[sum:1988:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1989]' derivation='Sum' name='[sum:1989:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1990]' derivation='Sum' name='[sum:1990:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1991]' derivation='Sum' name='[sum:1991:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1992]' derivation='Sum' name='[sum:1992:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1993]' derivation='Sum' name='[sum:1993:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1994]' derivation='Sum' name='[sum:1994:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1995]' derivation='Sum' name='[sum:1995:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1996]' derivation='Sum' name='[sum:1996:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1997]' derivation='Sum' name='[sum:1997:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1998]' derivation='Sum' name='[sum:1998:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1999]' derivation='Sum' name='[sum:1999:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2000]' derivation='Sum' name='[sum:2000:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1981:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1982:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1983:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1984:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1985:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1986:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1987:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1988:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1989:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1990:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1991:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1992:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1993:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1994:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1995:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1996:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1997:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1998:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1999:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country Name:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;American Samoa&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Andorra&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bermuda&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;British Virgin Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cayman Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Faroe Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gibraltar&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Isle of Man&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kosovo&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liechtenstein&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Monaco&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nauru&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Northern Mariana Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Not classified&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Palau&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;San Marino&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sint Maarten (Dutch part)&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;St. Martin (French part)&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Turks and Caicos Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tuvalu&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1981:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1982:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1983:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1984:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1985:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1986:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1987:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1988:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1989:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1990:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1991:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1992:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1993:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1994:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1995:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1996:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1997:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1998:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1999:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1981:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1982:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1983:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1984:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1985:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1986:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1987:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1988:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1989:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1990:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1991:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1992:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1993:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1994:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1995:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1996:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1997:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1998:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1999:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Multiple Values]</rows>
        <cols>([federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk] / [federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='2000-2016'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column datatype='real' name='[2001]' role='measure' type='quantitative' />
            <column datatype='real' name='[2002]' role='measure' type='quantitative' />
            <column datatype='real' name='[2003]' role='measure' type='quantitative' />
            <column datatype='real' name='[2004]' role='measure' type='quantitative' />
            <column datatype='real' name='[2005]' role='measure' type='quantitative' />
            <column datatype='real' name='[2006]' role='measure' type='quantitative' />
            <column datatype='real' name='[2007]' role='measure' type='quantitative' />
            <column datatype='real' name='[2008]' role='measure' type='quantitative' />
            <column datatype='real' name='[2009]' role='measure' type='quantitative' />
            <column datatype='real' name='[2010]' role='measure' type='quantitative' />
            <column datatype='real' name='[2011]' role='measure' type='quantitative' />
            <column datatype='real' name='[2012]' role='measure' type='quantitative' />
            <column datatype='real' name='[2013]' role='measure' type='quantitative' />
            <column datatype='real' name='[2014]' role='measure' type='quantitative' />
            <column datatype='real' name='[2015]' role='measure' type='quantitative' />
            <column datatype='real' name='[2016]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[2000]' derivation='Sum' name='[sum:2000:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2001]' derivation='Sum' name='[sum:2001:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2002]' derivation='Sum' name='[sum:2002:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2003]' derivation='Sum' name='[sum:2003:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2004]' derivation='Sum' name='[sum:2004:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2005]' derivation='Sum' name='[sum:2005:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2006]' derivation='Sum' name='[sum:2006:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2007]' derivation='Sum' name='[sum:2007:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2008]' derivation='Sum' name='[sum:2008:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2009]' derivation='Sum' name='[sum:2009:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2010]' derivation='Sum' name='[sum:2010:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2011]' derivation='Sum' name='[sum:2011:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2012]' derivation='Sum' name='[sum:2012:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2013]' derivation='Sum' name='[sum:2013:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2014]' derivation='Sum' name='[sum:2014:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2015]' derivation='Sum' name='[sum:2015:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2016]' derivation='Sum' name='[sum:2016:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2001:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2002:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2003:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2004:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2005:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2006:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2007:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2008:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2009:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2010:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2011:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2012:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2013:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2014:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2015:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2001:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2002:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2003:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2004:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2005:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2006:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2007:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2008:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2009:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2010:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2011:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2012:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2013:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2014:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2015:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2001:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2002:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2003:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2004:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2005:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2006:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2007:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2008:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2009:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2010:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2011:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2012:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2013:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2014:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2015:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Multiple Values]</rows>
        <cols>([federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk] / [federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='2016'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[2016]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[2016]' derivation='Sum' name='[sum:2016:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' included-values='non-null' />
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' field-type='quantitative' max='18154227.988292515' min='-10247014.45307721' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' field-type='quantitative' max='11091350.987841807' min='-7673055.9961514417' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]' num-steps='15' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
            <format attr='break-on-special' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Africa 2016'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[2016]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[2016]' derivation='Sum' name='[sum:2016:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' filter-group='3'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Algeria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Angola&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Benin&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Burkina Faso&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Burundi&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cameroon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Central African Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Chad&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Comoros&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Congo, Dem. Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Congo, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cote d&apos;Ivoire&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Djibouti&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Egypt, Arab Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Equatorial Guinea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Eritrea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gabon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gambia, The&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ghana&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guinea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guinea-Bissau&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kenya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lesotho&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liberia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Libya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Madagascar&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Malawi&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mali&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mauritania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Morocco&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mozambique&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Namibia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Niger&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Rwanda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sao Tome and Principe&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Senegal&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Seychelles&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sierra Leone&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Somalia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;South Sudan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sudan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Swaziland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tanzania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Togo&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Uganda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zambia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]' num-steps='15' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='African mortality rate'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' filter-group='3'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Algeria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Angola&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Benin&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Burkina Faso&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Burundi&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cameroon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Central African Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Chad&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Comoros&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Congo, Dem. Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Congo, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cote d&apos;Ivoire&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Djibouti&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Egypt, Arab Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Equatorial Guinea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Eritrea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gabon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gambia, The&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ghana&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guinea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guinea-Bissau&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kenya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lesotho&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liberia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Libya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Madagascar&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Malawi&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mali&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mauritania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Morocco&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mozambique&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Namibia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Niger&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Rwanda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sao Tome and Principe&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Senegal&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Seychelles&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sierra Leone&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Somalia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;South Sudan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sudan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Swaziland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tanzania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Togo&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Uganda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zambia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' num-steps='15' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='China 1960-1980'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='real' name='[1961]' role='measure' type='quantitative' />
            <column datatype='real' name='[1962]' role='measure' type='quantitative' />
            <column datatype='real' name='[1963]' role='measure' type='quantitative' />
            <column datatype='real' name='[1964]' role='measure' type='quantitative' />
            <column datatype='real' name='[1965]' role='measure' type='quantitative' />
            <column datatype='real' name='[1966]' role='measure' type='quantitative' />
            <column datatype='real' name='[1967]' role='measure' type='quantitative' />
            <column datatype='real' name='[1968]' role='measure' type='quantitative' />
            <column datatype='real' name='[1969]' role='measure' type='quantitative' />
            <column datatype='real' name='[1970]' role='measure' type='quantitative' />
            <column datatype='real' name='[1971]' role='measure' type='quantitative' />
            <column datatype='real' name='[1972]' role='measure' type='quantitative' />
            <column datatype='real' name='[1973]' role='measure' type='quantitative' />
            <column datatype='real' name='[1974]' role='measure' type='quantitative' />
            <column datatype='real' name='[1975]' role='measure' type='quantitative' />
            <column datatype='real' name='[1976]' role='measure' type='quantitative' />
            <column datatype='real' name='[1977]' role='measure' type='quantitative' />
            <column datatype='real' name='[1978]' role='measure' type='quantitative' />
            <column datatype='real' name='[1979]' role='measure' type='quantitative' />
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1961]' derivation='Sum' name='[sum:1961:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1962]' derivation='Sum' name='[sum:1962:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1963]' derivation='Sum' name='[sum:1963:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1964]' derivation='Sum' name='[sum:1964:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1965]' derivation='Sum' name='[sum:1965:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1966]' derivation='Sum' name='[sum:1966:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1967]' derivation='Sum' name='[sum:1967:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1968]' derivation='Sum' name='[sum:1968:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1969]' derivation='Sum' name='[sum:1969:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1970]' derivation='Sum' name='[sum:1970:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1971]' derivation='Sum' name='[sum:1971:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1972]' derivation='Sum' name='[sum:1972:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1973]' derivation='Sum' name='[sum:1973:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1974]' derivation='Sum' name='[sum:1974:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1975]' derivation='Sum' name='[sum:1975:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1976]' derivation='Sum' name='[sum:1976:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1977]' derivation='Sum' name='[sum:1977:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1978]' derivation='Sum' name='[sum:1978:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1979]' derivation='Sum' name='[sum:1979:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1980]' derivation='Sum' name='[sum:1980:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1961:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1962:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1963:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1964:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1965:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1966:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1967:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1968:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1969:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1971:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1972:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1973:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1974:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1975:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1976:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1977:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1978:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1979:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;China&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Multiple Values]</rows>
        <cols>([federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk] / [federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='Decrease mortality 1980-2000'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column caption='Percentage decrease80-2000' datatype='real' name='[Calculation_620159748490080258]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='((SUM([1980])-SUM([2000]))/SUM([1980]))*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_620159748490080258]' derivation='User' name='[usr:Calculation_620159748490080258:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Algeria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Brunei Darussalam&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cabo Verde&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Channel Islands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Chile&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guam&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Honduras&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Hong Kong SAR, China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iran, Islamic Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iraq&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Korea, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Macao SAR, China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Morocco&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;New Caledonia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Samoa&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Timor-Leste&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Vanuatu&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Virgin Islands (U.S.)&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Europe and Australia'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Albania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Andorra&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bosnia and Herzegovina&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Channel Islands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Estonia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Faroe Islands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iceland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Isle of Man&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kosovo&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liechtenstein&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Luxembourg&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Macedonia, FYR&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Moldova&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Monaco&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Montenegro&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Portugal&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;San Marino&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Serbia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;United Kingdom&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' num-steps='15' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Increase Mortality2000-2016'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column datatype='real' name='[2016]' role='measure' type='quantitative' />
            <column caption='Percentage decrease2000-2016' datatype='real' name='[Calculation_251427529587380224]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='((SUM([2000])-SUM([2016]))/SUM([2000]))*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_251427529587380224]' derivation='User' name='[usr:Calculation_251427529587380224:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Georgia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Libya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Syrian Arab Republic&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_251427529587380224:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#e15759' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_251427529587380224:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Increase in mortality1980-2000'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column caption='Percentage decrease80-2000' datatype='real' name='[Calculation_620159748490080258]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='((SUM([1980])-SUM([2000]))/SUM([1980]))*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_620159748490080258]' derivation='User' name='[usr:Calculation_620159748490080258:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Armenia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belize&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cameroon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Central African Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Congo, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cote d&apos;Ivoire&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Jamaica&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kazakhstan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kenya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lesotho&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Malawi&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mongolia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Namibia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Russian Federation&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Rwanda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sierra Leone&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Swaziland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tajikistan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tanzania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Uganda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zambia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]' num-steps='15' palette='orange_blue_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Iran 1980-2000'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column datatype='real' name='[1981]' role='measure' type='quantitative' />
            <column datatype='real' name='[1982]' role='measure' type='quantitative' />
            <column datatype='real' name='[1983]' role='measure' type='quantitative' />
            <column datatype='real' name='[1984]' role='measure' type='quantitative' />
            <column datatype='real' name='[1985]' role='measure' type='quantitative' />
            <column datatype='real' name='[1986]' role='measure' type='quantitative' />
            <column datatype='real' name='[1987]' role='measure' type='quantitative' />
            <column datatype='real' name='[1988]' role='measure' type='quantitative' />
            <column datatype='real' name='[1989]' role='measure' type='quantitative' />
            <column datatype='real' name='[1990]' role='measure' type='quantitative' />
            <column datatype='real' name='[1991]' role='measure' type='quantitative' />
            <column datatype='real' name='[1992]' role='measure' type='quantitative' />
            <column datatype='real' name='[1993]' role='measure' type='quantitative' />
            <column datatype='real' name='[1994]' role='measure' type='quantitative' />
            <column datatype='real' name='[1995]' role='measure' type='quantitative' />
            <column datatype='real' name='[1996]' role='measure' type='quantitative' />
            <column datatype='real' name='[1997]' role='measure' type='quantitative' />
            <column datatype='real' name='[1998]' role='measure' type='quantitative' />
            <column datatype='real' name='[1999]' role='measure' type='quantitative' />
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1980]' derivation='Sum' name='[sum:1980:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1981]' derivation='Sum' name='[sum:1981:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1982]' derivation='Sum' name='[sum:1982:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1983]' derivation='Sum' name='[sum:1983:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1984]' derivation='Sum' name='[sum:1984:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1985]' derivation='Sum' name='[sum:1985:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1986]' derivation='Sum' name='[sum:1986:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1987]' derivation='Sum' name='[sum:1987:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1988]' derivation='Sum' name='[sum:1988:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1989]' derivation='Sum' name='[sum:1989:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1990]' derivation='Sum' name='[sum:1990:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1991]' derivation='Sum' name='[sum:1991:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1992]' derivation='Sum' name='[sum:1992:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1993]' derivation='Sum' name='[sum:1993:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1994]' derivation='Sum' name='[sum:1994:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1995]' derivation='Sum' name='[sum:1995:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1996]' derivation='Sum' name='[sum:1996:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1997]' derivation='Sum' name='[sum:1997:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1998]' derivation='Sum' name='[sum:1998:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1999]' derivation='Sum' name='[sum:1999:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2000]' derivation='Sum' name='[sum:2000:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1981:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1982:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1983:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1984:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1985:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1986:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1987:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1988:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1989:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1990:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1991:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1992:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1993:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1994:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1995:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1996:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1997:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1998:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1999:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iran, Islamic Rep.&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Multiple Values]</rows>
        <cols>([federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk] / [federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='Mortality decrease 2000-2016'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column datatype='real' name='[2016]' role='measure' type='quantitative' />
            <column caption='Percentage decrease2000-2016' datatype='real' name='[Calculation_251427529587380224]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='((SUM([2000])-SUM([2016]))/SUM([2000]))*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_251427529587380224]' derivation='User' name='[usr:Calculation_251427529587380224:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' included-values='non-null' />
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Albania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Algeria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Angola&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Channel Islands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Congo, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;French Polynesia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guam&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iran, Islamic Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kenya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Korea, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Macao SAR, China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Malawi&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Montenegro&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Morocco&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Puerto Rico&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Rwanda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Samoa&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tanzania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Timor-Leste&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Uganda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zambia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_251427529587380224:qk]' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_251427529587380224:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_251427529587380224:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_251427529587380224:qk]' palette='green_blue_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
            <format attr='break-on-special' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_251427529587380224:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Mortality increase 1960-80'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column caption='Percentage decrease60-80' datatype='real' name='[Calculation_477170460220043275]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='((SUM([1960])-SUM([1980]))/SUM([1960]))*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[usr:Calculation_477170460220043275:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;El Salvador&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Estonia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iran, Islamic Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Russian Federation&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Slovak Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ukraine&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Syria 2000-2016'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column datatype='real' name='[2001]' role='measure' type='quantitative' />
            <column datatype='real' name='[2002]' role='measure' type='quantitative' />
            <column datatype='real' name='[2003]' role='measure' type='quantitative' />
            <column datatype='real' name='[2004]' role='measure' type='quantitative' />
            <column datatype='real' name='[2005]' role='measure' type='quantitative' />
            <column datatype='real' name='[2006]' role='measure' type='quantitative' />
            <column datatype='real' name='[2007]' role='measure' type='quantitative' />
            <column datatype='real' name='[2008]' role='measure' type='quantitative' />
            <column datatype='real' name='[2009]' role='measure' type='quantitative' />
            <column datatype='real' name='[2010]' role='measure' type='quantitative' />
            <column datatype='real' name='[2011]' role='measure' type='quantitative' />
            <column datatype='real' name='[2012]' role='measure' type='quantitative' />
            <column datatype='real' name='[2013]' role='measure' type='quantitative' />
            <column datatype='real' name='[2014]' role='measure' type='quantitative' />
            <column datatype='real' name='[2015]' role='measure' type='quantitative' />
            <column datatype='real' name='[2016]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[2000]' derivation='Sum' name='[sum:2000:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2001]' derivation='Sum' name='[sum:2001:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2002]' derivation='Sum' name='[sum:2002:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2003]' derivation='Sum' name='[sum:2003:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2004]' derivation='Sum' name='[sum:2004:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2005]' derivation='Sum' name='[sum:2005:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2006]' derivation='Sum' name='[sum:2006:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2007]' derivation='Sum' name='[sum:2007:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2008]' derivation='Sum' name='[sum:2008:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2009]' derivation='Sum' name='[sum:2009:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2010]' derivation='Sum' name='[sum:2010:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2011]' derivation='Sum' name='[sum:2011:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2012]' derivation='Sum' name='[sum:2012:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2013]' derivation='Sum' name='[sum:2013:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2014]' derivation='Sum' name='[sum:2014:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2015]' derivation='Sum' name='[sum:2015:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2016]' derivation='Sum' name='[sum:2016:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2001:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2002:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2003:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2004:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2005:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2006:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2007:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2008:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2009:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2010:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2011:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2012:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2013:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2014:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2015:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Syrian Arab Republic&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Multiple Values]</rows>
        <cols>([federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk] / [federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='Zimbabwe, Botswana 1980-2000'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column datatype='real' name='[1981]' role='measure' type='quantitative' />
            <column datatype='real' name='[1982]' role='measure' type='quantitative' />
            <column datatype='real' name='[1983]' role='measure' type='quantitative' />
            <column datatype='real' name='[1984]' role='measure' type='quantitative' />
            <column datatype='real' name='[1985]' role='measure' type='quantitative' />
            <column datatype='real' name='[1986]' role='measure' type='quantitative' />
            <column datatype='real' name='[1987]' role='measure' type='quantitative' />
            <column datatype='real' name='[1988]' role='measure' type='quantitative' />
            <column datatype='real' name='[1989]' role='measure' type='quantitative' />
            <column datatype='real' name='[1990]' role='measure' type='quantitative' />
            <column datatype='real' name='[1991]' role='measure' type='quantitative' />
            <column datatype='real' name='[1992]' role='measure' type='quantitative' />
            <column datatype='real' name='[1993]' role='measure' type='quantitative' />
            <column datatype='real' name='[1994]' role='measure' type='quantitative' />
            <column datatype='real' name='[1995]' role='measure' type='quantitative' />
            <column datatype='real' name='[1996]' role='measure' type='quantitative' />
            <column datatype='real' name='[1997]' role='measure' type='quantitative' />
            <column datatype='real' name='[1998]' role='measure' type='quantitative' />
            <column datatype='real' name='[1999]' role='measure' type='quantitative' />
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1980]' derivation='Sum' name='[sum:1980:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1981]' derivation='Sum' name='[sum:1981:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1982]' derivation='Sum' name='[sum:1982:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1983]' derivation='Sum' name='[sum:1983:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1984]' derivation='Sum' name='[sum:1984:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1985]' derivation='Sum' name='[sum:1985:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1986]' derivation='Sum' name='[sum:1986:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1987]' derivation='Sum' name='[sum:1987:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1988]' derivation='Sum' name='[sum:1988:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1989]' derivation='Sum' name='[sum:1989:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1990]' derivation='Sum' name='[sum:1990:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1991]' derivation='Sum' name='[sum:1991:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1992]' derivation='Sum' name='[sum:1992:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1993]' derivation='Sum' name='[sum:1993:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1994]' derivation='Sum' name='[sum:1994:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1995]' derivation='Sum' name='[sum:1995:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1996]' derivation='Sum' name='[sum:1996:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1997]' derivation='Sum' name='[sum:1997:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1998]' derivation='Sum' name='[sum:1998:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1999]' derivation='Sum' name='[sum:1999:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2000]' derivation='Sum' name='[sum:2000:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1981:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1982:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1983:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1984:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1985:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1986:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1987:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1988:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1989:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1990:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1991:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1992:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1993:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1994:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1995:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1996:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1997:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1998:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1999:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Multiple Values]</rows>
        <cols>([federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk] / [federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='mortality 1960'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' included-values='non-null' />
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' num-steps='15' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
            <format attr='break-on-special' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Story 1' type='storyboard'>
      <style>
        <style-rule element='story-point-caption'>
          <format attr='width' value='289' />
        </style-rule>
      </style>
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='97346' id='1' param='vert' removable='false' type='layout-flow' w='98504' x='748' y='1327'>
            <zone h='5473' id='3' type='title' w='98504' x='748' y='1327' />
            <zone fixed-size='138' h='22886' id='4' is-fixed='true' paired-zone-id='5' removable='false' type='flipboard-nav' w='98504' x='748' y='6800' />
            <zone h='68987' id='5' paired-zone-id='4' removable='false' type='flipboard' w='98504' x='748' y='29686'>
              <flipboard active-id='18' nav-type='caption' show-nav-arrows='true'>
                <story-points>
                  <story-point caption='The mortality rates in 1960 from the data of 190 countries averages to 342.3 per 1000 adult males.' captured-sheet='mortality 1960' id='1'>
                    <capturedDeltas>
                      <worksheet name='mortality 1960'>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' field-type='quantitative' max='10390423.225400038' min='-9536380.6514069475' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' field-type='quantitative' max='20317965.393037274' min='-20421278.088434771' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                        <selection-collection />
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='The African continent has the highest mortality rate that averages to 459.1 per 1000 adult males.' captured-sheet='African mortality rate' id='2'>
                    <capturedDeltas>
                      <worksheet name='African mortality rate'>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' field-type='quantitative' max='9410336.4245071076' min='-12634449.05338552' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' field-type='quantitative' max='12321345.517399136' min='-10445074.39860674' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='Australia and The European countries excluding Turkey and Kazakhstan have the lowest mortality rates at 200 and 203 per 1000 adult males respectively.' captured-sheet='Europe and Australia' id='3'>
                    <capturedDeltas>
                      <worksheet name='Europe and Australia'>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' field-type='quantitative' max='11855994.730702726' min='-4918827.2207441917' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' field-type='quantitative' max='21357214.885065835' min='-12950426.866321664' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='The rates compared from 1960-1980' captured-sheet='1960-80' id='5' />
                  <story-point caption='The Mortality rates of 34 countries have shown a decrease of more than 30% during the time period 1960-1980.' captured-sheet='1960-80 mortality decrease' id='4' />
                  <story-point caption='China: The &quot;Great Chinese Famine&quot; during 1959 to 1961 had resulted in tens of millions deaths that lead to its Mortality rates almost soaring 500 per 1000 male adults in 1960. As its effects started receding from 1962, China had seen a drastic reduce in its Mortality rates for the next couple of years.' captured-sheet='China 1960-1980' id='15' />
                  <story-point caption='On the contrary, few countries have shown a more than 10% increase in the Mortality rates with Hungary being the highest at almost 40%.  ' captured-sheet='Mortality increase 1960-80' id='6' />
                  <story-point caption='The Mortality rates from 1980 to 2000.' captured-sheet='1980-2000' id='7'>
                    <capturedDeltas>
                      <worksheet name='1980-2000'>
                        <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]' included-values='non-null' />
                        <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]' included-values='non-null' />
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='There was a significant decrease of above 30% in 42 countries from 1980 to 2000, with Iran having the highest decrease of about 63%.' captured-sheet='Decrease mortality 1980-2000' id='8' />
                  <story-point caption='Iran: The Iran-Iraq war that had begun in 1980 when Iraq invaded Iran had caused a lot of bloodshed to the country during 1980 and the next consecutive 2 years. The Mortality rates had topped a staggering 586 of 1000 adult males in 1982. After Iraq withdrew from the Iranian territory in the mid of 1982, Iran saw a steady decrease in its Mortality rates over the coming years.' captured-sheet='Iran 1980-2000' id='16' />
                  <story-point caption='During these two decades a few African countries as well as Russia and some of its neighbours have shown an increase in Mortality rates. ' captured-sheet='Increase in mortality1980-2000' id='9' />
                  <story-point caption='Zimbabwe, Botswana: The HIV/AIDS epidemic that sweeped these two countries in the late 1980s reduced its Life expectency significantly. Botswana and Zimbabwe both of which had two of the least Mortality rates showed a more than 100% increase in its rates during this period. Almost 25 percent of Zimbabwe&apos;s population was infected with AIDS by 1997. During 1983 to 1984, the government of zimbabwe had sent an army in an attempt to suppress members of the Ndebele tribe, this had resulted in the death of almost 20,000 civilians, resulting in an increase in its Mortality rates from 1983.' captured-sheet='Zimbabwe, Botswana 1980-2000' id='17' />
                  <story-point caption='From 2000 till 2016.' captured-sheet='2000-2016' id='10' />
                  <story-point caption='In this period, several African countries have shown a significant decrease in Mortality rates with Morocco having the greatest decrease at almost 57%. A total of 30 countries has shown a decrease of more than 30% during this time gap.' captured-sheet='Mortality decrease 2000-2016' id='11' />
                  <story-point caption='During 1960-2000, only 3 countries have shown an increase in Mortality rates of which Syria tops at nearly 75 percent increase.' captured-sheet='Increase Mortality2000-2016' id='12' />
                  <story-point caption='Syria: When president al-Asad was reelected without free and fair elections in 2007, human rights in the country worsened. The government systematically repressed its citizen&apos;s abilities to change their government. There were situations of arbitrary or unlawful deprivation of life. In March 2011, a civil war had erupted in Syria against the Bashar Al Asad forces, by the end of May about 1000 civilians were killed and 1000s more in the coming years. This had resulted in the Mortality rates shooting up over the consequent years. The situation still remains unstable in Syria to date.' captured-sheet='Syria 2000-2016' id='18' />
                  <story-point caption='Mortality rates in 2016 of the available data by World bank.' captured-sheet='2016' id='13'>
                    <capturedDeltas>
                      <worksheet name='2016'>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' field-type='quantitative' max='9855879.0010021925' min='-16365079.181944672' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' field-type='quantitative' max='37667124.781068549' min='-19940711.704450529' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='After almost 6 decades the average African Mortality rates per 1000 male adults have decreased from 459 to 289. ' captured-sheet='Africa 2016' id='14'>
                    <capturedDeltas>
                      <worksheet name='Africa 2016'>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' field-type='quantitative' max='7146170.1849537082' min='-7172977.3082692344' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' field-type='quantitative' max='15831906.8217231' min='-12945860.380565859' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                </story-points>
              </flipboard>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='dashboard' name='Story 1'>
      <viewpoints />
      <active id='4' />
    </window>
    <window class='worksheet' name='mortality 1960'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='African mortality rate'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Europe and Australia'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='1960-80 mortality decrease'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Calculation_47287801345564673:qk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Calculation_47287801347444739:qk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Calculation_477170460219936778:qk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='1960-80'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Mortality increase 1960-80'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <tuple-selection>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Hungary&quot;</value>
                <value>-39.403487774782761</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Ukraine&quot;</value>
                <value>-38.989514715941553</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Latvia&quot;</value>
                <value>-38.834604955627434</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Belarus&quot;</value>
                <value>-35.679801415112777</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Lithuania&quot;</value>
                <value>-34.694579631303014</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Iran, Islamic Rep.&quot;</value>
                <value>-32.422624567970352</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Slovak Republic&quot;</value>
                <value>-31.944260558718398</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Russian Federation&quot;</value>
                <value>-30.800216567406601</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Estonia&quot;</value>
                <value>-23.835907493666753</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Poland&quot;</value>
                <value>-23.735292536160678</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Cambodia&quot;</value>
                <value>-17.812214665136956</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Bulgaria&quot;</value>
                <value>-15.113557821726969</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Czech Republic&quot;</value>
                <value>-14.222771586355391</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Denmark&quot;</value>
                <value>-10.588258722319575</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;El Salvador&quot;</value>
                <value>-10.215052293389835</value>
              </tuple>
            </tuple-reference>
          </tuple-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Increase in mortality1980-2000'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Decrease mortality 1980-2000'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='1980-2000'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='2000-2016'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Mortality decrease 2000-2016'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Increase Mortality2000-2016'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='2016'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Africa 2016'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2016:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name (Sheet 1) (copy):nk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name (Sheet 1):nk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='1960-2016'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_299137538176614400:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;Syrian Arab Republic&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_299137538176614400:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='China 1960-1980'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Iran 1980-2000'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Zimbabwe, Botswana 1980-2000'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Syria 2000-2016'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='1960-2016' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='1960-80' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='1960-80 mortality decrease' width='192'>
      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
      Jc3/B8D+RGIkFcmsAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='1980-2000' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='2000-2016' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO2deYwc2X3fP3V09TndM9PT3XP1XLyPJbkHudzVLnV4tSusJCuyHMdCAsNB
      AhsOAiOwgSRAEGANA/krSBwkQBAgQYLEDuw4sRxZiiVZ2qV2tbvkksuzZzj32dNz9313V1X+
      mO3mNHtI7krN6eH0+wADcPhq3vvVr9633u+dJZmmaSIQtChysw0QCJqJEICgpRECELQ0QgCC
      lkYIQPDEyGWSzM3Nkc6XHnutaegUiw+/LpOKE0/lKBdypLP5htmoNiwngWAnRoH/+O/+Db2H
      T3DqvBNHbpm00smJwS6yRTALWawuBxsrK6zFcvS3l/irH8/w5tdexabJJJNpHC4Pkl6gq6eX
      y9//H/xkSuH3v/kcPw3LvHa6i9lIgjNnTrIWnmcrmafdoYKji0Gfg49vhjh65lk6XbZHmikE
      IHgilOJzSL3P8eu/9stEl+7wn35wHWdhhfRX3iSTUSmG73L43DP8yf95m261yNpz51hbj7M+
      P8F/+q9/yte+9U0WJqZJ6yr/9Pd+C3Bw3JvgxsQG2P1MT88yGbrBUrrM3R//Jd52FUfvSeJb
      UYJOA6UzwMfjq/zO3/8msvRwO0UIJHgiKDYP8cg8sViM1XCY/iNnOTPkYzOZI5NJkUplMXWD
      I6de4NRQAH9PH/6BPvp8Hs6//it8/SuvMdCh0D78PIoEYPDSG1/lg5/9JQUM3n/np+hmiUKx
      hK//OCdH+nn+lVdos6usRuaJbCbo6/E83s633nrrrSftDEHrIVnaaDM3+dHlD+g7+RLr01fY
      MF28/vI5Pn7/MkXVxdkzJ5EtVgIdVty9I0Qnr6Db3fgDPQz0+rGT4NihPjyednKZLIHB43g1
      E0/vYRxSkrLs5PCJU3S0Wenr6sQT6EcxDF68+AKL4TX8vSMcGuhGekQLIImZYMETwzTZrlwS
      VP4lwXaNk+oqZqUqSpKEXszxf//8O3zpa9+g3ePcJev71z6q3EdVfhACEOwDCoUCVqu1KWWL
      PoCg6SQSiaaVLQSwx5RL5WabINiBEEAD0PMx3n77bf78T/+Y+WjmkdfevnMTAFMvMzU9sxfm
      CR6BmAdoALK1nVcuPsvbl8Fvh8s//Gs2MzIvPxvgg9uLFJJJ2lx2jjz/CrOhG6wsLHLkhVfJ
      pLPEIgtcvRXC6unnC587y2P6bIIGIwTQIG5euc6pFy8i63lKkkI6GadgdnPuwpdYn7/NucNB
      JuIF+o6c5uK5Q1z+eA1VzZHNKVjsVmKbUUwQAthjhAAaQG5zlivjczyDQnHQz1a0QKlYQkbC
      4P5QnSRBNDLHX6+vM3z2JaJrS6wsr6CXdcp6c++hVRHDoA3HpFzSUVRl1zFq0zQwDFAUuXp9
      qaRjsbTuu2h9fR2/39+UslvX608MCfURlVmSZBSl9vpWrvzNZs89b5om5XIZwzAIh8NNmwAR
      7B+y2SzFYrEpZTc0BDKNEvPTc0h2NwP9fuYnx9Hau+nztbM0Pw22DoI9PiQJdF0nFovR1dXV
      qOIFTykHJgRaHbvDSslBce4GiSUnSbuf3Nx1ONLNxJoOW1N0fOUrtFmUx2cmEOwBDZ0I8/R0
      cfPaFeZX4mwmi5w9c5x+fxeJjSiHTpxmxNfOVk4Mdwj2Dw0VwPz0Em98/Zu8cHIIpZghspEi
      lohjc9rY3IyylU7jtoq3v2D/0FABHH7mNEtj14mVrFx8/XU2Qu+jdQUZPP4s+koIo6OfDk2s
      vhDsH5o2DyA6wYIKB6YTLBA0FxN9bZTijT8GxYL2/G+ieEd41AITEY8IDgx6dI7Cz/4Iy5lf
      w3LsTfI/+UOMTPSRfyNaAMFTg2GaLMULRBJFvE6VEa8ddceRD/rCh6jDX0Dte27796Wr6MvX
      kY++8dA8RQsgeGqY3cqzGC8w1GkjVdC5E0mzswsrtwcxotOY5QJmKYcRm0P29NdmYpqQisB6
      CAop0QII9g+maVKcnCR/5y6WYD/2559Hsliq6bNbeV4actNmVfA6VC7PJCjqJlZ1uxVQBl5C
      j9wi993fBdNAGXwZ2X9iZwEQ/hDiC+DsgvBVIQDB/iF/5y7pH/4Qx8svk783TnFxCc+vfgtJ
      3g5UbKpMpqjTZlUo6CaSBPKOFbeSYkF76R9jpldAUpBcfiRpR5BTTMHWFJz+dVCtEJsTAhDs
      H9I//BGeb38b7ZO3/+a//SOMRBKlox2As31OriykmLTkyBZ1zvY6UR8I4iVZRnL37V6AaW5v
      yqiIRrEIAQj2D5LDjpFKAmCWimAaoN5fOeCxqXzxkIdEXsdllbF/1jVl1jZw98PU/wNXADYn
      hAAE+wfP3/oG0f/8X8gODFCOrOC89Cqyy1VzjabK+Fw/59iNJMPg5yE2C7ktOPKmmAkWNJ+d
      M8FGOkNhZgZLTzfqHswOixZAsK+QXU7sZ8/sWXmNE4BZ5u7NG2zG09jaAhwKqNycCHP2+Rex
      Fje5dmuKk89doM/vEScfCPYNjZsIk1ROnXuB558ZIVfMcCM0zxdePsfo7XvcuHuPV79wkYm7
      ocoZqQLBvqChIZAsS4RujXHupVe4cXUUze5EkyVkRxt2qwPFKGOYJsYne4J1XW/aXlDB/qGZ
      9aChAsjHl8lae+l0uZALW8xMTVGyWFBya0xOT6Jb7MiShGKxoOs6iqKgaVojTRA8hTSzHjR0
      FKiQTlK2OHBaVfKpLaYXNxg+fAhVzzI9u8zgocO47Ns3KkaBBBWauR9ADIMKmk4zBSBWgwpa
      GiEAQUsjBCBoaYQABC2NEICgpRECELQ0TRXA2FqWjxZT5EriuERBc2iqAIY7bfhdFn42l6Ss
      105HmKUcpakfUbzzZxjpdcQiIsGToKkCsFtkhjptaIpEPH//86GmUSb/zr9Cj9yCYpb8D/8F
      RiLcREsFB5Wm7wco6ga5koHdcl+Lxvo9KOWwfvkPAAnJ1k7p3vewXvyd5hkqOJA0VQD31rNk
      NmWO+x04tR37O2UVjHJ1E7OpF0G2PDwjgeDnpKkCGOqw4fV6at7+AHLXUSSXn/yP/iWyswt9
      Yxzbl/+wSVYKDjL7djGcqZfQI7cw8zHUgZeRrE5qDjk1TUivQnIJ2vqgrWd707PgqePALIYr
      FzKEQndYXN0il9zk1p1R0vkShUycO7fvkswWPnVekmJBDZ7HcuR1JKuLuhN+N8Zg7m3QS7Dw
      U1i7uy0KgeAz0EABmNy88iFWVwc2TeaD96/S4VL46PooVz58nza3nWsf3W5cHY1cg8NfgYHP
      wZE3YfXm9jkyAsFnoKGb4peXVolmSyjONgyrl4GhIZaWQkh2D8PDw8xPLzdsS6Rqgl4qYhaL
      SMUiimlSLpVAEpNqTxsHY0ukpOD1+jn3hVf54PJlimWTfCZFzjAhkyKbTaNLSuO2RAYvIs//
      DXgGILEEfefRNOv9Y+8ETw3N3BLZwFEgmXPnT/HRe+8yfOIcnWqad6/c4dz5i1iLW7z37jWe
      eeHCoz7W8dnwHgO7F1Jh8J0Eh6+m8humwbXFK7wz9SOsqo1fPv0tDnUdaVDhgoPCvh0F+kUZ
      Ww3xw/Hv8e3nfoN0Mc3/vP7f+Cdf+Ge4bZ4nUp7g5+fAjALtJ8ZW73Jh4CW63b0c7jrKQMcw
      s1szzTZLsM84sAIY9h5ibDVEqpBkM7NBOLFAsD3YbLME+4ymrwV6UpztfY5IIsy//+m/RpJk
      Xj/2Jl6nr+Ya0zRJFGNkyxl89m4sYrlFy3Fg+wCwXcFzpSyyJGNVbUg7OsmmaRKK3WA8dhen
      pY28nuWN/m/itLgekaPgSSC+E/yEkCQJh+bcNS1VSjAWu823hn8DVVYZi93i480PudTz5T22
      UtBMDmwf4HEUjQJWxYYqb78D3JYOsuV0k60S7DUHugV4FB3WLjRZ49r6z+i0dXFr6xov+i81
      2yzBHtOyLYAiKbzW93UkSWYxPcdF/+fpdw7UXGOaBmtzbxN69w9YGP0z9HKuSdYKnhQHuhP8
      ixKZ/j7ri+8RPP4rbEWuoZeyHH/x95Dkz/hxNsEjERNh+5Tlyb/iyPP/CG/vBUbO/ibp2DTF
      QrzZZgkaiBDAI9DsXnLpCAClQgrTNJEVa5OtEjSSlu0EfxqOPP87hN77A8Lj36GQ3WDk3D9A
      tew+rCp4OhF9gMdQLqZJx+exu7qxOh601UQvrFPa+hkgo3lfQbZ20bglr63Bge0DVLRlmub2
      z5Ms7Amhai7a/ad3qfxglBLkl/4ExdaPbOsmt/TfMcRcwlNFQ0OgpZkxJudX8Q8cod2MEppb
      4+TZ81jza9wcm+fomRcY6e86MO/HcuIuqus4ls4XATAL6+jJUeTOi022TPBpaWgLML+4yPCR
      Exwf8TM6u8EvXbrAzL0pxmYW+aXXLrEwMXGg9q1LFg9GaQvTNDBNA6MYRbKI/QZPEw1tAU4c
      O0VkdZ6/GbuLZmnDollRJRnJakezWJGMEqZpUjoon0m1HcZM3CU9/R8AE9UWwNCGnu57agIH
      Y08wBlvROJJqA7mMpbTJzZu3MO1ulNwG1z6+Dnb3AftMqoYl+G2M/DIgIdt6kXY5myiWzRLN
      ZujztGOziCXXD3Jg9gQHhwaIJTIcOnoaCwVWNxKc6u5GMUZYXY/SFQgcuD3rkiSj2HffaGOa
      JjfCS/zZzY/x2OxkS0V+/4uv0elw7LGVgofR0BDI4fLgcFViYAvBYGVtvZ3+YF8ji3oqSBcL
      /O/bN/nnr71Bp8PBRwvz/PG1q/zu57/YbNMEnyBmgp8ghVIZVZZxftK893o8bGbEMOl+QswE
      P0E6HA78rja+G7rDyUAP3xu9y2tHjzfbLMEORAvwBFFkmX/40ueQJYkfjI/yysghXj10uNlm
      CXYgWoAnjN1i4Vtnn33kNYVymXAihsdmp8sp9iTvJUIATSaWzfL9e3fwu9qIZbOMeH28EBys
      2cAveHIIATSZjxbneHFghCM+PyVd589vf8wxfwC3zd5s01oC0QdoMkW9XJ0ckyUJVZbRDXHM
      +14hWoAm81z/IO/NTnEi0M1mJk2nw4nHLibK9opPJYDV1VW2trbwer10d3c/aZtaij5PO188
      fIyZrQ162jwc9QWQRfy/ZzxWAJlMhh//+MfYbNsnq33jG99AVUXD0UgCbW4Cbe7dE00TViIQ
      ugu6DkePwciI+B5ag3isFzVNw2q1Mjk5iaZpKIo4EWFPyWbh1k144QJ87lWYn4O19WZbdWB4
      7KtckiR8vu1DZff79sUDyeYGdHVBZ+f278EgrK2CCEUbwmNbAFmWOXnyJC+99BKzs7MYYoRi
      b/F6YWsLkknIZiASAZ/v8X8n+FQ8tgXQdZ0PPviAeDyO1frZjgQplUpYLBZM06RcLqNaLAdm
      O+Se4XTByVPwwc+2+wPDI9Dd02yrDgyPFICu61y9ehWPx4PH46GzsxNZfnijYRo6P/rL/0XX
      sUvo67fZKph09p7Amp0jspWnPXCIl54/fuD2BDxRJAkGBqH/kz0HsrzrhwBLpRKFfB6b3S4G
      KT4Dj/SUJEkEAgHGxsbIZDI88gQVU+feratogUHKmRixspOvfPk8774XoiCrvPnVN3jvnY8w
      EYeGfGYkCR4y+GCaJotzc0zcGyMRj9PR2cmpM2fp6Wu9/Rc/D4/sA8iyTE9PD+l0GtM0icVi
      DxWBaejkDRmlmGR5bZNyNkUqEaeITDGfJp6IkddNUfkbTLlU4sc/+GsuvvIKf/vv/j3OPvc8
      P/jed5tt1lPDI1sA0zSx2WwcP36cSCRSFcJuSIrGcy9cpFTIkMiYWI0Y1+/Mcv78ebRSkKsf
      3+O5C+dF+NNopO2W2jC2n4thGMhijuBT88iT4XRd5/vf/z6KonD+/Hl8Pl/DVik+LSfD7XdM
      0+TWxx9z5+bH9A8MsjA7y6tf/BJHjj89G2+aeTLcIwVgmialUolIJMI777xDLpfjt3/7txsy
      GSYE0DhM02RtdYWV8DLBoSG8XV11LyrTNCmXSkiyjKIo+2q59b79Rphpmrz33nssLS3R3t7O
      pUuXHjkKJGgOkiTR3dNLd0/vrum6rjM3OU4iugWSxODho3T5AzXXmKZJKZ7GyBex+juQlNZ4
      zo8dBTp37hyXLl3CIs6zeWpZW15C13XOXLhIuVRi9OZ12twerDYbsF35Y1fvkbgxiWzXkDWN
      3m9dQrHdP6vHNE0oljFTOSSXDayWfdWK/Lw8VgBer3evbBE8IZLxOF2BbiwWDYtFw2Z3kMuk
      qwIobiVJ3Jpi8Le+jqwqbLxzk9hH9+i6dLaahxnPYMyvI7XZMcKbyH1e6HLfF4EJuWSGlbFF
      FE2l5+QAms2678e8W6Oda3E6/X5WlhbJZjLEtjbJ53I43fdXn+rpHBa3E1nd7ttZfe2U4rXH
      txjhTZQjPSiHe1CO9WNEouw86DWXzHDrOx9iGia5eJZbf/Fh3bIZvVhmPbTM8pUZ0pH98aUd
      MWXYAvgCPeilMvdu38CiaRw/cw6L5X54Y+vropzNE7s+gdbRRvTDUfxffqE2E8OASr9AlrYr
      /47hk0hoAf/RPkZe2h59uvWdD9maX8N3aHvZhqEbRK7N4fS7cfp9bE2sYgJtve1P8tYfixBA
      CyBJEj3BAXqCA7umyxaV/r/zJTbfvUNmehnfa8/jGKxdbSr3dKLPrCJ72zBiGSSfZ1sIn6Bo
      KoV0fvsX00QvllG0+9WrlC5g6iYdh/1IkoSkyGxNrAoBCPYHapuD7q8+/LsGks+DrFkwExnk
      nnYkj6umE9x7aoCbf/Ehd757lVK+hGqz0NF3f4hb1hT0YhlTN5BUhWIyj8XR/IORxSeSBI3B
      3H6mW3NrqJpKe7Bre0a60kc2TVLhGFsTqyhWFUyTvhcPoVjV/TsPIBB8aiRQVAX/kd3nIiRJ
      wh3sxO51oRdKaG478j6YaxACEOwpFoe2L0KfCs2XoEDQRIQABC1NgwVg1iyXrkyEmKaJYRhP
      5WdSBQebBvYBTO7dus7yRhyPf4h2aYvpSJxDJ5/DmoswOr3C0PGznDjUu99nxwUtREM7wSPH
      TuN2z3F7JkzUhC9/6WXee38czCSvv/FF3vvpdY6P1G7obtIorGAfUfmQejNooAAkjGKG2fAq
      smpBMWQURUWWJCTVgqqomEYZ0wTD0NH17Z9yudw4EwRPJYZhNK0eNE4ARpmJiSkURcPMmljl
      KJd/+j4WzwBadosfv30Zi8v/iSBUJElCURSxzFrQ1HrQOAFICqfOPke+WMRudyBLBulMHqfL
      hWQeIpPJ4XA5xZ5gwb6igQKQsFitWKqHZym43RVVq7S52xpWlEDQKMQ8gKClEQIQtDRCAIKW
      RghA0NIIAQhaGiEAQUsjBCBoaYQABC2NEICgpRECELQ0QgCClkYIQNDSCAEIWpqGboncDM9x
      e3yWoaNn6FBTXB9b5NnzL2ItRrl6c5xnnr9IwOsSWyIF+4aGtgAlU+NzL5/n3p3bXLk1xaWL
      z3D7xigf3bzD5169QOjmbcTOeMF+oqFbIjvbbfzk7cucfu4FpscXsTpc2GQJyenGYXeimmUM
      08QolzEMA13XKRaLjTNB8FTSzHrQ0BDo/Z+8y+FnL9DudENui/DiAgVFRc4lWFicp6xakSUJ
      xWJB13UURUHT9s8pYYLm0Mx60NBTIU6cO8tGIsoWCi+/coF7syu8+MIp1PIgYxMLnL/wrNgS
      KdhXiNOhBU2nmadDi2FQQUsjBCBoaYQABC2NEICgpRECELQ0QgCClkYIQNDSCAEIWhohAEFL
      IwQgaGmEAAQtjRCAoKURAhC0NA0XwM7FpeWyXv0/XdfFZjDBvqOh+wGWp+/y3rVZfvXb3+De
      1cssRbMEj5zDml1gajFK78hpzp0cFHuCBfuGhgrAN3CUgaU0ppFnNaXwlS9/nnffGwUpz5tf
      fZ3LP7mCeWKg+lnMyge0Ba1NM+tBQwWgadZqTCV98oMkgSQhIWHywJfjhQAEHBgBmEyHbjI5
      O4HU7sEpp/jB37xDR99J7NkE3/v+D+joPoSEhKwoAMiyjKo2VIOCp5Bm1oMnuCXSpFQsY9Es
      mKZJuVxGtViq8b/YEimo0MwtkU9QdhIWbfszqZIkiQ9iC/YlYh5A0NIIAQhaGiEAQUsjBCBo
      aYQABC2NEICgpRECELQ0QgCClkYIQNDS7IkAtpdClMR+AMG+Y09WIIWuXWZxPYu37ygvnjsi
      vhEg2DfsSQsQy0t89WtvkNtcwRTtgGAfsScCMAwTTBOxFUyw39gTAXS3W/ju935IW6AfSahA
      sI/Ykz7AsbOf4/BpHUVVRfUX7Cv2RACSJFV3/FQ2xxiGQTqdFlsiBaRSqaaV3bSP5MH9I1Sk
      T4aFKsen7NweZxgGsnw/UiuVSjWbax5M13UdSZKq/1fZfP9Z8tgtXZKkqp2V/czKJ1s7n1QZ
      hmH8Qr4ol8soilLjX6j1d7lc/sx2NtrfD+4Ie9AXj/PVL2JDUzfkSp9iPHTnTfw86Tsd9TSX
      0Yg8Doq/G2nDvpgJ3tzcrP678lbNZrPMzc1RKpXI5XJks1mA6hvRMAyWl5dJpVJMTk6SyWSA
      7Rur3Hw2myWdTrO0tEQikaiWUckjnU5jmiabm5ssLCxUw7GdZWSzWZLJJKOjoySTSYCat004
      HCaVSvFgQ1rJo1wus7S0RDQaZWJignK5XJMOkEwmmZiYYGFhofrFdEmSqr4oFovMz88zMTFB
      NBqtlrXbRvLK/ez0JWy/ZVdWVjBNk2g0WmdnPp8nHA4TjUaZmZlB1/U6X6TTaVKpFPPz81U7
      d/q7EtIuLCywublZZ2c2m8UwDMLhMJOTk1Vf7LS94qe5uTkKhcKnus+dNsRiMZaWljBNk3g8
      XvdMS6VStT5MTk42TwC6rhMKhQiFQoyNjQG1yp2YmMDpdDI2NkYqlapW4Ep6IpEgkUhw5coV
      vF4vs7OzdXncvHmTqakp5ubmWF9fr5ZdSZ+dna1WUEVRCIfDNenFYpGlpSVmZ2c5dOgQc3Nz
      dWVEIhHC4TB3794lHo/XhRlLS0sAjI+P4/f7a+yE7Qc5NjaGpmlkMhnu3btXU4ZpmoyPj9PW
      1kYwGKyK/kFf3Lhxg1AoxOjoKMvLy3V5zM/Pk8lkWF5errnPSh6Tk5OYpkkoFMJqtbK2tlZT
      Rj6f5/333yccDjM9PU06na7LY3Z2lmg0Sj6fr97ng/7O5XLE43F8Ph8LCwt1dWJ6eppgMIjH
      46nxReV5XLt2rXqfDz4P0zSZmZlBkiSmpqZYWVmpCrmSR+Vvrl+/jtfrbZ4AZFnm6NGjHDt2
      DJ/PV5fe3t6O3W6np6eHUChU16TJsozL5eL06dM4nc5d3xIXLlzA5XJhmib9/f116W1tbdy+
      fRu73Y4sy9hstpp0i8VCLpcjEokQCoVob2+vy8PhcHD8+HGOHDlS88bZmb66ugrAzMwMbW1t
      u/pja2sLv9+P1WqtS3O5XMzPzzM1NUU+n0fTtJp0u92Ow+Hg2LFjHDt2rO4+AGw2GyMjI6RS
      qWrl3ommaQQCAY4ePVozaLGzjJdffplisYjH46Gzs7MuD13XmZiYIBAI1NkI0N/fz+joaFVE
      gUCgJr1Siaemppifn8flctWkq6qK0+ms3uduvnQ6nfj9flRVZX5+vi7dYrHQ3t7OqVOnUFW1
      eZ1gwzCYn59HkiT8fj9Op7MmvVQqsbKyQqlUoq2tDZ/PVyMC0zTZ2NgglUqhqird3d11lSed
      TrOxsUE+n6enp6euAuu6TiQSoVgs4nA46O7urisjGo0Sj8cfWcbm5iaGYdDR0UF7e3tNHoZh
      sLq6SjabRdM0+vv762LYaDTKxsYGVquVQCCA3W6v81elY5fNZlFVdddKvtNmr9e7azpsh5yP
      Oo4mm82i6/quFcw0TfL5PJlM5pF5bG5u4vV6d43FKwdhJZNJOjo6qp3giu3RaLQqyJ33aZom
      W1tbJBIJLBYLgUCg7nlks1nW19cxDIPOzk48Hk+NDbqus7q6Si6Xw2q1Nq8FkCQJr9dLR0cH
      4+PjdemTk5PY7Xb8fj+xWIytra2a9GQyWXWczWZjZmamJt00TSYmJujo6KC3t5epqam6Mqam
      ptA0Db/fTz6fr4YOFUqlEvPz8/h8PpxOJ5OTk3VlTE9P43a76erqqomNKywtLVEqlQgEAiiK
      Um2CH8yjp6cHt9u9qy+mp6eroeKdO3fI5XI16TtDoFAoVA1xdnLz5s1qeigUqktfWFjgzp07
      1fCi0t+pkMvluH79OqOjo0xPT9eFLwChUIi7d+8SCoW4detWXXokEuH27duMjo5y9+7dumeq
      6zpzc3MEAoFd/Z3P51laWsLn82G32+ueaeWZu91uvF5vTV9m532apkkgENhu6eqs3CMMwyAS
      iWAYxq7NZVtbG8vLy9jtdpLJZF0Io2ka2WyWSCRCNpvd9Y2naRrLy8s1HcqdeDweIpEITqeT
      RCLB0aNHa9JlWaZcLhOJRCgUCnWtFGyHFsvLy1gsFnRdryunEr4UCgWSySTDw8O7+mN5eRld
      13d9s7e1teFyuejq6mJjY6PurepwOHA4HBw+fBigJv6uYLVaOXLkCJIkMT09vasvAPr6+kil
      UtUOaAVN03A4HFUfPayM3t5erFbrriFpR0cHmUyG4eFhSqVSNTSsIElSTav8YEuoKArFYpGV
      lRXy+fyuLZTVaiUSiVSfw4OtbVtbG4uLi2SzWRKJBMpbb731Vl0ue8TGxgayLDM4OFgnAofD
      QS6Xo1Ao0N3dTUdHR82DV1UVRVFIpVK4XC76+/trKp8kSTidzuoIzdDQUF3lcjqd5HI5crkc
      fr+/LsySJAmr1UoymcRutzMwMFDzYCtlpNNpyuUywWAQp9NZk4fNZqNcLpPJZOjo6KCnp6eu
      jIrIVVVlaGio7hAxi8VCLBYjHo9js9no7OysyUOWZUqlEhsbG2QyGQYHB+sevNVqZWVlhUQi
      QU9PT13ooKoqyWSSWCyGJEl14WAlPl9fXyedTtPf319XyW02G2tra9VOrs1mq1XbWWIAAAXy
      SURBVMlDURQymQyxWIxisUgwGESSJDKZTNVvVquVVCqF1Wqt87csy2iaVn0ewWBw1+eRSqUw
      DIOBgQHsdnuNDXa7nVKpRCaTaW4nWJIkgsEgvb29TExM1KVPTk7S0dHB0NBQNc7eSSKRIBaL
      MTQ0hNvt3rU5nJycpLe3l2AwWNecVspwu90MDw+j63pdCFQsFgmHwwwNDeH1euvsrDS5fr+f
      gYEBlpaWdg2BFEVheHgYq9Va9+asjFwMDAzQ3d1dFwJV7sPj8eD3+9nc3KybOd3Y2CCbzVZj
      5t3CwcnJSXw+H11dXQ/1t8vlwu/3k8lk2NjYqElPpVJsbGwQCARwuVx1rUilDK/Xi8/n27WV
      mZ6exmazVeP9B0O1crnM4uIig4ODdHV17RoCraysMDQ0RGdn50OfeXd3N8FgkLm5uboQaH5+
      Hk3TGB4exmKxNC8EqrxNHhYCuVwuVlZWcDgcJJNJent7a9IrIVDlrVdpwneiqipra2u7jmoA
      uN1uVlZWcLlcxONxDh06VJOuKAqlUon19XUKhQIOh6Muj8pbT1XVXUMgp9NJOBymWCySSCQI
      BoO7+mN9fZ1yubxrCFQZSbJareRyuTp/2Ww2lpaWkGWZVCq16zmbiqKwtraGaZoP9ffq6ioO
      h4NEIkF3d3dNuqZp5PP5qth2Cz8sFgurq6vIsrxryOl2u1lbW6v6e2RkpCZdlmV0Xa/6+2Eh
      0Pr6Ovl8ftfnoWkaq6urqKpaNxtcuc9IJEI+nycejzcvBDIMg2g0Sm9vLy6Xq+5mNU0jFovh
      8/no7u5GluWa0ECW5WpPvtIc76w8lcmqbDZLb28vbW1tdWVYrVai0SidnZ309fVhmmZNaCBJ
      EqVSCVmW6evrQ9O0mjwqfYuKQDs6OrZHFnY43WKxkEgk8Hg8BINBDMOos7Oy7KGvrw+73V5X
      hsViIR6P093djc/nQ1XVGkFXQgun01kNKx4sQ5IkCoUCvb29OJ3Oh/q7q6urGqbt5u/KSNbD
      /J3JZOjt7cXtdteFH5qmVf3d39+PYRhYrdaaEKhcLiNJEv39/Vit1jpfFItFVFWlv78fi8Wy
      6/NIpVL09vbi8XjqwjBN04jH43R0dBAMBps7D1B5Y1Umi3YyMTFBT08P4XCYTCZDPB6vSa9M
      jFVakQfDF9M0WVxcxOFwsLW1tevIyNjYGP39/SwvL1dj6J0Ui0WSySTxeHzXEMk0TWZnZ/F6
      vaysrLC2tkapVKq5Zn5+nq6uLpaXl6sd/wfzWF1dpVgsksvl6uysjIsHAgGWl5eJx+PVWfEK
      6+vr2O12VlZWHuqLcDhcFetuvhgfH6e3t5dwOEw2myUWi9WkJ5NJyuUyGxsb1dncB8tYWFjA
      5XKxubm5axkTExP09fURDoerLetOyuUy0WiUVCpFqVSqy6OyIiAajT70eczNzdHe3s7q6mrN
      RFiFmZkZAoEA4XB4ez1QnZV7hCRJjIyMEI1G64bcYHsirBIvTk5O1jWplZGGZ555hrGxsbob
      rXQu+/r6KBQKdX0IgM7OTmRZJhgMMjY2VhcmKYqC1WrlmWeeYXJysm5kRJIkXC4XXq8Xi8VC
      JBKpG6Fxu91IksThw4cJhUJ1ZVTsPHbsGMvLy9UlHTvT3W43LpcLj8fD3NxcXbPucDiQZZkT
      J04wOjpad5+VFmF4eJh4PF6zLKRCR0cHmqbR3d3NxMREnb81TUPTtEf62+Fw0NvbWxXKbmVI
      ksTg4OCu/pZlGbvdzqlTp5iZmanzt8ViQdM0zpw5w/j4eF1/q9IJ9vl8yLJcDX93UpkXGBkZ
      2Z5gbeZqULg/sfJgk1xZcSnLcrXZ2/lQdq4crSyvfjC2rayGBHYtY2cexWIRRVEeWoau65TL
      5brRk8pKxEqIYbVa6ybTKnmUSqVd+yPlchlVVTEMg2KxWNcPqMwuV8rQNK1GBA/6wjTNupGk
      ShkP83dlckpRFAqFwiP9res6uq7X+VvX9apd+Xy+Lvx40N+VD2PsnAirpBuGQalUqvH3p30e
      FRse9zyKxSL/H+8nQOuRiIoiAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='2016' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Africa 2016' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='African mortality rate' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='China 1960-1980' width='192'>
      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
      yf//BzzgNPhuiT6qAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Decrease mortality 1980-2000' width='192'>
      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
      QA47GYn/D6bqE47DiUYyAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Europe and Australia' width='192'>
      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
      QmCC
    </thumbnail>
    <thumbnail height='139' name='Increase Mortality2000-2016' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Increase in mortality1980-2000' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Iran 1980-2000' width='192'>
      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
      eqvmuxMTE9W525WVFd5+++0afWpqilwuB6zNCLzzzjs1LdH09HR1fntlZYUzZ87UtPCzs7PV
      GZ5UKsWrr75aM8sTj8dZWVlBURQymQynTp3C7/dX9coMhaIoZLNZXnjhBdra2qr64uIiS0tL
      KIrC6uoqhw8frhnHLC0tsbi4iKIoFAoF9u/fXzPTkkgkmJ+fr05D7t69uyZNqSyUVew7c+ZM
      jX9GR0erC4npdJqzZ8/W6Jvt/3fffbdG36j/5+bmSCaTKIpCOp3mpZdeeqj/jx8/XjOL9ij/
      37x5k/b2dnK5XGNSIFVVq1ODY2NjdbrT6WT37t20trauq7tcLnbt2kV7e/u6utvtpre3l1Ao
      xOTkZJ3u8Xjo6ekhEokwMzNT1417PB66urqIxWLE4/E63efz0dnZSXd3N4uLi3W3CPh8PsLh
      ML29vSwvL9fpfr+fjo4Odu7cWS3o+/VgMMiuXbvIZDJ1aYrP56O9vZ3+/v51r9/hcFRXp9fT
      VVVl3759+P3+LfH//dfndrur/p+enq7TvV4v3d3ddHZ2VgP9fr3i/4WFhXXLJxKJ0NPTs67/
      A4EAwWAQh8PRmFmgyikr8/T332D1uLqqqnULXeLOnYqP0i3LWnPEBvR7b7N4XL2SY99fSJW8
      +UE3uVX0zfDf09C/qv83o3yexP+VO0P/P58c5fhWoOHRAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Mortality decrease 2000-2016' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Mortality increase 1960-80' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Story 1' width='192'>
      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
      QmCC
    </thumbnail>
    <thumbnail height='192' name='Syria 2000-2016' width='192'>
      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
      hKtJAISrSQCEq0kAhKtJAISrSQCEq0kAhKtJAISrSQCEq0kAhKtJAISrSQCEq0kAhKtJAISr
      SQCEq0kAhKtJAISrSQCEq0kAhKtJAISr5TUAWms+qLKiHWfW0yTtXI4CPpJYiI81p7Ioc5GJ
      j3L86GGKlzzGuuUlHDv4JsNJhw3bdhNIdvPuxU4C4Sr2PfWYlHgS80YeRwCDuuXLSMenGR/o
      gZKl7H9iI1cvtnPlZjdP7nuWaHqIMSt/f6MQv6+8jQD+aClV2SlGRm2ylkU4FMUfieJx+vH6
      g/g8BkUBL4mMTYkx8+jVD8qVZzKZzzi6EPdH3gIwQwOaSCjMaFc/EyUprEAAnexhKm3RMzZB
      a9DENME0zTulFv1+f367IcQc5S0Aw11tnLrUjtYGo4s3srgox+Hz/eza3YrfKufNt35LzZpt
      RKTKt5hH5lQc936R4riikJT62GeHCuEeEgDhahIA4WoSAOFqEgDhahIA4WoSAOFqEgDhahIA
      4WoSAOFqEgDhahIA4WoSAOFqEgDhahIA4WoSAOFqEgDhahIA4WoSAOFqEgDhahIA4WoSAOFq
      EgDhag8sADnLwpHq0GKeyXNpxBnaSvDqqwfQHg8NazYTme7i9LVBDDPKl/bvkWFHzBv35bOY
      TcZJGwE2btrGyvpKOnpG2PfFZ6g2k1IdWswr92UE8IRKeaSpnpsXDnPR10TQ58djGIS8Jsms
      TalUhxbzxH0JgJXNEigqY3XxKo5djGPoOEMTcTpHxnkiINWhxfxxXwLg9fkYuHWOiZRix/ZN
      RGjkyDvHWbZ5D2GpDi3mEakOLVxLqkML15MACFeTAAhXkwAIV5MACFeTAAhXkwAIV5MACFeT
      AAhXkwAIV/t/QSEoqFbmM5MAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Zimbabwe, Botswana 1980-2000' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO2dWYxcV3rff3epW0tXV3X1vjfZ3SSbokRKFEVpZkhLo5FGmsUzmTgJjNhI
      HCTxwEkeggQIAmSB4ocYQZDAfjL8YBhB4A2JnbEnnswijZahOKLETVR3k73vWy1d+3qXk4dW
      FbtYTVIjFdlN1fkBAsQ6t8/33XPP/5zvbPcqQgiBRNKgqPvtgESyn0gBSBoaKQBJQyMFIGlo
      pAAkD4x8NsXCwgKZgnnfa4VjUyrd/bpsOkEinccq5snkCnXzUa9bThLJbpwiv/97/53e0eOc
      eKYJX36NjNbK8aF2ciUQxRxuv4/IxgZb8Tz9LSbff32Or3/zPB5DJZXK4PMHUewi7T29vPU3
      /5M3ZjT+9XdO8/aqykuPtzO/nuTkycfYWl0klirQ4tPB185Qh48r18Y5evIpWv2ee7opBSB5
      IJiJBZTe0/zq3/sW2ys3+IMfXqapuEHm1a+TzeqUVj9i9Mkn+OO/+Cndeomt00+yFU4QXpzi
      D/7oz/jmr3yHpalZMrbOv/lXvwn4GGtLcnUqAt5OZmfnmR6/ykrG4qPXv0dbi46v9zESsW0G
      mhy01i6u3Nrkt/7Rd1CVu/spQyDJA0HzBEmsLxKPx9lcXaX/yClOHuogmsqTzaZJp3MI2+HI
      iTOcONRFZ08fnYN99HUEeearf5tffvUlBkMaLYefRlMAHL7wyje4eOF7FHF49823sYVJsWTS
      0T/GY8P9PH3uHM1enc31RdajSfp6gvf387XXXnvtQReGpPFQXM00iyg/fusifY99gfDse0SE
      n69+8UmuvPsWJd3PqZOPobrcdIXcBHqH2Z5+D9sboLOrh8HeTrwkOTbSRzDYQj6bo2tojDZD
      EOwdxaeksNQmRo+fINTspq+9lWBXP5rj8OxzZ1he3aKzd5iRwW6Ue/QAilwJljwwhGCncilQ
      /j8FdmqcUlMxy1VRURTsUp6/+l//hxe/+W1agk17ZH372nvZvVflh30UgBAC0zQxDGM/zEsk
      wD6OARzHIZVK7Zd5iQSQg2BJgyOnQR8h3vibvwR3M0agi3PPPFGJf2ORNfSmToI+1z57+Ogh
      BfAIkSpYnHn8MNdurrJ06wrXZ9bxhnoQ0Vtk9F6eHmvn6uQyo6OPUcgmaBIJSq2PIbZXaWpS
      mZtfp+/Yk0RvXqCAweGnzmOHp1lcDnPi3FcY6br/tOHnDRkCPUI4VpFoLA4IVtZTfO2Xv4Va
      TDF6/HG+8MUvEmxqwuPScfvclNJJUiUX6fkbFISOUyrh8yisb8XwdQ7y5WefwrRMzFKJZq/D
      8kZyv29vX5ACeIRQcIhvx7EcaA8Y/OTHPyFnuzFUhSsXL5ApOeiGyuLiOu3NFkm1FTsfp6m9
      h7WtTRzhoCgCBQHKzhTh2tYWlm1+vNjUeOzbNKht28Tjcdrb2/fD/OcAQalk4XLpO/Pmto2q
      qli2ha7pNfPjwnGwhMClaVW/O7aNoyjoamO2hXIM8MiiYBi3B73axxXbpe89EFZUlb1SVE1r
      6DBgXwWQTqdxHGc/XZA0OPsqgObmZhkCSfaVRu79JBIpAEljIwUgaWikACQNjRSApKGRApA0
      NFIAkoZGCkDS0EgBSBoaKQBJQyMFIGlo6rcXSAjS6RSmZaO73PjcKtF4mra2dlRhEt1OEGpt
      x3Bp989LInlI1HEznENkc51YPMr8eo6eJhN3oIWZ5Siu3BIYQW7ObvL8F0/d910tEsnDon4C
      UDSGjx7HvvYOp55+gtXZZc6fPcWFdyYwdT/nv/AsP/3xz3CEwLEsHMfBtm1KpVLdXJBIflHq
      uh3asXLMrJl87ckOFifGsYoFSkJAMU+pVEDRdFRFQXO5sG0bTdPki7Ek+0pdB8GZaJix06dR
      FBdjh9p5/e33OXxshOOHe/nJT96hf/TozlvyJJIDwgM8EywQYufdjRUTilKp//JMsOQg8ABP
      hN1+MemeLzCVSA4Ach1A0tBIAUgaGikASUMjBSBpaKQAJA2NFICkoZECkDQ0UgCShkYKQNLQ
      SAFIGhopAElDIwUgaWikACQNixCi/gIQYmcbdPn/b/9W/ny9RHIwyITX67sdentjkSsTM3QO
      HCVEnInFMMdPPYO7sMn1ySWOPvE0wwMd8kyM5KFgmSWWxq+SioUZGHuC9r5D7D6QnliZrWcP
      4DB+fYKenkEO9bUyuRDlpefPMn9zhptzK3zlpV9iaXqa/fkkn6TRcByHKz/8C2JrizSH2rjy
      o79ka2m26hrd7a3na1FsEskcXS7BG2+8SZO/A93lRldUFLcXw+UGx0QIgSkPxUvqgF20SG8k
      UDUVf3cQddcrdzLxKPHwOi/8/d9C1XSaQh2MX/gxod6hyjUth8bq+VYInb6uEOlMHq8ngGFG
      uXr1GsIXRM9FeP/yByjegDwUL6kLVsFk8+oKntYmLMsisrlK33MjqNpOUOP2eBGOg6aquAwD
      q5TH4/NX1zfDqO+ZYNsssLUVJdDWgVux2Iom6ezuQnVKbIXjtHV14nHtaE6eCZZ8FrZnw9hF
      i/bHegDY+GCRwGAr/u4gsDPxcuu9N1mevEZzayfxrVXO/91/TKCtsyof+aFsySNJfC6MmTfp
      ONELwPr7CwQPteHvClZdl4xskolH6RgcwfB4a/KRApA8klhFk/VLCxjNHhzLxjEdep89XAmB
      PinyS/GSRxLd7aLvCyNkNpOomkpTZ/MvXPlBCkDyCKO5NIIDrZ8pD7kVQtLQSAFIDixCCPLJ
      LFbRfGA2ZAgkOZA4jsPchUmiC5soisLxl08T7AnV3Y7sASQHkvhShORGnGd+9XmOvnCSW29c
      x7bsutuRApAcSNLRJMGeELrbRXNHEKto4kgBSBqF9sPdhGfWSW3FWb46i789gG7UP2KXC2GS
      A4kQgsRqlKm3PqKlt5XRcyfQ3a6625ECkDQ0MgSSNDRSAJKGRgpAsm8I08LZTiMK+3coqq7D
      6o3FaW7Or9IxeIQOPcP16TVOnn4WdynC5RuzPPbkWfq7W+SZYAkiW8CeXkdpcuPkiqi9rSgd
      wYf+Oa269gBzS0uMjj3O8cNdXL+5wpfPnebmR7e4PjHN8y98kemJCeSrISQA9lIY9XAX2tE+
      tOMDOBtxsJyH7kdde4CRoWHWV6a4NWmiGc0YHh+GqqD4/HjcXlTHkh/KlgCgmBaWIqBUAscB
      4eCUSiC0+/9xHamjABzyRYtQeydbiU08ToypW7ewDAMtH2by1iSO4ZNngiUAOH3tOMtR1K4W
      RDIHQT+qz/PQQ6C6rgMktyNsRRN09Q3gFnkW16IMHTqM5uRZWNqg/9Bhmjw7ixlyHaCxEUIg
      klnEdgbF70FpD6CoD39ORi6ESRoaOQ0qaWjkeQDJA0MIsTPrp/DQY/tPihSA5IFQWI+x9f8u
      YeeL+I8N0P7lp1D1hzvD80mQIZCk7tj5Iht/dYHOV55h8B++gp0vkrg8td9u7YkUgKTulOJp
      NK8bT187erOP4JOjZOfW9tutPZECkNQdI9SMnS9SWI1gpnIkr8/SNNK3327tiRwDSOqO5nXT
      87fOsfWDj8cAY4O0nDm2327tiVwHkDwwdlctOQskaTgOaqXfjRwDSBoa2QNIPhW5TIbNtRU0
      XaenfxDD7d5vlz4Vn6gH2NzcZGJigs3NzQftj+QRIJfNcPPGNTxeL0IIJq5dwXEe/l7+enDf
      HiCbzfL666/j8exsVf32t7+NrsuOo5HZWlulq7efnoGd723lMmkSsSitHZ33+cuDx317AMMw
      cLvdTE9PYxgGmnbwlrMlDxeXYVAqFnb+IQSlUgndVf939jwM7tuUK4pCR0cHwCeaslybm0Jp
      7sVjR7g8scRTzzyL24xz6epNnjjzHF2tfnkm+BGnq7efyQ+vMnHtMpZp4vM30xxs2W+3PhX3
      FYCqqjz22GOUSiXefvttzp49e9deoJDc4tKHExweNdhcmeaF58/w7gcTYIb50rnzXLz4IV1f
      +RJSAY82LsPgiafPkoxvo+s6/sDDP8xeL+4rANu2uXjxIolEAve9RvqOxTs//4Djjx0lkUii
      e4J4fH48qoLSFMTna0IX8kzw54mm5gAApvng3t//oLmnAGzb5tKlSwSDQYLBIK2trah3ObYm
      hMNAfz/xyAbhlAePk2BtZZmipqHmkyyvLGHpbnkmWHKguKcAFEWhq6uLyclJstks99o1oWgG
      xx9/EsvMk82Dy0kzOb/O2acfx2UPMXFriWfOPsUj2lM2FLZts7K0RKlYxGW4GBg69Lmd+bvn
      LJCqqvT09JDJZBBCEI/H7ykCAN3lJRjw4mvp5MzpJ2n2uvD4W3n6zFMEmx7NxZJG4/2LF7n6
      /iVQ4Ma1a1x85+37PvdHlXsKQAiBx+NhbGyMQCBAqVT63BaE5DYfXb/GV179GkfHjvOVV15l
      anIC267/xykOAvfs1xzH4Qc/+AGapvHss8/S0dHxyI72JZ8cj9dLJp0m2NJCNpvBZRif2+d+
      z+3QQghM02R9fZ0333yTfD7Pd7/73boshsnt0PtILAYfXtt5K9uRo3B4GHZNbqwuL/PD7/81
      wZYWkok4L33tGwwdPvy5FME9BeA4Dm+++SYrKysEg0FOnjzJ8PBwXQpCCmCfKBTgp6/DmWfA
      64PL78PoURgYqLosl80SCW/R1tGB39+8T84+eO7bA2xvbxMIBHDVealbCmCf2FiHuVk490s7
      /15ahK1NOPvcvrq1X9x3GrStre1h+SKpE8K2seMJFLeB6vdX99jBIKRSkE6DYcDaGnR375+z
      +8znc3K3gXEKBRJ/8qdY4TDCsmh+5RV8z5y5fYGvCZ44CRcv7LyVuacXhg7tm7/7jRTA54zs
      W2+jBYOEfv3XcAoFor/7exgjw+itrbcv6h+Anh5wBLhcNPLqpDwS+TnDXF3FOHIExTDQAgG0
      UAh7e7v6IkUB3bUTAjVw5QfZAzySpAp5IpkM3YEATUb16rr36dNkXn8Dva0NK7yFnUzh6u/f
      J08PPvK1KI8QQgimIltcWV2is6mZzUyKF0fH6Nu1F18IQf7KFbJvvIkaaiH4d36lOvyRVCEF
      8AhRsi3+8sY1vjb2OEGvl41UkouLc/zKydP77dojixwDPEIIsdPCuz5eiXfrOubndI/Ow6LO
      YwCB44jKmYHynn8hBI7joGqaPAx2DwSQyOV4a3aakm3z/MgRugKBSpkZmsZwWwdvzt5iKNTG
      VGSLJ/sG7pWl5D7UMQQSjF++xGY8jSfQS1CJsBLLMXDkSTy5ZaaXY/SNPM6p40MoyBBoLwqm
      yX9+/Uec7hvA7dJ5d36Of/n8i7T7/ZVrbMdhYTvKZirFYKiV/pYQaoPP5HwW6toDHD3xBPrM
      JEuxbXK2xqsvP887P5sAJc/Xv/FV3nrjPcTY4M4H0j7+z3EcMPPYSxcQhRTa8PMovsYUxfXV
      FXoDAb71+BMA5EslLi7M8c0TT1SuUYDh1naGWz8uIyFw5Bb1T00dBaAgbIuiDY5jo6Oj7Hwb
      B1QFBQXBzsuTyhVfCIFjlSi88dvoTe0ovjbyP/x3GC/+B9RAb1XuRcshXbRpdmu49c/n0KXJ
      MEjm8li2jQLEczkOtbY9si+dehSoXwjkmHxw8SLpoonpNBHUtokXBaG+43hyC6xGC4S6Rvji
      meMoyu0QKGSuUbr+J3he/R1AwfzofyMKCdxn/ymwI5ZYzuLKagavSyVvOjzd76fNp1ftcRFC
      gGMCCqh67Y5V4UBqDUppaDkMLg+7X08hhGA7F2MmcouBliF6g/135CEwHYvV7CIqKn1NQ+iq
      dkceDuntGXLJJULdpzG8bXf46GDGLmAlrqC4O3B3fwvVFaik247DH1y8QCKXw6VrCAH/4vzz
      +OS56QdGfadBhcCy7Y/PjwpKJQvDcCGEwLIsdJerUl0qArC3KH3wh3i+/l9BUTGv/wnYJsaZ
      3/g4S8FPZxM81een1ediO2dybS3Di6MtlcolbBPzxp9jzb4BmoFx+h+gH/rSLr8cWHwLshHw
      hnaEMPZt8N6eH58O3+TPr/0xRzvGWIzP89zQl/ilkRcrNop2gR+vfg+v7scRNpZj8dX+b6Gr
      ro/9dFia+FNia5fwh4aJb17nxLl/T3PraMVGKfYudnYWd9fXsHPLmPH38B76TRT1dgV3HIe5
      WBTTtjna2YW+D9/ObSTqOwukKLsOTysYhuvjn5W7bqdWO8ZQvCEKP/mPKN5WnNgMnpd/u+qa
      ki3wfhz2eF0qJbtas/biBezIrR0RFTMU3vhPqO1HUf07L/Qivw2pVXji13cOfoTHYe0DGH2l
      ksffTP4Vv3bmNxhuGyWRj/P7F36XZwafw2c0ATCfnqbFaONc90sAvL72fVayixxuPrLjYz5G
      eOkdnnr5v+Ey/GxvXGH++h9y6sXfqdiwktdw93wH1d2JYrRhbv8cUYqjeLpul4eqcuQRfMXg
      o8q+b4VQVA33C/8We/0aopDE/dx3UT6udGUGWtx8uJHlUMjDUrzAQEv18r+9eQP90HnUpnZo
      akdtHcaJzd4WgHBA0W5HK6oLHKsqD8u2cGk7LbGmaAiqP/BgOza6eru4dEXHFrfn4IVwUBQF
      RdkRqqZ7cOzqdx6p3gHszBSq0Y5jJhBOCUX3I9k/9l0AAIrmQh84u3eaonC808divMD8doGu
      ZheHQp6q2Frrexrz5vfRuk8iCkmc7TnUjn92OxNfO3haYOaHOyFQbBpGX62y89Wxr/OnV/4H
      T/Y9zUzkFk/1PV1p/QGGA0f50cr3uBR+B1vYpMwkg/7hSrrb10FL1yluXvwvNLcdI7z0FkfP
      /PMqG+7Or1JY/TOs5IcIwN3zLRS9WuySh8vnYiuEcCzMm9/HmvxrcHkxnvkn6H13bA9wrJ2K
      X0xB29EdIdwxCF7cnufm1gRDoUOMdZ1AU3effRbkrBxzqVuoispw8zG8urcqD8c2ia1dIptc
      pK3vOfyhkZrBuBAWwsqgqG4UzfuZ713y2fhcCEAi+bTIKQZJQyMFIGlopAAkDY0UgKShkQKQ
      NDRSAJKGRgpA0tBIAUgaGikASUMjBSBpaOoqgMx2mKtXrrIVS5FLhPngynXS+RKFdJwrl6+S
      zBbraU4i+czUUQCCSCROX38XV9+7zIWfX6av088Hlyd479JFurrbuPz+deTxVclBoq5nggeG
      +rn47tv0HjlCeDVGT18/8/PjKN4g/f39zNxclN8Jlhwo6igAweWfvUP/42c51NXCj6dmKGRT
      5IWAbIpsLo2laPI7wZIDRV0PxIQ62lm69RGJ2ABnz4zxs0sTnD77HO5SjHd/doVTzzyLfDOW
      5CAhzwNIGho5DSppaKQAJA2NFICkoZECkDQ0UgCShkYKQNLQSAFIGhopAElDIwUgaWikACQN
      jRSApKGRApA0NFIAkoZGCkDS0NRVAMKx2FjdwAEKmTg3p2bIFS1KuTS3bk2RKcjTX5KDRV0F
      sDQ9zlvvXMLG4ecXLqKJPJeuTPLez98BLN5//4Y8Eyw5UNT1RNjQsVNsbuTBzmMbbRw5epTw
      z8ZRPEHGxsbYWLkgzwRLDhR1FcDO54AEqG6sfJxiLkPBEZDLkC9kcVR5JlhysKjjkUjB7Pg1
      5lbDtHYN0hdSuDG9xsmnn8VdjPD+h7M8fvos/V0tKMgjkZKDgTwTLGlo5DSopKGRApA0NFIA
      koZGCkDS0EgBSBoaKQBJQyMFIGlopAAkDY0UgKShkQKQNDQPRQBCCCzLRO6Elhw06rob9G6M
      f/AWy+EcbX1HefbJIyjyIxmSA8JD6QHiBYVvfPMV8tENhOwHJAeIhyIAxxEghPw8kuTA8VAE
      0N3i4q//749o7upHkSqQHCAeynkAIcTOCTBdr1R/eR5AchB4KINgRVHQ9R1TOzNCO2eC0+k0
      juM8DBckkj05UCfCHMdBVW9HZaZp4nK57ppuWRaqqlZ+E0IghPiF8tgrXVGUj8837/ipKMoD
      teE4DkIINE37TGWhaVolz/Jj3f1v27YrDdGnsbEfZfGgfXgoPcAnZbeTnyZ9d0E+yjbqkcf9
      fKyXjQddFg/ahwOxEmyaJktLS0xNTRGNRiut1+7WqowQgmg0ClDV4kWjUdbW1hBCsL29Xbm+
      nEepVGJlZYV4PM7s7Cy2bVelCyHIZDJkMhkWFhYoFovATuGVbWQyGYQQLC8vEw6Ha/zM5/PY
      ts36+jq3bt3Csqya+5ifn6dYLLK7493domWzWdbW1tjc3GR5ebkSIpbzcByHcDjM5OQkW1tb
      lfTdvUc6nWZmZobZ2VlyuVzl993XlMnn82QymSobtm2ztLREMplECEE8Hq8pi3g8TiQSYW1t
      jY2NjZryNk2TTCZDLBZjfX29prwdxyGbzVIoFJibmyObzVaVhRCCbDZLIpFgYmKi4uNuH5aX
      lyvPZDe7fVhZWSEWizE9Pb3nMz8QApiamqKpqYnBwUHC4XClApdvNJvNcuXKFcbHx5mYmGBl
      ZaWSrigKQggWFhYolUosLS2xurpaybucx9TUFKqq8uGHH+L3+yvXlNNN0+TChQusrKwwOztL
      Op2usgE7lTeVSpFOp1ldXa1U8HL6ysoK2WyWaDRKf38/s7OzVenla27dusXU1FTlnUi772Nu
      bo5SqUQ0GqVQKFQefDmPSCRCPB7HcRySySRLS0s1eUxOTtLT00NXVxcTExM197G0tMSNGzcY
      Hx9nfHy86l4BkskkuVyuUjHX19drbMzPz7O5uUkikaik785jbW2Nq1evsrq6yuLiIqZpVqVb
      lsXKygozMzO0tLQwMzNT4+fc3Bzz8/OMjo6ysLBQk76xscHy8jLj4+OkUqmasG9hYQFVVZmZ
      maGtrY3FxcWqdCHEwQiBmpubWVpaQtd1SqUSXq+3Kt3tduPz+RgdHQV2KuKdeDweBgcHmZub
      Y319nZMnT1alG4ZBe3s7mqahqmpVjAjgcrk4f/488/Pz+P3+u85OjY+P77zka2Ojpuvt7u5m
      enqaSCRCoVBgbGys5u/b2to4ceIE6XSacDhMf39/jZ+RSASAXC7HwMBAjZ+5XI5iscjJkyer
      Kt/ua2ZnZxFC4PF4atIDgQCKotDT00Mymay0jGXcbjcul4uRkRGuX7++ZwjhdrsZGRmhUChU
      RLiboaEhPB4PCwsL9PT01Pihqirb29sIIRgdHd3z/VCBQIDx8XEAOjs7a9Kbmpo4fvw4hUKB
      zc1Nmpuba9I3NjYqDeTg4GBVuqIoaK+99tprNTk/BIQQFAoFfD4fbrcbTdNobm7G4/HQ1tZW
      Vbl2zxxtbm4yMDBQVYEVRcHlcpHJZNA0jf7+fpqamqrsBQIBIpEIhmGQSCQYGBioebCxWIxQ
      KFQRodvtrkr3eDz4/X4sy8Lr9VYqUply9zw0NISiKHR2dtbYsG2bYrFIIpEgGAxWVQxFUfB4
      PLjdboLBIF6vl9bW1iobLpcL0zTp7u4mEokwMDBQFWIpioLf76dUKuHz+RgaGqoJJXVdJ5vN
      EolE8Pv9NeXtcrlwHIeNjQ06OzsZGRmpug9FUWhqamJra4t8Pk9fX19NWQkhSCaTFX/8fn+V
      jfLviqJg2zaDg4NVIZqiKLjdbnRdp62tja6urpqy9Pl8bGxskEql6OzsxDCMKht+vx/YCf06
      Ozvp7OysabQORAg0NzeHZVlsbm5i2zaxWKwqPZlMkk6nmZycpLW1taYHEEKwuLhINBqtxH13
      Mjs7i6IoLC4u4vP5alrOYrFIOBzm5s2b9Pb2VrrL3TYWFhbIZDKk02kikUglBCqzsrKCEILZ
      2VlaWlqYm5uryWN1dZWFhQWampr2tFEeI9wZApWJRCIIIbh16xahUKgSGuzOY2pqCrfbTTqd
      5ubNmzVlMTMzg2EYxOPxShizm1QqxdbWFqZpkk6n72rD4/EQj8cr4ctuZmdn0TSNXC5HOp1m
      a2urKt00TRYWFnAch0wmU5OHEILp6enKWGKvspyZmcHr9bK9vc309HTNWGBxcbEytkulUjXP
      /MCMATweD9FolFKpRDKZrOkuXS5XpTVZX1+vCZHKZLPZu64tlFssy7KIRCI1PYSqquTzeRRF
      YWNjoyZEgp2WJJFIkMvlKJVKNa2J1+utDI7X1tYIBAI1eZimWfFhr0GpYRjEYjFKpRKZTKbG
      D7fbTSwWq5TFnfcBO61nOp2mvb19zxDI7XaTSqVwu910dHTUCFnTNEzTJJ/P09/fX1OxyuWV
      SqUIhUL4fL49baTTaVRVpbe3tzIG2O1jufL39PTsWRa6rpPJZOjr69tzpkfTNJLJJC0tLfj9
      /ho/DcOoNCB9fX0176E9MCFQc3MzpmmiaRrt7e20tbVVXWsYBrquo6oqbrebQ4cO1XTJzc3N
      lQc5MjJS0yUHAgFKpRK6rhMMBunu7q5KV1W1UllcLhfDw8M1XXIgEKjYGBoaqql85fBI13X8
      fn/NgyuHDkIIFEVhdHS0Jnwp30c5Rm9paamyUfZR0zS8Xi+Dg4M1NsqtoqZpe4ZAzc3NhMNh
      DMPYc7xTDrNM00RVVQYHB/cMgcLhMC6XqyYkLZd3OBxG13Xcbjc9PT015V1udO5mw+/3Vyrw
      nSHrnT709vbWiN3v9xOLxdA0DV3Xa8ZbcEBCoOnpafx+P6lUikQiQTKZrEpPJBLE43Esy6qE
      Irspd5fl2Hd6enpPGz6fj0wmQz6fJxwOV6UXi8XKNKqiKJUZnN02pqamCAaDZLNZFhcXa1rO
      paWlykO1LIu1tbWqdMdxmJubQ9d1FEVhampqz/sIBoOVQXJ5erBMOe4ulUo4jlMzAC3PJLW1
      tZHP55mcnKwpi5mZGTo7O0kmk4TD4co0Z5nyTJeu6+Tz+buGH93d3fcMs9ra2sjlcsTj8T1D
      oI2NDbxeL4VCoeaZlW0oikKhUNjzeczMzNDb20symWR6erqm519YWCAQCFAsFg92COR2u8lk
      Mni9Xtrb22sqlq7rWJZFqVSit7d3zy5Z0zQymQyhUGjPsMDj8ZDJZNB1ne7u7m0SDq0AAAO5
      SURBVJouuTz3nM/n6e7u3rNLdrlcpNNpAoEAgUCgxg+3212Zd+/v76+sJZQpT+Hlcjna29tr
      einY6e1SqRRNTU2EQqGah2oYRiWM6uvrq5nBKZdFNpslFArtGS6WwxOPx7NnCKTremWw3tvb
      u2f4UQ5PWlpa7lvePT09NeFHuTXP5XJ0dXXtuebjcrnI5/P09PTsORNVfh4tLS00Nzff9Xko
      ikJfX9+ezwOxT1iWJSKRiBBCCNu2RTweF6Zpimw2KzKZTM31mUxGZLNZ4ThO5e92Y5qmiMfj
      d013HEfE43FRKpVEsVgUiUSi5ppcLifS6fRd87AsS2xvbwvHcUQsFhOWZdVck0wmRaFQEI7j
      iGg0WpNeKBREMpm8qw3btsX29rawLEukUilRKBRqrkmlUiKXy93VRvn+7lcWpmlW7vlOMpmM
      yGQyn7q8hRAiHo+LYrEoSqWSiMfjNemfpLzv98zLzyMajQrbtmuuSSQSolAoCMuyRCwWq0k/
      EOsAy8vLbG9vo6oquVyOkZGRqlYlm80yMTFRmSt2HKcmbp2YmKi0ANFolJdeeqkqfX19na2t
      LVRVxTRNOjo6CAaDlXTTNLlx40alVS4WizU2pqenKRQKKIpCLBbj/PnzVT1FJBJheXm58pth
      GDXjmevXr1dsZDIZzp07V5U+Pz9POp1GURRSqRSnTp2q6inK3X055lZVtcbG+Ph4pcVMJBK8
      8MILNeUdi8Uq4dqhQ4cqU4aw0yrvLm/btmvK4ubNm5XeJxKJ8PLLL9eU9+bmJqqqYlkWoVCo
      ajxjWVZVeRcKhRobMzMzlYkJ0zRr0qempiq7CKLRKF/+8per0re2tlhdXUXTNBzHoampidbW
      1kq6OEgLYV6vl66uLuLxeE23bhgGoVCoshB2Z0wKOzMww8PD6Lq+57RcMBiszDfn8/maqVZN
      02hpaeHo0aN3teHz+RgcHKxMYd4ZGvj9fkKhEMPDw5VY/E4CgUBlgWyvdL/fT2trK62trZUK
      dOd9hkIhRkZG7lkWx44dq6yC7uWDYRiVhbA7QwPDMGhpaeHIkSN3teHxeBgaGsIwjLuWd6lU
      4tChQxSLxZoxgKqqBINBjh07dlcbPp+PgYEBfD7fPZ+51+vdc3E0EAjQ2trK4cOHK9s77uRA
      7AYVu3b0lWPeOx98eddg+W/vjBnLt6EoSmUm5s70sg0hBI7j1MT5v4gN27ar9qXszqNsY688
      flEbu/cJfdI8du+wvF9ZPKjyvrMsPkt5f9Kyut/z2MuH/w/jUGhFcnJdRAAAAABJRU5ErkJg
      gg==
    </thumbnail>
    <thumbnail height='192' name='mortality 1960' width='192'>
      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
      A3QAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
