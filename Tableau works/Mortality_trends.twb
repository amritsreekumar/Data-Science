<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20181.18.0510.1418                               -->
<workbook source-build='2018.1.1 (20181.18.0510.1418)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SortTagCleanup />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Data (mortalityrates)' inline='true' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='mortalityrates' name='excel-direct.1lminzr1vxudjh1chy39k0isww4p'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/macbook/Desktop/mortalityrates.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
          <named-connection caption='african countries' name='excel-direct.12yn0pf1btutlr1383hcf1dmy61q'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/macbook/Desktop/african countries.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
          <named-connection caption='europe and australia' name='excel-direct.0ldl3ip0dhmv5n17ido6v0rb3csz'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/macbook/Desktop/europe and australia.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.1lminzr1vxudjh1chy39k0isww4p' name='All countries' table='[Data$]' type='table'>
          <columns gridOrigin='A1:BH265:no:A1:BH265:0' header='yes' outcome='2'>
            <column datatype='string' name='Country Name' ordinal='0' />
            <column datatype='string' name='Country Code' ordinal='1' />
            <column datatype='string' name='Indicator Name' ordinal='2' />
            <column datatype='real' name='1960' ordinal='3' />
            <column datatype='real' name='1961' ordinal='4' />
            <column datatype='real' name='1962' ordinal='5' />
            <column datatype='real' name='1963' ordinal='6' />
            <column datatype='real' name='1964' ordinal='7' />
            <column datatype='real' name='1965' ordinal='8' />
            <column datatype='real' name='1966' ordinal='9' />
            <column datatype='real' name='1967' ordinal='10' />
            <column datatype='real' name='1968' ordinal='11' />
            <column datatype='real' name='1969' ordinal='12' />
            <column datatype='real' name='1970' ordinal='13' />
            <column datatype='real' name='1971' ordinal='14' />
            <column datatype='real' name='1972' ordinal='15' />
            <column datatype='real' name='1973' ordinal='16' />
            <column datatype='real' name='1974' ordinal='17' />
            <column datatype='real' name='1975' ordinal='18' />
            <column datatype='real' name='1976' ordinal='19' />
            <column datatype='real' name='1977' ordinal='20' />
            <column datatype='real' name='1978' ordinal='21' />
            <column datatype='real' name='1979' ordinal='22' />
            <column datatype='real' name='1980' ordinal='23' />
            <column datatype='real' name='1981' ordinal='24' />
            <column datatype='real' name='1982' ordinal='25' />
            <column datatype='real' name='1983' ordinal='26' />
            <column datatype='real' name='1984' ordinal='27' />
            <column datatype='real' name='1985' ordinal='28' />
            <column datatype='real' name='1986' ordinal='29' />
            <column datatype='real' name='1987' ordinal='30' />
            <column datatype='real' name='1988' ordinal='31' />
            <column datatype='real' name='1989' ordinal='32' />
            <column datatype='real' name='1990' ordinal='33' />
            <column datatype='real' name='1991' ordinal='34' />
            <column datatype='real' name='1992' ordinal='35' />
            <column datatype='real' name='1993' ordinal='36' />
            <column datatype='real' name='1994' ordinal='37' />
            <column datatype='real' name='1995' ordinal='38' />
            <column datatype='real' name='1996' ordinal='39' />
            <column datatype='real' name='1997' ordinal='40' />
            <column datatype='real' name='1998' ordinal='41' />
            <column datatype='real' name='1999' ordinal='42' />
            <column datatype='real' name='2000' ordinal='43' />
            <column datatype='real' name='2001' ordinal='44' />
            <column datatype='real' name='2002' ordinal='45' />
            <column datatype='real' name='2003' ordinal='46' />
            <column datatype='real' name='2004' ordinal='47' />
            <column datatype='real' name='2005' ordinal='48' />
            <column datatype='real' name='2006' ordinal='49' />
            <column datatype='real' name='2007' ordinal='50' />
            <column datatype='real' name='2008' ordinal='51' />
            <column datatype='real' name='2009' ordinal='52' />
            <column datatype='real' name='2010' ordinal='53' />
            <column datatype='real' name='2011' ordinal='54' />
            <column datatype='real' name='2012' ordinal='55' />
            <column datatype='real' name='2013' ordinal='56' />
            <column datatype='real' name='2014' ordinal='57' />
            <column datatype='real' name='2015' ordinal='58' />
            <column datatype='real' name='2016' ordinal='59' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Country Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country Name]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>Country Name</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country Code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country Code]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>Country Code</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Indicator Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Indicator Name]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>Indicator Name</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1960</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1960]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1960</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1961</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1961]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1961</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1962</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1962]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1962</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1963</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1963]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1963</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1964</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1964]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1964</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1965</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1965]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1965</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1966</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1966]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1966</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1967</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1967]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1967</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1968</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1968]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1968</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1969</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1969]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1969</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1970</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1970]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1970</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1971</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1971]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1971</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1972</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1972]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1972</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1973</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1973]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1973</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1974</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1974]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1974</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1975</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1975]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1975</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1976</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1976]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1976</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1977</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1977]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1977</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1978</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1978]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1978</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1979</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1979]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1979</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1980</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1980]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1980</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1981</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1981]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1981</remote-alias>
            <ordinal>24</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1982</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1982]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1982</remote-alias>
            <ordinal>25</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1983</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1983]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1983</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1984</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1984]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1984</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1985</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1985]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1985</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1986</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1986]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1986</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1987</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1987]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1987</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1988</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1988]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1988</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1989</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1989]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1989</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1990</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1990]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1990</remote-alias>
            <ordinal>33</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1991</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1991]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1991</remote-alias>
            <ordinal>34</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1992</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1992]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1992</remote-alias>
            <ordinal>35</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1993</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1993]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1993</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1994</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1994]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1994</remote-alias>
            <ordinal>37</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1995</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1995]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1995</remote-alias>
            <ordinal>38</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1996</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1996]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1996</remote-alias>
            <ordinal>39</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1997</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1997]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1997</remote-alias>
            <ordinal>40</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1998</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1998]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1998</remote-alias>
            <ordinal>41</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1999</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1999]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>1999</remote-alias>
            <ordinal>42</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2000</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2000]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2000</remote-alias>
            <ordinal>43</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2001</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2001]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2001</remote-alias>
            <ordinal>44</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2002</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2002]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2002</remote-alias>
            <ordinal>45</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2003</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2003]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2003</remote-alias>
            <ordinal>46</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2004</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2004]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2004</remote-alias>
            <ordinal>47</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2005</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2005]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2005</remote-alias>
            <ordinal>48</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2006</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2006]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2006</remote-alias>
            <ordinal>49</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2007</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2007]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2007</remote-alias>
            <ordinal>50</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2008</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2008]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2008</remote-alias>
            <ordinal>51</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2009</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2009]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2009</remote-alias>
            <ordinal>52</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2010</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2010]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2010</remote-alias>
            <ordinal>53</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2011</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2011]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2011</remote-alias>
            <ordinal>54</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2012</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2012]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2012</remote-alias>
            <ordinal>55</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2013</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2013]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2013</remote-alias>
            <ordinal>56</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2014</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2014]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2014</remote-alias>
            <ordinal>57</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2015</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2015]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2015</remote-alias>
            <ordinal>58</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2016</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2016]</local-name>
            <parent-name>[All countries]</parent-name>
            <remote-alias>2016</remote-alias>
            <ordinal>59</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[All countries]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:BH265:no:A1:BH265:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' name='[1960]' role='measure' type='quantitative' />
      <column datatype='real' name='[1961]' role='measure' type='quantitative' />
      <column datatype='real' name='[1962]' role='measure' type='quantitative' />
      <column datatype='real' name='[1963]' role='measure' type='quantitative' />
      <column datatype='real' name='[1964]' role='measure' type='quantitative' />
      <column datatype='real' name='[1965]' role='measure' type='quantitative' />
      <column datatype='real' name='[1966]' role='measure' type='quantitative' />
      <column datatype='real' name='[1967]' role='measure' type='quantitative' />
      <column datatype='real' name='[1968]' role='measure' type='quantitative' />
      <column datatype='real' name='[1969]' role='measure' type='quantitative' />
      <column datatype='real' name='[1970]' role='measure' type='quantitative' />
      <column datatype='real' name='[1971]' role='measure' type='quantitative' />
      <column datatype='real' name='[1972]' role='measure' type='quantitative' />
      <column datatype='real' name='[1973]' role='measure' type='quantitative' />
      <column datatype='real' name='[1974]' role='measure' type='quantitative' />
      <column datatype='real' name='[1975]' role='measure' type='quantitative' />
      <column datatype='real' name='[1976]' role='measure' type='quantitative' />
      <column datatype='real' name='[1977]' role='measure' type='quantitative' />
      <column datatype='real' name='[1978]' role='measure' type='quantitative' />
      <column datatype='real' name='[1979]' role='measure' type='quantitative' />
      <column datatype='real' name='[1980]' role='measure' type='quantitative' />
      <column datatype='real' name='[1981]' role='measure' type='quantitative' />
      <column datatype='real' name='[1982]' role='measure' type='quantitative' />
      <column datatype='real' name='[1983]' role='measure' type='quantitative' />
      <column datatype='real' name='[1984]' role='measure' type='quantitative' />
      <column datatype='real' name='[1985]' role='measure' type='quantitative' />
      <column datatype='real' name='[1986]' role='measure' type='quantitative' />
      <column datatype='real' name='[1987]' role='measure' type='quantitative' />
      <column datatype='real' name='[1988]' role='measure' type='quantitative' />
      <column datatype='real' name='[1989]' role='measure' type='quantitative' />
      <column datatype='real' name='[1990]' role='measure' type='quantitative' />
      <column datatype='real' name='[1991]' role='measure' type='quantitative' />
      <column datatype='real' name='[1992]' role='measure' type='quantitative' />
      <column datatype='real' name='[1993]' role='measure' type='quantitative' />
      <column datatype='real' name='[1994]' role='measure' type='quantitative' />
      <column datatype='real' name='[1995]' role='measure' type='quantitative' />
      <column datatype='real' name='[1996]' role='measure' type='quantitative' />
      <column datatype='real' name='[1997]' role='measure' type='quantitative' />
      <column datatype='real' name='[1998]' role='measure' type='quantitative' />
      <column datatype='real' name='[1999]' role='measure' type='quantitative' />
      <column datatype='real' name='[2000]' role='measure' type='quantitative' />
      <column caption='Percentage decrease60-80' datatype='real' name='[Calculation_477170460220043275]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='((SUM([1960])-SUM([1980]))/SUM([1960]))*100' />
      </column>
      <column caption='Percentage decrease80-2000' datatype='real' name='[Calculation_620159748490080258]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='((SUM([1980])-SUM([2000]))/SUM([1980]))*100' />
      </column>
      <column datatype='string' name='[Country Code]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column-instance column='[1960]' derivation='Avg' name='[avg:1960:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[diff:usr:Calculation_477170460220043275:qk:2]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='CellInPane' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[diff:usr:Calculation_477170460220043275:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Columns' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
      <column-instance column='[1960]' derivation='Sum' name='[pcto:sum:1960:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1960]' derivation='Sum' name='[pcto:sum:1960:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1961]' derivation='Sum' name='[pcto:sum:1961:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1961]' derivation='Sum' name='[pcto:sum:1961:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1962]' derivation='Sum' name='[pcto:sum:1962:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1962]' derivation='Sum' name='[pcto:sum:1962:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1963]' derivation='Sum' name='[pcto:sum:1963:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1963]' derivation='Sum' name='[pcto:sum:1963:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1964]' derivation='Sum' name='[pcto:sum:1964:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1964]' derivation='Sum' name='[pcto:sum:1964:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1965]' derivation='Sum' name='[pcto:sum:1965:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1965]' derivation='Sum' name='[pcto:sum:1965:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1966]' derivation='Sum' name='[pcto:sum:1966:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1966]' derivation='Sum' name='[pcto:sum:1966:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1967]' derivation='Sum' name='[pcto:sum:1967:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1967]' derivation='Sum' name='[pcto:sum:1967:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1968]' derivation='Sum' name='[pcto:sum:1968:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1968]' derivation='Sum' name='[pcto:sum:1968:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1969]' derivation='Sum' name='[pcto:sum:1969:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1969]' derivation='Sum' name='[pcto:sum:1969:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1970]' derivation='Sum' name='[pcto:sum:1970:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1970]' derivation='Sum' name='[pcto:sum:1970:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='RowInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1961]' derivation='Sum' name='[sum:1961:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1962]' derivation='Sum' name='[sum:1962:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1963]' derivation='Sum' name='[sum:1963:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1964]' derivation='Sum' name='[sum:1964:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1965]' derivation='Sum' name='[sum:1965:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1966]' derivation='Sum' name='[sum:1966:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1967]' derivation='Sum' name='[sum:1967:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1968]' derivation='Sum' name='[sum:1968:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1969]' derivation='Sum' name='[sum:1969:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1970]' derivation='Sum' name='[sum:1970:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1971]' derivation='Sum' name='[sum:1971:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1972]' derivation='Sum' name='[sum:1972:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1973]' derivation='Sum' name='[sum:1973:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1974]' derivation='Sum' name='[sum:1974:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1975]' derivation='Sum' name='[sum:1975:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1976]' derivation='Sum' name='[sum:1976:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1977]' derivation='Sum' name='[sum:1977:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1978]' derivation='Sum' name='[sum:1978:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1979]' derivation='Sum' name='[sum:1979:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1980]' derivation='Sum' name='[sum:1980:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1981]' derivation='Sum' name='[sum:1981:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1982]' derivation='Sum' name='[sum:1982:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1983]' derivation='Sum' name='[sum:1983:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1984]' derivation='Sum' name='[sum:1984:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1985]' derivation='Sum' name='[sum:1985:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1986]' derivation='Sum' name='[sum:1986:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1987]' derivation='Sum' name='[sum:1987:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1988]' derivation='Sum' name='[sum:1988:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1989]' derivation='Sum' name='[sum:1989:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1990]' derivation='Sum' name='[sum:1990:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1991]' derivation='Sum' name='[sum:1991:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1992]' derivation='Sum' name='[sum:1992:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1993]' derivation='Sum' name='[sum:1993:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1994]' derivation='Sum' name='[sum:1994:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1995]' derivation='Sum' name='[sum:1995:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1996]' derivation='Sum' name='[sum:1996:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1997]' derivation='Sum' name='[sum:1997:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1998]' derivation='Sum' name='[sum:1998:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1999]' derivation='Sum' name='[sum:1999:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2000]' derivation='Sum' name='[sum:2000:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[usr:Calculation_477170460220043275:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.324597' measure-ordering='alphabetic' measure-percentage='0.675403' show-structure='true' user-set-layout='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Country Name:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Middle East &amp; North Africa&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;South Asia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Caribbean small states&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Central Europe and the Baltics&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Latin America &amp; Caribbean&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sub-Saharan Africa (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Syrian Arab Republic&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Korea, Dem. People’s Rep.&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Late-demographic dividend&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Not classified&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Arab World&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Early-demographic dividend&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;High income&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;IDA total&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Other small states&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Heavily indebted poor countries (HIPC)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Post-demographic dividend&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;South Asia (IDA &amp; IBRD)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;St. Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Northern Mariana Islands&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;East Asia &amp; Pacific&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Euro area&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Low income&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lower middle income&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;St. Martin (French part)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Venezuela, RB&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Europe &amp; Central Asia (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Macedonia, FYR&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Middle East &amp; North Africa (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sint Maarten (Dutch part)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sub-Saharan Africa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Swaziland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;East Asia &amp; Pacific (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kyrgyz Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pacific island small states&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;IDA &amp; IBRD total&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Virgin Islands (U.S.)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bahamas, The&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Fragile and conflict affected situations&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Iran, Islamic Rep.&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Latin America &amp; Caribbean (excluding high income)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Macao SAR, China&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;OECD members&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;European Union&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Latin America &amp; the Caribbean (IDA &amp; IBRD countries)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;IDA only&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Korea, Rep.&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Small states&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;St. Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sub-Saharan Africa (excluding high income)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Upper middle income&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Congo, Dem. Rep.&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hong Kong SAR, China&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;St. Lucia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;West Bank and Gaza&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Gambia, The&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Low &amp; middle income&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Europe &amp; Central Asia (excluding high income)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;IDA blend&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lao PDR&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Least developed countries: UN classification&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Pre-demographic dividend&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Congo, Rep.&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;East Asia &amp; Pacific (excluding high income)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Europe &amp; Central Asia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Faroe Islands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Middle income&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;IBRD only&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Micronesia, Fed. Sts.&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Slovak Republic&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Egypt, Arab Rep.&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Middle East &amp; North Africa (excluding high income)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Russian Federation&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Yemen, Rep.&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1968:qk:1]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1968:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1968:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1988:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[avg:1960:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[diff:usr:Calculation_477170460220043275:qk:2]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[diff:usr:Calculation_477170460220043275:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1960:qk:1]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1960:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1964:qk:1]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1964:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1964:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1984:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1972:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1992:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1969:qk:1]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1969:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1969:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1989:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1965:qk:1]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1965:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1965:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1985:qk]&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1978:qk]&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1998:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1961:qk:1]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1961:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1961:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1981:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1976:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1996:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1966:qk:1]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1966:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1966:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1986:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1973:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1993:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1974:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1994:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1977:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1997:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1979:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1999:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1970:qk:1]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1970:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1990:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1967:qk:1]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1967:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1967:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1987:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1962:qk:1]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1962:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1962:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1982:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1975:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1995:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1971:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1991:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_47287801348087813:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460218281988:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1963:qk:1]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[pcto:sum:1963:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1963:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1983:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='1960-80'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='real' name='[1961]' role='measure' type='quantitative' />
            <column datatype='real' name='[1962]' role='measure' type='quantitative' />
            <column datatype='real' name='[1963]' role='measure' type='quantitative' />
            <column datatype='real' name='[1964]' role='measure' type='quantitative' />
            <column datatype='real' name='[1965]' role='measure' type='quantitative' />
            <column datatype='real' name='[1966]' role='measure' type='quantitative' />
            <column datatype='real' name='[1967]' role='measure' type='quantitative' />
            <column datatype='real' name='[1968]' role='measure' type='quantitative' />
            <column datatype='real' name='[1969]' role='measure' type='quantitative' />
            <column datatype='real' name='[1970]' role='measure' type='quantitative' />
            <column datatype='real' name='[1971]' role='measure' type='quantitative' />
            <column datatype='real' name='[1972]' role='measure' type='quantitative' />
            <column datatype='real' name='[1973]' role='measure' type='quantitative' />
            <column datatype='real' name='[1974]' role='measure' type='quantitative' />
            <column datatype='real' name='[1975]' role='measure' type='quantitative' />
            <column datatype='real' name='[1976]' role='measure' type='quantitative' />
            <column datatype='real' name='[1977]' role='measure' type='quantitative' />
            <column datatype='real' name='[1978]' role='measure' type='quantitative' />
            <column datatype='real' name='[1979]' role='measure' type='quantitative' />
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1961]' derivation='Sum' name='[sum:1961:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1962]' derivation='Sum' name='[sum:1962:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1963]' derivation='Sum' name='[sum:1963:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1964]' derivation='Sum' name='[sum:1964:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1965]' derivation='Sum' name='[sum:1965:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1966]' derivation='Sum' name='[sum:1966:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1967]' derivation='Sum' name='[sum:1967:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1968]' derivation='Sum' name='[sum:1968:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1969]' derivation='Sum' name='[sum:1969:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1970]' derivation='Sum' name='[sum:1970:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1971]' derivation='Sum' name='[sum:1971:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1972]' derivation='Sum' name='[sum:1972:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1973]' derivation='Sum' name='[sum:1973:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1974]' derivation='Sum' name='[sum:1974:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1975]' derivation='Sum' name='[sum:1975:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1976]' derivation='Sum' name='[sum:1976:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1977]' derivation='Sum' name='[sum:1977:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1978]' derivation='Sum' name='[sum:1978:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1979]' derivation='Sum' name='[sum:1979:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1980]' derivation='Sum' name='[sum:1980:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1961:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1962:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1963:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1964:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1965:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1966:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1967:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1968:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1969:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1971:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1972:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1973:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1974:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1975:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1976:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1977:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1978:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1979:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1961:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1962:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1963:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1964:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1965:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1966:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1967:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1968:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1969:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1971:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1972:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1973:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1974:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1975:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1976:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1977:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1978:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1979:qk]&quot;</bucket>
              <bucket>&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country Name:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;American Samoa&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Andorra&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bermuda&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;British Virgin Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cayman Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Dominica&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Faroe Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Germany&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gibraltar&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Greenland&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Isle of Man&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kosovo&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liechtenstein&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Marshall Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Monaco&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nauru&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Northern Mariana Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Not classified&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Palau&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;San Marino&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sint Maarten (Dutch part)&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Slovenia&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;St. Kitts and Nevis&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;St. Martin (French part)&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Turks and Caicos Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tuvalu&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;West Bank and Gaza&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1961:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1962:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1963:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1964:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1965:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1966:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1967:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1968:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1969:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1971:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1972:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1973:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1974:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1975:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1976:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1977:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1978:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1979:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1961:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1962:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1963:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1964:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1965:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1966:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1967:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1968:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1969:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1971:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1972:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1973:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1974:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1975:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1976:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1977:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1978:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1979:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Multiple Values]</rows>
        <cols>([federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk] / [federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='1960-80 mortality decrease'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column caption='Percentage decrease60-80' datatype='real' name='[Calculation_477170460220043275]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='((SUM([1960])-SUM([1980]))/SUM([1960]))*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[usr:Calculation_477170460220043275:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Aruba&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belize&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Brunei Darussalam&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Burkina Faso&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cabo Verde&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Costa Rica&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cuba&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gabon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guam&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Hong Kong SAR, China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Korea, Dem. People’s Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liberia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Libya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Macao SAR, China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mali&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;New Caledonia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Papua New Guinea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Peru&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Syrian Arab Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Virgin Islands (U.S.)&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' palette='green_blue_white_diverging_10_0' type='interpolated' />
            <encoding attr='size-bar' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
          <style-rule element='refband'>
            <format attr='reverse-palette' id='refline1' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='1980-2000'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column datatype='real' name='[1981]' role='measure' type='quantitative' />
            <column datatype='real' name='[1982]' role='measure' type='quantitative' />
            <column datatype='real' name='[1983]' role='measure' type='quantitative' />
            <column datatype='real' name='[1984]' role='measure' type='quantitative' />
            <column datatype='real' name='[1985]' role='measure' type='quantitative' />
            <column datatype='real' name='[1986]' role='measure' type='quantitative' />
            <column datatype='real' name='[1987]' role='measure' type='quantitative' />
            <column datatype='real' name='[1988]' role='measure' type='quantitative' />
            <column datatype='real' name='[1989]' role='measure' type='quantitative' />
            <column datatype='real' name='[1990]' role='measure' type='quantitative' />
            <column datatype='real' name='[1991]' role='measure' type='quantitative' />
            <column datatype='real' name='[1992]' role='measure' type='quantitative' />
            <column datatype='real' name='[1993]' role='measure' type='quantitative' />
            <column datatype='real' name='[1994]' role='measure' type='quantitative' />
            <column datatype='real' name='[1995]' role='measure' type='quantitative' />
            <column datatype='real' name='[1996]' role='measure' type='quantitative' />
            <column datatype='real' name='[1997]' role='measure' type='quantitative' />
            <column datatype='real' name='[1998]' role='measure' type='quantitative' />
            <column datatype='real' name='[1999]' role='measure' type='quantitative' />
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1980]' derivation='Sum' name='[sum:1980:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1981]' derivation='Sum' name='[sum:1981:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1982]' derivation='Sum' name='[sum:1982:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1983]' derivation='Sum' name='[sum:1983:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1984]' derivation='Sum' name='[sum:1984:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1985]' derivation='Sum' name='[sum:1985:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1986]' derivation='Sum' name='[sum:1986:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1987]' derivation='Sum' name='[sum:1987:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1988]' derivation='Sum' name='[sum:1988:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1989]' derivation='Sum' name='[sum:1989:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1990]' derivation='Sum' name='[sum:1990:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1991]' derivation='Sum' name='[sum:1991:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1992]' derivation='Sum' name='[sum:1992:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1993]' derivation='Sum' name='[sum:1993:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1994]' derivation='Sum' name='[sum:1994:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1995]' derivation='Sum' name='[sum:1995:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1996]' derivation='Sum' name='[sum:1996:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1997]' derivation='Sum' name='[sum:1997:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1998]' derivation='Sum' name='[sum:1998:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1999]' derivation='Sum' name='[sum:1999:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2000]' derivation='Sum' name='[sum:2000:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1981:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1982:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1983:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1984:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1985:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1986:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1987:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1988:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1989:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1990:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1991:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1992:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1993:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1994:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1995:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1996:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1997:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1998:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1999:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country Name:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;American Samoa&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Andorra&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bermuda&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;British Virgin Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cayman Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Faroe Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gibraltar&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Isle of Man&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kosovo&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liechtenstein&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Monaco&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nauru&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Northern Mariana Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Not classified&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Palau&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;San Marino&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sint Maarten (Dutch part)&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;St. Martin (French part)&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Turks and Caicos Islands&quot;' />
                <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tuvalu&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1981:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1982:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1983:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1984:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1985:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1986:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1987:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1988:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1989:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1990:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1991:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1992:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1993:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1994:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1995:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1996:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1997:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1998:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1999:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1981:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1982:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1983:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1984:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1985:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1986:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1987:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1988:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1989:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1990:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1991:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1992:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1993:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1994:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1995:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1996:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1997:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1998:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1999:qk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Multiple Values]</rows>
        <cols>([federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk] / [federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names])</cols>
      </table>
    </worksheet>
    <worksheet name='African mortality rate'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Algeria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Angola&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Benin&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Burkina Faso&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Burundi&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cameroon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Central African Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Chad&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Comoros&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Congo, Dem. Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Congo, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cote d&apos;Ivoire&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Djibouti&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Egypt, Arab Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Equatorial Guinea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Eritrea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gabon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Gambia, The&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ghana&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guinea&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guinea-Bissau&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kenya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lesotho&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liberia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Libya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Madagascar&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Malawi&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mali&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mauritania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Morocco&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mozambique&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Namibia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Niger&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Rwanda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sao Tome and Principe&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Senegal&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Seychelles&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sierra Leone&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Somalia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;South Sudan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sudan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Swaziland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tanzania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Togo&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Uganda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zambia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' num-steps='15' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Decrease mortality 1980-2000'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column caption='Percentage decrease80-2000' datatype='real' name='[Calculation_620159748490080258]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='((SUM([1980])-SUM([2000]))/SUM([1980]))*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_620159748490080258]' derivation='User' name='[usr:Calculation_620159748490080258:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Algeria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Brunei Darussalam&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cabo Verde&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Channel Islands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Chile&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Guam&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Honduras&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Hong Kong SAR, China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iran, Islamic Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iraq&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Korea, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Macao SAR, China&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Morocco&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;New Caledonia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Samoa&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Timor-Leste&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Vanuatu&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Virgin Islands (U.S.)&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Europe and Australia'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Albania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Andorra&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bosnia and Herzegovina&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Channel Islands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Estonia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Faroe Islands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iceland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Isle of Man&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kosovo&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Liechtenstein&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Luxembourg&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Macedonia, FYR&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Moldova&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Monaco&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Montenegro&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Portugal&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;San Marino&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Serbia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;United Kingdom&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' num-steps='15' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Increase in mortality1980-2000'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column datatype='real' name='[2000]' role='measure' type='quantitative' />
            <column caption='Percentage decrease80-2000' datatype='real' name='[Calculation_620159748490080258]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='((SUM([1980])-SUM([2000]))/SUM([1980]))*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_620159748490080258]' derivation='User' name='[usr:Calculation_620159748490080258:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Armenia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belize&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cameroon&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Central African Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Congo, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cote d&apos;Ivoire&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Jamaica&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kazakhstan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Kenya&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lesotho&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Malawi&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Mongolia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Namibia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Russian Federation&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Rwanda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Sierra Leone&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Swaziland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tajikistan&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Tanzania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Uganda&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zambia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]' num-steps='15' palette='orange_blue_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Mortality increase 1960-80'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='real' name='[1980]' role='measure' type='quantitative' />
            <column caption='Percentage decrease60-80' datatype='real' name='[Calculation_477170460220043275]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='((SUM([1960])-SUM([1980]))/SUM([1960]))*100' />
            </column>
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_477170460220043275]' derivation='User' name='[usr:Calculation_477170460220043275:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;El Salvador&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Estonia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Iran, Islamic Rep.&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Russian Federation&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Slovak Republic&quot;' />
              <groupfilter function='member' level='[none:Country Name:nk]' member='&quot;Ukraine&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' field-type='quantitative' max='45.088659668099957' min='-36.706880366744493' range-type='fixed' scope='cols' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#e15759' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='mortality 1960'>
      <table>
        <view>
          <datasources>
            <datasource caption='Data (mortalityrates)' name='federated.161s2oj0jtb3gd1a6bytg0myrxqf' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.161s2oj0jtb3gd1a6bytg0myrxqf'>
            <column datatype='real' name='[1960]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country Name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country Name]' derivation='None' name='[none:Country Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[1960]' derivation='Sum' name='[sum:1960:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' included-values='non-null' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' included-values='non-null' />
          <computed-sort column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' direction='DESC' using='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
          <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' included-values='non-null' />
          <slices>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</column>
            <column>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' num-steps='15' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
            <format attr='break-on-special' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]' />
              <color column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' />
              <geometry column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]</rows>
        <cols>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Story 1' type='storyboard'>
      <style>
        <style-rule element='story-point-caption'>
          <format attr='width' value='235' />
        </style-rule>
      </style>
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='97368' id='1' param='vert' removable='false' type='layout-flow' w='98504' x='748' y='1316'>
            <zone h='5428' id='3' type='title' w='98504' x='748' y='1316' />
            <zone h='16612' id='4' is-fixed='true' paired-zone-id='5' removable='false' type='flipboard-nav' w='98504' x='748' y='6744' />
            <zone h='75328' id='5' paired-zone-id='4' removable='false' type='flipboard' w='98504' x='748' y='23356'>
              <flipboard active-id='3' nav-type='caption' show-nav-arrows='true'>
                <story-points>
                  <story-point caption='The mortality rates in 1960 from the data of 190 countries averages to 342.3 per 1000 adult males.' captured-sheet='mortality 1960' id='1'>
                    <capturedDeltas>
                      <worksheet name='mortality 1960'>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' field-type='quantitative' max='10390423.225400038' min='-9536380.6514069475' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' field-type='quantitative' max='20317965.393037274' min='-20421278.088434771' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                        <selection-collection />
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='The African continent has the highest mortality rate that averages to 459.1 per 1000 adult males.' captured-sheet='African mortality rate' id='2'>
                    <capturedDeltas>
                      <worksheet name='African mortality rate'>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' field-type='quantitative' max='9410336.4245071076' min='-12634449.05338552' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' field-type='quantitative' max='12321345.517399136' min='-10445074.39860674' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='Australia and The European countries excluding Turkey and Kazakhstan have the lowest mortality rates at 200 and 203 per 1000 adult males respectively.' captured-sheet='Europe and Australia' id='3'>
                    <capturedDeltas>
                      <worksheet name='Europe and Australia'>
                        <style delta-type='added'>
                          <style-rule element='axis'>
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Latitude (generated)]' field-type='quantitative' max='11855994.730702726' min='-4918827.2207441917' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
                            <encoding attr='space' class='0' field='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[Longitude (generated)]' field-type='quantitative' max='21357214.885065835' min='-12950426.866321664' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
                          </style-rule>
                        </style>
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='The rates compared from 1960-1980' captured-sheet='1960-80' id='5' />
                  <story-point caption='China has shown a drastic decrease in mortality rates of almost 66% from 1960-1970, followed by 33 other countries which has shown a significant decrease of more than 30%. ' captured-sheet='1960-80 mortality decrease' id='4' />
                  <story-point caption='On the contrary, few countries have shown a more than 10% increase in the Mortality rates with Hungary being the highest at almost 40%.  ' captured-sheet='Mortality increase 1960-80' id='6' />
                  <story-point caption='The Mortality rates from 1980 to 2000.' captured-sheet='1980-2000' id='7'>
                    <capturedDeltas>
                      <worksheet name='1980-2000'>
                        <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1980:qk]' included-values='non-null' />
                        <filter class='quantitative' column='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:2000:qk]' included-values='non-null' />
                      </worksheet>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='There was a significant decrease of above 30% in 42 countries from 1980 to 2000, with Iran having the highest decrease of about 63%.' captured-sheet='Decrease mortality 1980-2000' id='8' />
                  <story-point caption='During these two decades a few African countries as well as Russia and some of its neighbours have shown an increase in Mortality rates. Zimbabwe and Botswana has shown an above 100% increase in the rates.' captured-sheet='Increase in mortality1980-2000' id='9' />
                </story-points>
              </flipboard>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='dashboard' name='Story 1'>
      <viewpoints />
      <active id='-1' />
    </window>
    <window class='worksheet' name='mortality 1960'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='African mortality rate'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Europe and Australia'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1960:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='1960-80 mortality decrease'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Calculation_47287801345564673:qk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Calculation_47287801347444739:qk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Calculation_477170460219936778:qk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='1960-80'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[sum:1970:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Mortality increase 1960-80'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <tuple-selection>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Hungary&quot;</value>
                <value>-39.403487774782761</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Ukraine&quot;</value>
                <value>-38.989514715941553</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Latvia&quot;</value>
                <value>-38.834604955627434</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Belarus&quot;</value>
                <value>-35.679801415112777</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Lithuania&quot;</value>
                <value>-34.694579631303014</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Iran, Islamic Rep.&quot;</value>
                <value>-32.422624567970352</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Slovak Republic&quot;</value>
                <value>-31.944260558718398</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Russian Federation&quot;</value>
                <value>-30.800216567406601</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Estonia&quot;</value>
                <value>-23.835907493666753</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Poland&quot;</value>
                <value>-23.735292536160678</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Cambodia&quot;</value>
                <value>-17.812214665136956</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Bulgaria&quot;</value>
                <value>-15.113557821726969</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Czech Republic&quot;</value>
                <value>-14.222771586355391</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Denmark&quot;</value>
                <value>-10.588258722319575</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
                  <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_477170460220043275:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;El Salvador&quot;</value>
                <value>-10.215052293389835</value>
              </tuple>
            </tuple-reference>
          </tuple-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Increase in mortality1980-2000'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[usr:Calculation_620159748490080258:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Decrease mortality 1980-2000'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='1980-2000'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[:Measure Names]</field>
            <field>[federated.161s2oj0jtb3gd1a6bytg0myrxqf].[none:Country Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='1960-80' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO2deZAc133fP90z03PvOXtjL9xYQgRIESAOEhJ4WKJ1S44ll53ESspVSZw/
      4sp/iavCqlSqklS5klQ5Kf+R07kcl+zY1hGJpiQeIEUABAiAwJ7Y3dljZnfOnXumZ6b75Y/l
      DHYwg0PUArtiv08BVcD+ut/7Ts/7vvd7r3v7KUIIgURiUdSdFiCR7CTSABJLIw0gsTTSABJL
      Iw0g2XayGzFu3LhBulB+4LHCqFDSK61jQhBaXSZXLJNNximUje2Win3bS5RYG7PEf/jDf8+T
      J57F3TXE0s1b6N5hJoY7qShO9OwGbo/GymqIjbxKp1jipx9U+PIrx1E1jVRig77hUQqZFMPD
      Q/zXf//PGTr1txgvz+M9+SXs65OUXb0cHmpnbmkZ4fBQSCT41MlTZFemCGZUzpx4ErvycHKl
      ASTbSmVjAffYCV75/CuEpt7lBzciaIk3SZ56nvbuYcI33mHfaA/fvZHEnYlw4sReKoad9Zvv
      8kevz/I7XzvND356FZ/Py9//9tfoHz5MavE6mS4nnnKehZUkH07+lNThET7U24jdusyZZw7x
      2utpbnwwzahfwdMR4JmDgw+lV6ZAkm3F5u0hEZxkbX2NcCRBz+AIQwEvRb1COp0ilc6DAU8c
      O8FQl4+BwQH8PW34nBpf/q2/y+lzL2PPrHD89HObBao2Pnd+gr965wobS3PMriXwOO2YFZOJ
      4ycYGhvj6JF9VAs5MtkUnXtG6PRpD6/31VdfffXRXAqJFVHsXgbb4Y0Llznw1PNsLH2A0TnO
      C88c4trF92gfGGXi8F487V0EOlwMjB1g9cN36RweY2DPKN0eB7b0PE+feQ6boiCEwuHjp3Ea
      JSaOPcVGZIW+4XEmjuynIzBAwKMxODiILzDG3j4PyYLJwcOH8bsfzgSKvBMs2U3oqQh/feEW
      X/ziC4+lPmmAXU61WsU0TTTt4Yd1ycMj5wC7nEqlgq7rOy3jE8sOG0BQG4DKZR3DNKhUqjsr
      SfIJ4k77ulcnsqMGSK0t8cf/+88wTMHNWzeIRVa5dm2ebL6IMA2ymTRFvUK1UiaXzVAslUkE
      54kVKuRzGfKF0k7Kl+xy1m/f5E/+8kcI4NLVqyAEhXyWbC6PaZpkM+mdvA8gWA2F2d/fzUpa
      ByFAGASDs0RDkzz1/GdZmZkkktQZ7VeI5WxUyzZO7nWRyARYWp5kfS3OZ7/wRXwPe9dDYiEE
      wbUUezucRHJVhBAk15e4cGUWtVxi/Mgo0Wh650YAYVSZW7hNQU8x/cH0Rz9VOXjwGJ/e38vi
      aphEpkAhX6Bi93HyxEnanRqGYZDLpViLbUA5S7q4/bfHJb/8VEtZlsPLJFJx5qeDAKRTCY4e
      P8lYbxeReIRSpbJzBqiWs4wdOsvLr3yNTm8Zj8eL5nAQnL/O5eUcI+0OMASa04Hf48WmKnjb
      vNhdPjw2BU0V4PDhlL2/pAW5TIbjJ17g81/8Eg4lT5vPR//QCPM3L3JzYYmxkTGEELtvGVSY
      JigKigKGYaKqKorS3MhNw0RRlZaxTxLFYpFqtYrf799pKb/05NMxrlybooyL8+dOoghz5wxQ
      rVapVuWKz4PQdZ1qtYrX691pKZ8IhBANneaOGSASieByuXaiaomkzo6tAimKQnt7+05VL5EA
      O34jTCLZWaQBJJZGGkBiaaQBJJZGGkBiaaQBJJZGGkBiaaQBJJZGGkBiaaQBJJZGGkBiaaQB
      JJZGGkBiaaQBJJZGGkBiaaQBJJZGGkBiaaQBJJZGGkBiaaQBJJZGGkBiaaQBJJZGGkBiaaQB
      JJZmWw0ghMA0N180Z5omhml+9PM7/5ZIdhPb9mY4IQze+O730VUYP3qS8PRlMrrC8y+9wAfv
      vIFeEpz4zIv0tMvXIUp2D9v3akQhyJZL+L0asbUQvoFDPDuicenty7SPTrC3Q2F5NUygbRwh
      NreuMQz5bn/JzrJ9I4BZQHF2MzTSRnA1j9Pt29z1RVUxEWz+EfXGD7DL3swusSDbZgBF1RB6
      msXFHH3jx4gvXuNHCwpnXzzP1Xff5F3d5JlzL6Oqm9MORVGw23dwhyaJhG1+PboQJqYpsNls
      mKaBEGCz2RCmiSEEdputfmw0GqW3t3e7qpZIPhbb2gUrikqtjavqncauqOpO7sYnkdwTeR9A
      YmmkASSWRhpAYmmkASSWRhpAYmmkASSWRhpAYmmkASSWRhpAYmmkASSWRhpAYmmkASSWRhpA
      YmmkASSWRhpAYmmkASSWRhpAYmmkASSWRhpAYmmkASSWRhpAYmmkASSWRhpAYmmkASSWZlcY
      oFw1CMezZAv6TkuRWIztfWGbEFQMA7vNjjANTMBusyFMg6oAx5ZXI9bIFcv84Z9fwjBNSuUq
      33zhKEfHG1+ZaApBPFfBpip0eewoirKtsiXWZRv3BzB598f/j6LNxd4DTzB79V1KhsKJ585x
      7eI7UBUce+5F9gR8Ded9541JTj+xh+eeHCGZKfKHf36J8YEOvC4NgIph8rOlLKoCVVPgcdg4
      MexrMIGolqguvo0oJLDvO4/q6wWkSSQPZhtfj15iYT7K0L5RKoUUgbEnmRjRuPzeTfoPHGNv
      m8Li+jqDXXsxTRPTNKlUKoTjGc49OYxpGHidm717vqCj2TYb8HKqjNsOxwc8COCdYI5YVqfT
      batVTPXtf42BHdXfT/mH/xTnC78P/qG6NkUY2OK3UDKriM59GF0HEdIgErY1BVLp2zPCqZOH
      +e6PLjK69yBV3QTNQblcwTAUbHYbiqKgqiqKomCz2Tj/9Dh/9tY0XzpzkOnlOD0dHjrbPNjU
      zQZaFQouhw3bR+mT06FiCKX+fzM+jygk8fzqH4CiUPV2Y8z8AO3Zv3dHWvBtMCvQfwzWPkCt
      lmDg6XrYFCY/mX2N91cu0uvr4+vHvkmHu7PpE1bMCgpgVx3bd9kkO8o27g/gpKcNLly4yvFn
      ThObv8obYZXPvPRZrr/3FpeXTZ499wKKotT/qqrKqYlhFEXhh5fmGe5t4+/86lM47HfmCiOd
      Tt4JZrCpRSqGQK8K+to01I9SIGF3glFBUQSKaoNqAdXhru9DgFmFdBCOfgscHhRnO8rMX8HQ
      M/U6Ltx+g9X0Cr9z5ncJJuf548v/kX/w3O+h2TfTMFOYfJi8wmx6EgU42vU0h9qPyrnIJ4Dt
      M4CicPy5FzBNgWpTOTj2+Y82iFF5/rMvI4S40ygbzoNTE3s4NbGnZbluh40zo20sbeh4HCqH
      xzz1xg+gdo5i6z1C6Xv/GMXXi5laxvW5f7G1BrBpUM6BwwOlFGiN85APQu/ztSd/nR5fLx3u
      Tt6Y+zGZUpqArweA9cIqK7lFfnX4G5jC4Ierf8GAZw/t2p1RQi/EmbvyR+iFGCMTv07P8Bnk
      PGT3s837AyjYPsrdUVRq7bTW439cPJqNI32ee9Spop3+XczYDKKQwDZ8AsW2JUVRVBg7D7Pf
      B4cLqhU49KWGMvYHDvLB6vt0e3uIZNcQCHzOOyaJltYZ9AzjdWz+rNfVT7wUqRugWily443f
      Z/SJ38DTNszMpX+HotoJDD1bL8OspNDX/hKztIbqGcHV/xUUu7dBR9UwSBYKeDQHPqfcTPBx
      8InYt0JRFGy9h+8VhLahzRRIz4CrA+zOhkNeOvQKf/rB/+DfvvEvcdndfPOp38LlcNfje7yj
      vLX2GiO+vVRFlfViiBO9Z+vxQjqIw9lG7+hnABg+8nViy2/XDSCEQF/7C2y+wzgHvk41dRk9
      8gNcQ3/jThnlMn/0zlukSyUqhsG3nn6GJwfvTORhMxWLZLOoikKPz98wEko+Hp8IAzwUDvfm
      3xY47U5+85lvU67q2FQ7DlvjJLfb2cunA2e4EPkxNsXGuYFfwW2703s7PT3oxSR6IY7d4SUV
      uY6/a9+WEkzMUgTX4K+h2H3Y25+iuPSfGur4yw+vc7C3j88dniBVLPBv3vgJ413d+F2bI0HF
      MHh9dgq9WsUUJm0uNy8cOISq3EkrhVmlkrmOqCRwtH8aVetCpmH3xzoGeACqojb0+ltRFIVR
      /z5G/ftaxp2eAHuP/TbXf/pPUBQVf9cBBva9srV0VNcAlfR17G1HqaTex+bd21DGajrFV4af
      xGGz0enxoNls5MvlugGWNhLYVJWvHD2GAL536wbhdJo9HZtpmBAmxdX/hjDyqM4+cgt/gHfs
      d7G5towihgFLQYhGoH8ARkahxbzMSkgDbBOBPWfp6D2Gaehors7NFamPUBQF58BX0de/SyXx
      DjbvOM7+LzSc/9zeffz5jWv8+vFPczsew+3Q6PbeGWWKlQoebXNVSgE8mkapWqnHzVIYo7SM
      78A/Q1FUVGc/euyv8Qz/9uYBQsDUJGTSmw1/cQF0HQ7dSR2FEFy/eoVrV67Q2dXJi597BZ/f
      v/0XaxchDbBNKIqCw+kHWjcY1dGGe/g373n+qbG9IOD/fPA+g+0d/MPnP9Pw6Mi+7h6+O3mD
      q6vLGMIkWcjzmX0HtwhQQZjAR5t+iioodz16shSEF14Etwc6O+GtNxsMcOv6deamp/nS175O
      ZH2N//unf8K3/ubfxvGR8QBKxSKR8CoK0Dc0jNP1yz1ZlwbYJSjA6fG9nB7f2zLu0TReOXyU
      6egaqqLwhYlPNRhEdfZj9x0mP/+vULU+qoV5vOP/qLEQTYNicdMA+QI4GxcDpidv8ezZs3T3
      9NDZ3c2VSxdJp1MEejafzaqUy0xdu0p3Xx9CCCavXeFTz5zEbr8zZzIKJWI/vko5laPzxGH8
      h0Z29TTkgQYQQhAOhzEMA5/PR1dX1+PQJWlBm8vFyZHxljFFUXEN/gZGfg6zksA1+C1U+11L
      x089DRffA7d70winzjSEB/fsYX5ujr7+AbKZDJVyGa/3znJwIhrB39HB8PjmXEgvlUjGovQO
      bM4zzEqV1T/5Ce1PHaD9qQPEXr+Coij4Dg3XyxBCILJFRKaA0uZB8bt39IbiAw2QyWR47bXX
      6O3tpVQq8Y1vfONx6JJ8DBRFxe47dK8gBHo2U6BsDvz+phHgmVOn+evvf4//+V/+M6qq8tIr
      X8DtuWMiu6ZRLt95ZL2s6zgcd9KjciIDikL78f0oikLX2aNkbsw3GiCaxoylUTt9mMsx1N52
      lN6OOyIExIPrhG4EcXd4GX/2MA7Xo3v05IEGcLlc6LrOxYsXOX/+/CMTInlMOF2bf1ugaRqv
      fOWrlIpF7A4H2pbcH6CrO0BsLcyH719CIHC6XLR3ddfjdq8Ls6hjFEqoTo3iShStp6OhDHM9
      ie3gHhS3htLlx5gNoW4xQDwY4faFSfadOUI2lubGX73HU984g7ol3TOrBvlIBgBvXxuqvfkx
      +4flgQZQVZXDhw8zPj5OX1/fx65I8suBqqp4vN7WMZuNw08eI5tOg6Lgb2tvSF/sfg+BF59m
      5Y9fQ3HYcLT7GPjy2cZCFAVMc/Pfpgl3pT+h64vsOztBz95+Anv7ic2tkU/m8Pe0b55SNQhd
      XMD+0ePyqWCcoWf3NpmgkEmhFwu0dfdgs997BHkoA+zfv59yuczly5eZmJh40CmSTzCKotLW
      0fykbA3/oRHce3oxyxUcbV4UW+N9BnVPAGMujOJzI3JF1NHGX35yt3vIxdP07O3HqBhUSmUc
      rjsjUT6axe5y0P/0CADrV5fJRzL4h+5oWr71AR++/UOcbi82u52z3/htNFfjfKhaKlLKJB9s
      gGq1yptvvkmpVJIjgOShsHtd4G2dZimdPmxe12bjHw6A1tgEx08f5vpfvEd0NkylqLPv7ARO
      38MvtRazaW5e+BG/8u3fw645mbn0JpPvvM7xF79cPyYfjxC/fRNXe+f9DZDP53nrrbfo6NjM
      0UZHRx9aiETSCkVRwOlAcbZOSxwujad/7Sz5ZBaHS8PV1thze3v9pBbjrF9dBqBaquDta6vH
      y6UimtON3aGhKArtPf3EV4MNZSSD0/Q/8Wmc/o77G8DpdPLUU0+RTqex2Wy0tbXd73CJZFtQ
      7Tb8vR33jA09O37PSbCvK4DD5WbqZz+ho2+IWxde4+i5zzWUIUwT5aNJtSKEEPcTk0wm+c53
      vkN/fz+mafLVr371F/pwNaLRKL29vQ8+UCL5OSmXikz/7CdkN+LsPfYsA3sPNUy2M2vLZMJL
      eAN99x8BhBD4fD6eeeYZFhcX5Qgg+aVAc7l58vwX7hn39w/jcHsppuL3N4Cu63zve9+jo6OD
      kydPMjAwsO1iJZLHjaIouDu6cXd0PzgFqlQqrKys8Prrr+NwOPj2t7+9LSJkCiTZDdx3BCiX
      y3z/+98nHo9z4MABTpw48bh0SSSPhfuOAKZpUiqVcLu3/4ElOQJIdgP3HQFUVcXjaf3L6BLJ
      JwFr/z6cxPJIA0gsjTSAxNJIA0gszTYbQFDI5TGFoJDNkEhlEEAxnyGxkca87x0HieTxs62/
      FJ9LrvPf/9drfPO3vsjld3+G3aYweuQ407c+xGeD0aPPMj5472fJJZLHzbZukHH1yodMHD1E
      PrNBYM8EE2Mal9+5zdC+Ccb9MB+PM9LXVt8f4AE3oSWSR862GcAsJghn8lQzYYT9IHa7m0LK
      js3vJZvLUXKoOJ0ebLbNd/2rqkq1Wt2u6iWSj8UDnwX6eVleCNI7NMDklXeJ5lXOffYMU1d/
      RjJrcuq55/C7Nj0n7wRLdgPbboAatWIVRWn4dw1pAMlu4JG9GW5rY5c7qUh2K/I+gMTSSANI
      LI00gMTSSANILI00gMTSSANILI00gMTSSANILI00gMTSSANILI00gMTSSANILI00gMTSSANI
      LI00gMTSSANILI00gMTSSANILI00gMTSSANILI00gMTSSANILI00gMTSSANILI00gMTSbJsB
      hBAk1leZnp6jVDWIhZeZXVxBAPH1VebmlzHky6Alu4xtfDWiydpaDJ/H5O03r6KILN0euKmX
      WQ2tMuBVmbe7OTjas31VSiS/INtmAEVRGRsb5I0L77H/yCHyxW6OjLm5dGGGwQP7GfXCQiKN
      YXTV9wcwDGO7qpdIPhbbt0GGafLOG+9w+qXP46pmeP/WChtrKlqgi3g8QbdQ0JxdDfsDyA0y
      JDvN9qVAiqCtw8+HVy4xduBT9PkMpqIK584cZf7WVebXDU6dHmys3P7IXk4tkTwUj2x/gAch
      9weQ7AbkMqjE0kgDSCyNNIDE0kgDSCyNNIDE0kgDSCyNNIDE0kgDSCyNNIDE0kgDSCyNNIDE
      0kgDSCyNNIDE0kgDSCyNNIDE0kgDSCyNNIDE0kgDSCyNNIDE0kgDSCyNNIDE0kgDSCzNYzGA
      EAJTvgRLsgt55G+mEmaFi+9eIJs3OfH8OTo8jkddpUTy0DzyEaCUXEP4hzh+ZJSV5fCjrk4i
      +bl4DCOAQHM5sTugUq086uokkp+LRz4CuNq7CM1d573L1wj0yFejS3YXj+XdoNWyTsUUuJwu
      FGXzZ/LdoJLdwGN5PbNdc9Yrqu0NYJrm46haIrkvj/0+gKIoqKpKZ2dnw89N02zYL+Bukwgh
      mkxTrVabyvhF43dr2LqJx05oKJVK5HK5R67h7s+9E9fh7jofdP7W4w3DuG97EUK0LOOxv6Bf
      UZS6CbZy9//vzsxq593vmAeV8fPG76X9cWoQQjQc8yg03M1OXIcHadiO76pVHTt2J3jr5hjJ
      ZJJ8Po8Qot7bqapa/5ClUolsNksymWRjY6NlGQC6rpPP55vihmFgGAblcpm1tbV6z7D1/Eql
      QqVSYXZ2llKpBNBg1EQi0TJtq5UhhCAej5PL5QiFQi01FgoFgsFgQ49+t4bFxUVCoVDL3XNM
      0yQUChEMBqlUKi3L2FpWoVBo0ri+vk6lUkEIUb9WNputfl4ul6NUKhEOh+vnt+qwcrkc5XK5
      SUO5XK5/j7FYrCleG03y+Txzc3P1Xnmrhq3n3X2+EIJ0Oo2u6wSDwboGVVXrDd40TVZXV1lf
      X2+4jrU6hBBEIhEWFhawvfrqq6821fYYqIkVQnDt2jXS6TR+v5+lpSV6e3vrDhZCcP36dVKp
      FNlslng8zuDgYEMZ09PT3Lp1i/X1dVZXV+nv78dut9fj0WiUUqnE3NwcbrebWCxGd3d3wwWb
      mpoikUgwNDTE3Nwc/f39Db3I9evXicVi5PN5vF4vNputIT41NUW1WmVpaQmXy0WlUsHr9dbj
      Gxsb3L59m1KpRCqVolKp0N7e3nAd3nvvPUZHRxFCMDs7y8DAANVqFdM00TSN69ev097ejs/n
      48aNGwwNDTVoiEajLC8vk0wmWVtbQ1EU2tra6vFEIkE8Hmd5eZlAIEAwGKSnp6fhWl+9epVQ
      KITb7WZ1dZWBgYGGOi5evMjy8jLBYJBMJtN0nSYnJ+nu7ubmzZsIIahUKvh8vnq81okFg0HG
      xsZYXFxs0ABw6dIlMpkMmqbhcrkaYuVymampKRYWFtizZ0/L9nL58mU8Hg/r6+usr68zODjY
      pNHhcNDZ2fn4U6BWeL1eJiYmuHHjRkOvUsPpdLJv3z6y2SzhcPPNtAMHDqBpGvF4nPHxcVwu
      V0Pc4XAQDAYxTZP29vamOhRFoVqtsrGxgWEYeDyepjp8Ph9Hjx4llUqxvLzMgQMHmjTWRrFM
      JkN7e3tTGXa7HV3XmZiYYHV1tSnucDhYX1/HNE2cTmdTXNM0kskkqqricDTfUdc0DZvNxvDw
      cFMPXSvf7XYzMjLCjRs3Wtbh9Xrp7+/H6/WSyWSa4sePHycYDJJMJjlw4EDTyOB2u7l16xY+
      n6+h4dfweDysrKyQSCQIBoN0dXU11REIBDh48CCrq6vY7Xba2trqsdp3ZbfbicViDSNHDbvd
      TqlUIhAI1EexrTidTtLpNIVCYee2SNpKKBSir68PRVEwDANN0xrikUiEjo4OnE4nuq43fXGp
      VKreIOx2e1O8WCySzWbp6Oio99x3f3HhcJi2trb6+Xd/ceFwmO7ubpxOZ31Y3XrMxsYGQgh8
      Ph/VahW3290QL5VK9ZHH7XYjhGjSsLGxQaVSIZfL0dvbi8/no1gsUq1W8fv96LqOYRisrKzQ
      2dlZ7zlrlMtlbDYbiUSCSqVCX19fQ3pUSwV1XScSiTA0NITb7W66VqqqEg6H6ejoaFqsKJfL
      2O12pqam6OnpaakBNnv6crnMnj17Gj6naZqUy2UymQypVIqxsbGm7zufz9fT2aGhoYbzhRAU
      CgVM02R5eZnx8fGmDqtQKKDrOqlUquVnSCaTKIqCpmm742nQqakpbt68ycrKSktHz8/PMzMz
      w8zMTMvceHFxkWAwyMLCQj1/30oqlSIYDDI5OUksFms5OZqamuL27dsNc4StLC0tMTMzw/T0
      NLquN5WxtLTE+vo6MzMzlMvlpngmkyEcDjM7O0skEmk5iZydnWVxcRFN05ibm2sZz2Qy2O12
      VldXm3TOzMxQKpWIRCJUq9WmXHpjY4N4PM7s7CydnZ0sLS01xE3TZH5+nsXFRXw+H8FgsEnD
      zMwM8Xgcp9NJOBxuWlmZmZmhWq0SjUZRFIW1tbWGeCqVIh6Ps7KyQiAQYH5+vknD3NwcwWAQ
      p9PJ4uJiQ1zXdUKhEHNzcwwNDbGwsNCkcX5+nnQ6jcPhaIoDLCws1OdSuyIF6u/vZ2Jigng8
      TjgcZnh4uCHe1tbGE088QTabZWVlpSn9cDgcPPHEE5RKJVZXV9E0raFnU1WV8fFxOjo6WFtb
      Y2Njo2no7evrY2JigkQiQSgUYmRkpCHu9/vrGmop0NZGbLfbmZiYoFQqEQqFcDqdDRoURWFs
      bIzu7m7W1tZIJpN0d3c31FFrTNlstqVJ3W43i4uLGIbRNMLUPsOtW7fI5/OUSiWOHDnSEPd6
      vSwtLRGPx1EUhYGBgYZ4Lb2IRqPk8/mWqaDH42F+fp5qtYrH42kaxfr7+7l582Y9BTt06FDT
      +YuLi8TjcVRVbboZunWuYJom+/bta4jb7XYymQyJRAKbzdYy1bTZbKysrNRTvrtxuVwcPXp0
      96RAyWSSbDaL0+kkEAg0rWpks1kymQymadLT09OU49cmluVymY6OjoacEajn94VCAZ/PR1dX
      V1PjSSaT5HI5NE1rqSGXy5HJZDAMg0Ag0HRhdV1nY2ODcrlMe3t70xdjGAbJZJJCoYDX66Wr
      q6up8dRWuqrVKsPDw2ia1pAClctlIpEIuq63TF9M0yQSidQnp3drEEKwsbFBLBajs7OTQCDQ
      cnUnEongcDgYHBxsug7lcploNEqxWGRoaKjJJLUVlnQ6TV9fHx0dHU3xVCpFNBq9r4ZQKEQg
      EGjqJGpzrPX1ddrb2+np6WnKGorFIpFIBCEEQ0NDTSlWsVisL0TseAokhOD27dvk83kSiUTL
      oX9hYQHTNAmHw0xOTjaVsby8TLVaZXV1lZWVFdLpdEM8nU4Ti8WIx+NEo9GmCWht2Mzn8/UU
      4V4aQqEQU1NTTanYVg2hUIhUKtWkIRqNkkgkiMViLTVMT09TLBYpFostr8P09DSqqhKLxZia
      mmpKgWo9czKZJBQKNSwZ1zSEw+H6tV5ZWWmqo7aalU6nmZ6eborPzMygqirRaJSZmZmGG2Q1
      DZVKhWQySTgcJplMNsQzmQyrq6sUCgUSiQTLy8stP2fteq2vrzfEK5VKfTVtY2OjZQo0NTUF
      bHZqrdpLbUFkZWVl5w0AmymKaZr1JbdWccMw6Orqajmk2Wy2+upNX18fuq43nV+b+I6OjlIs
      FpvKUBSlrqHVTZatGlqlBls19Pf3N81FahoURWF0dLTlXKV2Hfr7+1vOhWp1dHZ24vP5mkxo
      t9sxTRO3283AwMADNdx9nbZq6Ovra6mhdh1qGu424VYNg4ODTdd663r9yMhIy1U/RVFwOByM
      jo423DOpxWoah4eHW87XahoDgUDLla7adfT7/SB2AYVCQWxsbAjTNEUikWiKVyoVEY/HhWEY
      Ih6PN8VN0xTxeFyUy2VRLBZFLpdrOiadTot8Pn/POh5GQywWE4ZhiEQiIUzTbD5LpmQAAAKZ
      SURBVKlB1/X7asjlcveso1gsNmkoFAoik8k0aUgmk8IwjCYNiURC6LouSqWSyGazTXVkMpkH
      akgmkw91HVppEELUNei6Xtd+t4ZsNnvPOkqlkigWi/U67iaXy4l0On3P88vlsojH4/Xv5G5q
      7ahSqYhdMQm+efNmPU8rFoucOnWqIT43N4eu66yurhKNRnn55Zcb4qFQiFgshqqqFAoFxsfH
      8Xq99Xg2m2V2dhaHw4EQApvN1jQJvnXrVn0ptVAocPr06YZ4bdgNhUJEo1Feeumlhng4HCYa
      jaKqKsVikZGRkQYNuVyuQYOqqi011HLufD7PmTNnGuLz8/MUi8X65z1//nxDfG1tjUgkgqqq
      lEolhoaG8Pl89Xg+n2dmZqauQVGUe2pYXl4ml8tx9uzZhvjCwgKFQoFQKEQ8HufcuXMNI+ba
      2hrr6+uoqoqu6/T392/2tB9RKBQaNAAtNdhstvpIsnUZs1qtMjk5iaZp9Rttd58/PT1dvxuc
      TCabrtPy8jIbGxuoqro7VoF8Ph+HDx8GaFoWg81Z+9jYGG63m9u3bzfF/X4/iqIwNDRUn9xs
      xel00tHRUV9RaFWH1+t9oIaRkRE8Hs89NdSG5Uwm0zT0O51O2tvb2b9//z3r8Hg8D9RQa9St
      lvfa2tqoVquMjIyQy+XIZrMNcU3TfmENtfTK7/c3LZPWNJTLZUZHR8nn803zMU3TaGtrq6/k
      3auOI0eOYJpm0zKoqqr4/f766lKr8zVNY//+/dhstpbfldfrxePxbN5BFmLnV4FM06znhYZh
      NK081CRuvQt4d7zWq9Zywrvz+AfV8fNqqN1Qu5eG2kjzi2rYugq0UxrudR0Mw2jI6beWoapq
      /YnMj6Ohdv7H0ViLP0x7+f/ggUTXrbFQjAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='1960-80 mortality decrease' width='192'>
      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
      Jc3/B8D+RGIkFcmsAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='1980-2000' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='African mortality rate' width='192'>
      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
      kXgCzbCv7aMAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Decrease mortality 1980-2000' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Europe and Australia' width='192'>
      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
      QmCC
    </thumbnail>
    <thumbnail height='192' name='Increase in mortality1980-2000' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Mortality increase 1960-80' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Story 1' width='192'>
      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
      HEbUAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='mortality 1960' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy993NcWXbn+bnvvXzpgUyYhHcE6A3oWWSxfHdVdattqVumFTOhkVYjxXas
      VjMROxO7io3o/QM2Ykc7uxMx0o5Mq9VG3dWmqk15y2LRgBaE995mAukzn7n7QyKTiSRAAixW
      Fadb3wgGkpnPXHPuucdfEYlEpK7rbAdzs1Mk4jFa2nYycONt3GKFuqCKECCLrhsPezBtlR2V
      MYSAlQSUe0AIEGvXSHKfVxKSWFrgrz9FTW194RlSSlKpFFIWP/n2b0KIwm9CiLteI4TAtm2E
      EBteW3pP6XcAiqIghEBRFJxO55bGa7swTZNMJoOiKECuX6Zpous6UkoURcEwjHVj4vF47tqn
      Twt3m5vN8Narv6DemSVqOTjgi+FQYDYpKHNIEg2nqG9ue2Dt03Rdx+Px3PWi0k60tLZjGAYu
      lwtPsJXF7n+k2alxRx9XFMYj1YiVZfbUm4QEkLr98+SSRdArcOkKo9Mh2o98kabmtsLEA9i2
      TTabxbKsAuEWE7OiKHcshGICLr6+lIiLry1dYPnvS5+bJ3y3272unQ8S8XgcRVHQNA3Lsgpt
      VhQFXddJJpOFfgPk5/BhXACZdJqXf/oipx59jMbGpi3d09TaTiS8TPzqS/jWbmkFltNgVB/B
      7XYD21tUm0G71wXxeIwbl17H7fFz6PhTqKpa+AdQWRViVm/iyqyCYizREUrhd+cIY2etjU+f
      5+Kom521BpqqFBETjMwrzKabaG1p5PSzT+P1+u54f57T5YmtmGCLib8YxZzzbsRfjM04fvH/
      i6/5uIi/GKZpFtomhMCyLDRNw+/3Y5omqVQKXddxu90PJfEDOF0unv/Clwv0shUcOnyEaDTK
      u3OjQHfh+5UMuH1lvP36q3hcOifPPvmR+33PWZyZmSGYvUQg8TofnnuTeDy27veamlrOfv7f
      IvUqDMMga+QIx7Yllg1LZj1Nux5hcVViWrIgIgkBFT7wOAw0YeLxeAvPzIs9KysrJBIJpJRI
      KbFtG9u2C9fkP5dCSollWeuIuFjsKf1+o2eVXltK/IZhbPr+jwIpJS6X644dDHK7YX48XC4X
      5eXleL1eVFUtjNFGouKnDa/Xi8vl2tY9ZWVldJ5+kqthB7Hs2nwLlXgshj74KiOX3+TauTc+
      cn/Vv/zLv/yWw+EAci9Jp9MFGRegoqKSwTkFmZxESw0xMhkmVN9OLBolEl7G7y8jnU4THv4V
      R1oyeJy5+7oGDfoWynEH2jASs4zHGxiYlrRWJlCV3OQ6HRKBQdO+zxIIVBTEmlQqtU7uLyaG
      /Oc899+IE28k3pR+t5VdoPid+X+qquJwONB1/WPjunmRr3Ry8+Nj2zZOp7Owm9m2jZSSbDa7
      bu7+e4e/PIiv/QTjspql2UlMKRhLaBxSxhFmGhGdxQy2EghW3Pc7CiKQlJKhgV4WBn4JrlrO
      fOYbhUlvat7ByOXzHGsxSaR7uHbBi+4qw7HyLonYC3TsPgSBw0RT71OWE89wuxwsxMvZ6bqM
      uxwWoiqyAnTtNtEEvApOLcv47AgtrR2k02kymUxB7i1VWosJYiPiLsZmRLDZgtlMgS6+BsDt
      dhdk8+1s69uFpmlks9nCu/Jt0bTclJmmSZ5x5cdhu1z2YYeiKAQrKgicOsvq7gMYhkHs1X/C
      rQmOhASGFaPrxoe0tLXf/zvyH6anJujrehmnmiG1OkUmkylcNNjbhVAcDMwq6JrASkyjOz3U
      lhmIqe9y43oXJ848R++sF8uSLK5KYnaIkC+F2ylJZyW15RZ1AeuOBqwkBRW1HViWRTKZxDTN
      DUWLPJcD7kr4eXGmWBzIL6T878WEneeoG3Hb/N/i92iahqIoHxvxCyHQdb1A6E6ns0DoAD6f
      r7BT5/uU35l+XSGEIBAMYktJVXYapwoZC2aSKtVrFsP7FYU0gMXFBcrKAxw8/dsM9l5FK3et
      4yZnn/oihmGQSibovfwjyrV5qutauPiGl0d3JlhKplFVlc4n/pjBoesEm5roPFDBUN8VLk6N
      4syOc6Rdw7JBXVtytpSYFswnAhyvb7jDwpPvVOl3pbLxRh3faMfYbLFspGBvds9WzagfFaqq
      4nK5UFWVbDZLNpstvD9vCUqn02SzWZxO50OrAD9ozI4PETMcXAmcwe3xEWrdTW19A+++/RZV
      VRXsO9C57WdqUkr6+3pZmp+iXu/jVJ3F1aVdhQvS6TS6rqPrOh9+8Daq3oaRUmh06jTvPs2H
      k6OUV5tMTU3Q0NBEVeg5AJaXl7CzUaqajqHNTzI6Z2LZ0FGf42zjiwpL6kkOnH6ksNg8Hg/J
      ZPKeNv+8+TOP/P83E5eAOxZQ/vO95OXiRaEoCtFoFK/XixACh8PxsRFfvh+maaKqKrZtF97n
      cDhIpVIkk8mCTvKbgNrGNhrb/oKq6hBSyoKv5NHHHr/vedAMw+DEyUcY6O/Bs3iLcFxSVnVb
      prradZ6Kimp27z3Awc5j6LoTn+8zaJpGMPgUsfAUvugr9F3ZSUPDH/HeGz+hpeMQqWSSWq4y
      NDxJJuMnGo3w+eM6GUPidAgsqXHo2KNUVlYBOUJzOBz4fL6CpcPpdJJOp4H1BLyRKbNYJt/O
      dpg3L5YuhI30jbwZUkpZEFE+TuRFLcMwAAr9M02zsOB/nUWfUtTW58Qdy7K4ce41koMXEI2H
      OPWZL9234q/c6HoXy7LYf6CTVNVXiFd+nYNHTt9+aV0jN7vewrIsQqFaAoFgYfIVReHY41/D
      s/MPOXjqt5BS4nNrTI/dom3HTsYjPg7Wh6nyJnnyoE44Dj+76ucXV8AMni0Qfx6maWJZVsHJ
      lM1m15kAi2X1vKKcb0e+TaVWmzw2WxTFIlDp7pAXkYq/tyxrnZL+cSK/6CDXx/xO6XK58Pl8
      hZ3o1wXF852HlJJkMrnu/73XLhEcfY2jvmWMqZsfyRSq/sW/+1++1dDQiBCCmtpGQjV16+Tu
      8vIgLm+QYEXlHYOdSia4fulNVNVBXUMTuq5TXbeD8mAtNz74Z9rK5wl4BTUBcOng0aGtKoNl
      QXnTGSoqKxHiNvGpqkosFisMRLEyvJEOUPpb8eeNFODNiOVuZtGNxKn8TvBx7wJCCDRNwzCM
      dQsgvwtqmvapLwApJasrEYZ7rlNeWX3fY5Kfb1VV1/Xp5pVLLC0tUFvfAEAiHmfmtb+mw5dl
      PAZDUUE6laKyrgXtPkRB9Y//hz/+VmVlFbZtFxo/PT3JcP916hpaEULgdntJpZI4nU6SySTR
      6CrZbJaF+Rm8kZfxW73c7JsiZblYWVnhtV+8yLG6MQLeUiUyZwYNeKGnt5/Kxk7c7vVhGPk2
      2LZdCH/I3XsnZy+16Rd/X6wnbKYPlH7e7Lr8LpEX0fLE/0nY2/MLsFTW/7gV8a0iurrKwEv/
      Lw1LHzIUNqlr23Nf7cozwNJ7/YEgdWsMWghBJBLGHnyboBMCTsFuv8FsOMp8xsHswHUmh/tR
      HU58ZYEttUOrCAb54M0X2X/0aapDITKZDKNXXgQhyWZPo+s6I0M99F59i2Nnv8RAXze+9FVs
      VDoe+WMmtBM0colG1zCO+RHmohqaVkv/YhUePYtTyeLQBEtGHcJYoda7iqoIvLXHCG7gwHA4
      HJimWXDq5LGZR7bUNFoct7ORI22722Vp6IWiKB+7D6AYOQbk/kTetVWk02mklBhGlpuvfY82
      uYDLsT4Q8kEgP1d5Q8CvfvrPaIlFDpW4O4xklLLel9jhM5DA6OwV1Gf/lFBRUOVm0BJzlzhS
      dZPr7w+x2P4U+zrP4Cyrx5e5zuLCDD5/kEAwxPTMLPa5V6lyLuDzWjRVmgyOj3H87Jfp7+3A
      ME202e9T7rZpbqrn7NNfxLJsEvE4qVSSffUNSCm50fUODqefRw8c2XSF5pXfPNfNcz/Lsgr2
      7424fvH/ixXijXaJ4kEuvrf4eaXPzGazmKZ5z+DBB42HgdPnsbiwwLlf/ojy7AJlSooj3hRL
      NvQ4D9LR+egDa+vc3BwzY4NcuHCBIydO41FtxPQNjgWieIqCl4WAk1XGunt3Kyt895/+hq/+
      0Z8TCATu+h6toULiSAqOt6WZXHyF2ZlW0oZCR8Cmt+ufSGQEp5//Jr//R/+B6+d/RmeNgSLA
      oQmysRSKotDS1o7X6+XtiffZ7Z9jIRHHsiwcDj3nwLAtrl1+HyltOvYcwe32FmT/jaAoCoFA
      4A77fz4EIZ1OF6xDm6FUTLrbdZv5CDZ6RvHi+02ClJKR/h5G3/0hx5wRqstsMpbglllHxekv
      cmLnngeyK1qWRSS8zC9/9B3OOsc5oQtWri5R6zNorzBRxb3n1LChXVtmamyYwOFjd31fITBB
      SmgIWnRd/B5ZJciilHQ2xhmalSSScbxeP1nbTU/0EEr8FgebLJAmoyODLI5+yN6TX0bRvPhc
      UJu+xS9f/BvqG1swbQ09doH68hSKEPS9d47Q7i/R2nHgrg3bjDAVRcHtdmOaJqZprhuMYp2h
      OFbobgO2mdxfLF6VwjTNh0IB/SQxOzPF8rt/z9nyXKzYcFwn2nCGg48+i9d3ZxTv3bC0tITb
      7VoX/SulZHR4kKXud1GWhvlyIIFHEzQLWBdDD9zOJtkYugrjcUGt23vX6wC0REYSnpMML3lo
      CJr4lEV2NUSwbIEtcyENi1fOUVUV4vNf+QPmZmeYv3KTsQWbhj07mer5FfurZ+i9Wo6dXUUI
      qA0IqsumgClsG/RaQT7qYld1nN6J3nsugHuhWAEtFVXuRryl2AoRF+sO+dicWCyG3+//tV8E
      UkoG+/sYfOv7nC5LIxGcX/bQ8bk/YW9L2331f7C/jz379uNdo89EIkFf93XcPT/hoCeDUgb3
      InK4u07XWeeiouLeQXJaxncSve0Qle4pVhavsrM6Q/dsEMXfjmWkaDl4Am9ZEMcaxwvV1DIb
      ehZFc1BTW8dkT44QU7EFnMGdhGMLVPgVQKKpAkp2xawpEY7ye25j9+q42+3Gtu2Ckyj//Ub2
      +7u9J+9f2Mh8V6pf5K/3er0PZdjxx4Xrlz/kMV8Yr0MwHBUETr5AU+uO+37e6UfPFj5blsVP
      XvwhNctd7K8T3Isk8g7A/OeNQtkjWYHY8yyVVdX3bItWV9+IoiiMXf8pDcEMi/rjnHjuGXSn
      c0MiVVWVoyefLMTcn3jmD+m+dpHW/U1UVFbT31PO2Hw/WQNC+iSmLZA4SKt1YIQxbQd7T3d+
      ZM6Zj5cxDKNg6y/m/FvdBTZLkClFsQMumUxSVlb2kdp/Pyie+E8Kpmlirs6jB+DcLETrT/GF
      ziMP7PmLC/PEJnv56o57Ez+sD/zLO0aLGdVoxs+g1k6HL7glJqtBzupy6vlvkk6nqau7bTq6
      283xeByn04nH42XvwWPMzkzjdns4fuox4DEMw2B1dWUteyyXxWQYBqqqPjAH0kZ2/mKzZfF3
      +f6Uiktb3YmKB/7jygXeShs+aYyPjREyZkkYYJQ18rkvfvWBOgC9Xi87aitQlel7XlvqkS/+
      3rZtFtMKsvMr+CdHGf/wF+zYte+ec6XF43HcbveGNnkpJeHwMi6nq6DoTI4PMdjTxZWr13jq
      medo7TjI9Tf+ivZQhg9uaCREA8+/8KdomkY8GiEaWaB9z2FM0ySRiBdiaVwu90cmpDxR5mN5
      7pahtZlHeDs6gGVZeDye35gFsLS4wNjb32NXuaRrUbDr859DfwB9zyc9ra6sYKQTZBUnpi3R
      lLv3byNxJ/+8lazCdddhIu+9zq7Dp9DKQjgcDqLRKE6n844EppwHewVt5NY7iANPUF0duuNl
      c7PTDJ//rwhPA6ef+xMMw2DsxsscrJpn91kYD/czNuLicEsWXVOo9NtcHl0E4NbVd3CvvI6Z
      sBlU3BjhbmRihL55L/vqs5jCS1njafYdeuS+JzbvH8jnzsK9Q6Hv5135cITiRfSbgFg0yvTC
      MifbIOtvYOeu3fccv+GhQSorKgmsKaB55pS/b6DnJlNX38ZjRCgzI3g1yVOuexN/HhuJtWNp
      N4m2Z/BkJGJpmNqRl+he0XlzuodgZpaMcJFyVXHgiS9RU1sLQH/3dVYv/hAtbTi49Npfs+/M
      N6ivb0DTNGzbZnxshP5LL5JOpAk6cy7qZDKBq2IPmjKPqUg8NUdIprOoax76WMqmvOUJZmen
      cYTfpKrcZijagXfs5xxqSqMEYHIxQqVHECpPMTDxEssNHVRtQVnZDHlzZKkCDLeJPW+7LxaZ
      iv8VB8NtFFKdz77yeDy/MdGXUkqGrrzHroDkn0ccPPONF+4Zdm3bNpd/9rfU7T3OY89/ldmZ
      Gaqqqwv6WCQcJjo1wCl1CO0BRXDPJeFiooKG6SGaEn00VkoUIVDKU6RT/TT5JLDKWCLMxGA3
      +tpukEomaHbE0PbXx1HL4/z0lR+yo85F477n6b11jcbmdvbXrrAQFQR2ncUwDM6/+rdIRyU7
      6sHrFCzPDhCo2UXGUJhctAkbNZx+7hg9196nzWuyGIWsdHG8Ll3IA64OOBhaqWU0KhkcnaP2
      WPYjWYRKCbaY6PMofnZpQkt+cjbSDYq9yPlMtU8iDPphwOhQP4HFqxyoEix5mmloarnnPVfO
      v4uwDezFEcZGhkilMwz29fDYU8+QzWZ58Xvf5vTZx4nNv0vwAUiRUsLwiuTpimkqBCh+yJtP
      q91QHJzR6jUIj73E8ODbZIWOnUngD0gUVRU4VMEXDoY5UjfDcNf3cKWuM95/kdWURku1IBqZ
      R9d1qup30lnZh64JFEXQpN/CsixG5yzS3mN85oW/wOv1koqM4HYKTMsmmzXXafdZE1r2P40Q
      Cp8/kmXo/N8wNzdz34OwWQzQRibQzbLN8teVBtvlP28UpPXrDCkl4cgKQSfEDGg/9vg9ub9l
      WSTHr/OlpiynXZNMdb3O7j176b5ygfHREX7w//1njhw7gaI5mMx4se5ioNvMeldq/RICHq0X
      VLlgKxJUhRMO+mIc8y5zoiKNQxE575QQ4HbmiPpMR4pHdtr4tBWiaQ2PUyEemQLg8KnnmXU8
      xcpaeLZAUlUVYmAxwI49JwoEZRq5MIUytyCVCJM1i+RxO0tq8O84GJqgwq9ysCnN8LWfr5Pj
      t4tSIt/MKpT/XJofnBePShdSHoZhfCLhzw8LlhcXmL/2Bk1+gZSgOu5dOTARj+NJzt5mdq5y
      hntv0ljhZW56Es1KUTPwz8Su/wr/6W9wK6xwNyt16Tzmv3vQUDJZuWFD6v2rlLvWEuOT41iW
      ha7rnDjzHGOJdiJxyaLoJLw8R3tVlJmJwdsNFDluUeZRCLnCTCzdJtBHdit01Cm49bWgNQFz
      MxMMD/UzNNi37U7mKyYUizTFnKKYmxeHR+S5+51c5fZzincIwzDWmd5+nRGPx3Cnl1jJ5MIK
      4qsr97xnariHej0XsrCUAuGrxr78HdxWDMfwGxzzhqlySg6pk6xc+hE3oy5mkhs/q3QnzuNj
      WQBpY+MfmqoEbTW5Brj19R7Xg498hWXP8xw+82Uy8xc41ALmwtuFmkK+6j1cGPWRNqC2PEMk
      Zm24oiG3++ysyZAc/h6Jgb9nsL9nWx11u934/X4cDscdfoFST26pCFT8tzR/IP9P1/WC4rtR
      xtJGyJtMPwmYpsniwgKGYdwzQHCraGpuJRw6wY/HHIDEGL+MaW5CKMDE2Aha98+oXAtTTpgg
      zTRlqkmN22bauYNxM0DWzs3JbkcYl8eH9yHYUNX/7c9f+FYqOk8yCy7HJsWhpMF8uprqUC1C
      CFxuD7UNraysREhNv0GlXyCkxapop7KyCkuqzI124VAMHCrsbVJRlM05boVfpdInuT5qMzI2
      jaLqBIJVWxI5hBCF+HxFUQqi1Eayfen3xSjVCfLtLDa1qqq6pYJYn4THdnl5mZ6eW7z1xi95
      881XGezvpufmJXSnh4qKqo/0bkVRaGppYXhsEr8RxpmJMLCYprlj74Z9v37xAxqS/bjWDGQB
      J0waPlYtnUOOOertOeKpLH5d4lJzC+T8socOTxL/9uoyP3Co//pP/sO3RiNlpPQ9jM+s0hi4
      k4u4dYgv9TM6m6a6phl1jTATiTjx6fNU+AVel2B4Ikx922G8Xg/hxQk8IkIooOBQ1w/afMRm
      NQk+13r3d3OVYGRqhV1lA9wcs2hu7diS8pnJZEilUuvEoVKiLxZ94M4FUGwKLRaDNE1D1/VC
      gvpWokBLxbAHCSlzZSNffeWXvPvmr2iqjKGqKgF3Epcawyv7GZ9J0Ny65yO9x+l0sufAIaLe
      ZqL+HejeMlKJGLYt8ZTWcFV1okOXCOq3dat5RwPC6aPenEVXBXUeWVggkYxkJK5S4xFUOT9d
      sVL9sz944lv+zDVIjNAYSONxbrADCHBpNlpmnJ7RVZp37CebzWLbFguTPVT7cqLPTMxP887j
      OBw69a2HSGjtjM5Z9I/HiWZ9xJMZRsPlROMpJo2DCGOJYFHEqmVDTUChwq8yOzVKVqmkKnTv
      rJ54PF7YXTZzVBUT/lY9wnlRJpvNFnJyP82ygwvzc3x4/n3eevN1Zsa7OdCus6vZQV2FxEpn
      SKYs5ldUGtqOkslk8fn9H6m9mqZRFaqhsbmF+oYmBq6cY/Lyq2gVTXjWapICTE+ME1jowrO2
      YdvAqHc/vqVb1Oh3MlSfA+ajGVp8Jn59+xG8DxLq//Hvf/tbAW2RUHmOixfDtMCSAk0V9Exa
      9IZ30NCym1BtA5fP/ZLw5GXKW55gZHwexU4SSbsxpJvK6hqEEASDFdjCTWTqMhnDwlHzGPUd
      Z5hcFjz6+GeIZMohPoxnzSasCHDrOQ68uApprYmme9SCl1IWqkkU1zgt/lvK9TcTxTbzHiuK
      gs/n+9SI37ZthgYH+O53v8Ot7mvsqE3y1HEPB3boVJSrdHfHOFZmUSYsLo1liI4PMdF9ETxB
      KqtDWw74W4mESSbiuNx3lloXQlDTtIOhqQVil3/MbO9lRqfmqW3ZQTwWY2G0l5BuIAQoQjBi
      VuJJL1HtyIBYH9wshKDOK0iZgjL99ncbWe8+bqhf+caff2shHSIWmaPSf5t7prKSm3PVLKTr
      wFimoUKwuJLm2GMvMDc7TWrqFXZWLDIdUaltf4y3Pujm2f1R+keXMPCwEl6goqqGlZUIvtRF
      DjTZxMIzVO84S21dA1e6LnLk2BkuXR+hzhdFU9fb3926ZCqssmP34bsOhBC5TLF8tlhuZ7Lv
      8PBuxO03EpVKF4uiKPj9/k/NA5xMJnn3nbe5dvVDqr0L7G7WWFrK4HQI6qpzC352MsWuSpWF
      uI3XtPlSq01HmcWVG7dYHb3O3OwcwfoW7nUQygc//C/M33iH2v2n0TSNSCQC5PK0pZQkEgka
      W3YQGzjP0bIoDcYkl/onqdt5CMMbQsx1414bpmnvboxshjm7jPEVg5DTQCviHw5FUqZvHHIO
      n1zck9bkmWYyGiXu2MXEUi/RtEbWdpFQGrGzK6wuTlN+7CssJ1fZdaIRXdcpDwQY0XbRN30d
      y5NEdThpr3MghIWSnWN68DxqdpaWHXsR5Agxa0r6p0xcLbNU1TRw9rGnsC0L3d/AewMRntiT
      xKHe7njPXBlHn/7ClgYiz+E2qiu6nYHML4a8t1jTtE81/EFKyUs/+wk3rnfR1FhLa4uK1yVY
      iVrMTSS5EDNIGbDDZSNQmVi2eapRQ9NU3MLiC60SmMdYnafnp6Ps/NyfrKuk3HPrFl6Pi+qa
      OjweD2X1HXiCIUBypesygx++yuNf/UOGZyeYnZtFm7lGzN/GDtVCypxofMzuY+y1CZwnfp8h
      s5qTzlwsWPnqII79T5Ps+jEx4eJKJsBp9/Rdxc7SXeCTgPq//88vfGtleZq2zq/iDJ2gac/T
      tB94kmQ8yux4NyFvAqH5aWw7RGtbB6qq4nS6mJseIx1fwF19lHQySp2jH68zpzBr9iq6QyVs
      VNN75VU6GxNICWF2cuz0Z3G7PTgcOpHwAouTN7GcDSxHbWp8cZQ1l15deYahwSG81XvR9XvX
      v0yn04WKcptde69n5D2+brcbr9f7sZ4CsxX09fYwNjZGNpNiZXkOTQUpFc50evH4HdiRNKdC
      UO3Lyc/TqzaVTgWXtp6QVAEhEWOwt5ukq4pARRVCCFLJOGM//3+ITg0SbO+kZdcBsrZg4Of/
      FXPkQzLZLNMTI+xfPUdNepx6ZwYlPs+uMqtgvFCEoMJhMjXUQ7Uap3yNq6eyFtN2gE67n4BI
      0hN1sdObRN3ECJFnMvc73vcrMmkAiYzKUF8XTt1JcqkXzaFTv+dZmkIODjWapI0uIoPX+GDg
      IEIopFIJypnkUIfFD86/w8kdaaqqAARBnyDog6tjEEDikTOAiqYKKrVpEok4ZWW5jLChm2/T
      4R/mytJuYo465iKzNFblBkJTBXuqlxl8/6/I+jo59fjm5e9s2y5Usy4diGL7fp7DlMYJ5XWC
      vJy/kRPm00DbjnaSyQQTIzc4ttfJoQ43lYGcptna4OTtiRSqcrsvp9s0PhgyOFOjoqul3BX2
      6suMvf833Fx5gc5Tj+H1+XFrEE2kCC8vM9z7Fp7Rt+gszyKqwLQtJJPrnrU7sDGH3l+eWSfn
      h9VK9hzoZP61N3EqYMQjJIOC8g1igDaal+3ifudLQ8DJtjhSXsCyJVqzwLQk5y58F13kiMrl
      ENQFbGrl9ZxsHVgLOLOg0mvhdkhKqzzsqctysfddjjTdFh+qvXGmx4coO5jL1Pf4q5mJpnjm
      ua+iqRq33hkBbp9Aoyiwuy7DavIi596SnHrstzaUY/ODV+oRLi2iWzxYpQOWr/v/MEFVVQb6
      b9IYUji210OZd70oJhSFnM1l7XohsSyJKiCSgTI9x/0L1wto89t09b2DcfQRFmenWUnbnPj6
      vyWyskr12Ku0lOWiKQEc25D8ikdzOQ2+g08y0fUmx30SBBwPQWYT+t7MSfpJoFAVQogc14Xc
      3x1VKSJxm+KkXiFKTYfwxD6jMGDFcOlwpmWGjJmL2jMswUy6iUMde9fuFRx+5EwGycEAACAA
      SURBVDmkzBWa7eu+TLUnXqiELKXEMCUOTVDmltSkLvDOT/p45HPfxO9fn45YXER2s1LnG8UI
      FQZhzdZ/N+QrThQvqPz7tmpl2Q6klHx4/h0O1I0xrWjrDhbJo6LCwUoqS+XawoimIeBQUBXB
      bErlw4iHw+Upal3rAxI1RSWbzdDQsoNoIMCtX/w3UlmLM34KUbv3g4EVwUzWScJdR0c2QX2s
      F7HmHe4oezjDSLQ8GRQTHuRCIZqqNmYBxYFjmw2YEIJkRnJz5RAiPYHuq+XUk19bVwoxL/ct
      LS2Qnvw5jaHbXljLsrgw4mNnKE5NQFBXAeOrYsPyY6Vx/Zu1Z6PPeUX3bgRs2zYvv/Rjamtq
      OHz0BKsrq6RSSXpvXcflSHPgyDNUVd9/TsNGMAyDa10f0tmWxeVUmFkyqSxXKffdnpN01saj
      3+5zmQtWTIlQFHaVWaxoHpb3fJ65mV7k4iAVSopVxY/n6HNcffkfiOGmJhujMxCBBxCeHHTB
      sOkFhwv15k9peEiJvhiFPT8fu5JPMbwbNtPW81z31oRBXVDFliqr0SjhqIfnj59ddxBe/p2K
      orC6sopHSyOEUliEiQy07n+ahGGwmvglpq0Qan8c/wbJ6HmLTf4giXshz8l1XS+ctXU3XLp0
      kemRixgRlYWFaWT8FuHVLJ854QZsblwRPP7Mbz9QEWpqcoyTu9OMzxg8e7qMWMLmxlCGs51u
      QNA3brGaDXE9GuFEKFE4eETXBfGspMypcso7z6Xhy5z+2p/l0gbDyzhTSZbf/w5HnRHCGYnT
      A1spQbIVVLskzzmXMO0lHBs4VO+FT8r2X4zCjBWfNHiv/NrNFki+8S0hjXe7s7gqOgg6I7h8
      KUxjfehfLBbj8jvfz1X6slJ0BGFkzkJ3aDRUSJyaZHF2kBOPf53zr15DagGefPzUpu/1eDx3
      HB69GfJ2/a0Ots/rZe/hz3Lzypvscl/nzBEXUubvV6lN3GJs7AgdHbvu+aytQErJla6L7AuB
      25kTaQJ+lZP7cjVCV+MWpu9RvvTsZxjo62Hs2t/SHrRBCGxL4lRs8tPnDoRQVZWF+TnqGxq5
      9PYr7HFEUBWodj94YlOEQL9Pq/GnYXhYtwNstQF5jrnZIvG5BM8e0bm65ESkDU7vS7Ew/X26
      E2H2HX4sV4Zl6Ca7yoZyk2bnPMCxNEzNeajyx3A6BG3ufrrO/YzjT/8bUqkkirL5yOb1gI1O
      V4TbYpLb7d52gksgGOC9d99gb4vKyf2OdbqQlJLZiJMjByu3/Ly7QUpJX+8tGryDWJZNY81t
      3cS5FjYwtWhz6PEzCCEYuvoOnU4rZ4SQEhtB2gRNkShI7PAEszPTXPvRf6Yr2EJt217Gkw52
      l20e3fmbhHV7f57754lpM9GgWKHc6LqlqKRn1kfbvrO4HGv5uFjExl9joL8XgJYd+xjNHiPi
      /wLp2j+gP7aXjlp49kAcpyM30QGvpIarLMxNEgrV3LMzeY/lRu2F26LPdjlNQ0MTv/O7/4rZ
      VS+iSAkxLUn3ZBU7j/wOFZUPZgFEIstM9f6Y5hrJ3LJBMn1nf3SHA8PIcuvGFQ45h6n23rZq
      tVQKFlO3Y50axRKT196j4cxXaLcnaBz7Kc2efyH+PE2ssy0U22M3s4WXikfF4tDonMnIokbz
      wS/TefIAt7pvkkhZLMZUVsueB3uEiVuv0NTcii0llQ372b17D4qi0Nq2iw/efJHDlTcAuDgk
      2FkHNQHB9ZEu2nfuu2endF0nlUqt62Cp8nu/26xpWbR2HOf6zCIVWj9Jw4/0HePkM489EE+x
      lJKB/j7OnXuHbHQVMytoCOnUVd7WK2xbMjitkPU8ytT4KKL3+1SX385nANBUBZPb4di1LpOy
      +EW6p67SFjALoQoPIz6qDlCa1Xc35N+jjc6bNDslLj1H/JG4zXJM0hYSBa9s8QuKY2VKX1Rb
      oTK8WsPho6cQQnD8xCkGy8sw7BR1lY0kgjUcqq3F6/XS3zeO7rg9uQ5dp23faQau3qCjVlJR
      7uFWpInaaB9bFSoVRcHpdG7oFMsryvdb0ycUChEKfRbTNJmbm6XR76e8/O6lt7eD4eEhfvHy
      D3j8oEHQ7+H6QJz6Kgfnb6Z48pgHKWFwxkVlxwskEhn63/4Oz+/I3kEwLRUa1xJZVjOSoBsM
      W+JU4Vjlw8/1P6oOUGwJ3GpCkhZLCW4tOdhXb5DICL73PlR5M5R7XFSVGFxKS4MXLwLLht5I
      B8999ffXOaN27d6Hbdu89N3/k8a2A7S0tjE7O0MoFGLgxntkUlHc3nIcmkpTUxuTE8/TkwhT
      q1/CMMZxd/wrAls8AFqI3Bm7mUym0IbiNt/L3LmlAdM0GhubPtIzimHbNt3dN/nJi9/jiU5J
      e6NrzbQscOqCRztziu/Mko2j6hla23Zy6cJ5nmxO3eF/yZuPE1nQ3JLVtMX3BiSn61QOVP76
      1zK9H4ea1lGv0jXYxpTaxHJqmWePdLOr3ouqiA1X0UZJ41JKehZCHH38d+448igvdhw9+9vU
      NTSRSCR45Zcvc2BvB83aBczwBbILELN0+la/xJlHH0MIwejwXlLDV/FaFk1bKMlR6JCm4XA4
      1qUvFi+Ghw3JZJIf/uDbnDmgcnTPnQdvONaE1ERGp6NzF0IIqkO1hMcUPI47IygnIhbCAK9D
      wbShrDLEikMCS59Edz51bHcRKOOrlTzy+G9ho1Al+tlZayKQhdr7W0EsJfHUnty0TryiKDS3
      tuNw6Ph8Pr7y1a8RqKwjkYagT6EmoNBUaZIe+yFDA32YhkFb+24e++zv0tjYTF9fz5Y7lDeJ
      5pXzUqfXw4bFxXlO7VMJlq0X89obnYxMZ7DXpiCSdONbG19VU8mUFNEQQhDPSC6Pg3rwi/Sa
      tSgC9rpXiXoaSZm//jsAbD9xXnGJJIMf/h2B+Ot0hNIFsWYjhbFYtCnGQkynvmnnlkOXA8EK
      fGUB4iUWjo46BSb+gZ7r54hEIti2jb+sjH37tneWgKqqeL1ePB5PgejvZtX6pDAzPUVfX9+6
      71RFY3Qmi0tfP3aRmEXArzG/bJLO2jjVDNHVFWzbZnlxkWTWxpY5x7gtYSQMP7uZ5bPNCkGf
      m4pHvs5iVqNGz1IXuY57g1CKfwFobVUpNHdkS8RbvDiKsWLW0LnNUACv10vGcgLFdT2hNghX
      l2coq2rB6/WSiMd5/62XePYLv7ctDp5PknG5XMTj8YfiNPVLly+zZ8/edd9VVVeTzOqkMreZ
      QTxloyq5jLy6qlyfD7ZluPTWf8F0dbIcWWV2qZ7B8Dxtba3Iyr20Hd7H3vExLl/4IWr2PBMo
      nHaZuHVJjedO692/IAcNSgtLQd9CgIXlOG4txf5mrZAqmR/AO3QDsf3KadHVCD7nncWwhBDY
      ZpKWllYAeru7aNK76e/tZv/Bw9t6Rx5e772Pyvm4kN+Sx8fHefzxJ+5oi6ZpSFvSVp9boBlD
      8uqHCWqCCsm0JJ6SLIQtmmpUsobF6afOoOtONE1jamqSsd4rOJb66YuHWR3r43SVja5M41JZ
      C4/IzYtp2XeN3bobPo1ElU8K62QCIRQuDKosRNJUedO01agIsXEZkWLo1jzXuz7Y1iANdb9P
      y9qmUXpfpTZFz7VzRCJhYjMf0hoShMff3XKsTyk+rfh+y7KIx+OMDA/z4x+/iNfrvSPq1OHQ
      aGysQwgwTMnQUhOBuhMkswpv3/DQN2aSSFlcHYTqlicJBIL4fD4uX/iA11/6Pif4gBPuIZKj
      59mlLxN0gtdBITYIckzt8oLk5+P3JwJ+2qLjxwn1P37zhW+pRi6NTQhw6yYdtSa1wVz6Xd4K
      oaoq86vgUO/kItVlJjMTffjrj+Nybe1MW4erjPmJWwQ85h3EGfRYyPgwEwNd7KnJnSus2XFW
      zFoqqu7tEf60kXcm/uO3/56R4T7SU6/QsfcRmjYp8+L1lTEwMMhqtpaDj/weHo+P0cFrPHYI
      ekfTHN2js2Qf59TpJ0glUzidTt5581X27O/kZt8I8bSBlOBEUO2+s8KCEKApghlHI41adNux
      Or/WO0Bxt6SUVPpv1/Eprm+TSEsujAXJrPlTir2fihDsbVS4ee0i4XB4S3U+GxpbibuPYW7i
      rwh6bfY1ZAptqS6Hmf7Xtt/DTwG2bTM+PsbI6ChL072585LnLnLp/Ot3XCuEoH3nfs48/+85
      8eS/YXx0gJHhAWprqqithCePubBtsC3Jyz/9AdFYlGQySaUnS119Aw6PC8WlkDYt3KpdeH8p
      ajzwxeAU3vtQhR423UEI8cDytO8qEeYPkAOYWTYQVhKPfjtytBiaKihPvc/IB3/F+V/8FeMj
      fRs9EqBQuUFzV2NswzznEnGSyU0KSj5EyB8LtW/fAeKJFI/s1miviuP1bx4v5HK5uHLhFUT4
      ZXSnTlXzo8STkqBfJZa0SWdNdu3tpLa2jt6bXXSWjxG58U901mU41Oxgd7OTzN1KLv8aIa/Q
      PwixVtnqkGkqPLknharmHGQbcYUdIYs9dVmONCyRGv4Ovd1dd+wGUkpefeWXpNMphMwdbb/V
      1Rz0GszNTP53sR23tLSwa9cu5iI2Q7MmL12S1Dds7tCTUpJcnaTCbzMzNcrycpiFiMXAtMbI
      ciNHjp7kwIFDqKpKZGWFm5MGM/MRbk1luDlpILDpWbUZiphk7tPm/zDkQW8VGxXSsmVO39kO
      1P/1f/paQQfYDEIIyj0C3bH1AfK7bMyVXm7eGiCRUTBMC5crF4rc3NzC6kqYleGXqQtkN/U7
      lMLnlIyP9JKkhkCw4qFVzqSUTE6MMzk+wvLyCu01Fid3CYbHJqlrO7phu6WUDPR10zc8x8Jy
      knhkBFNUgPcAT332awSDwYKXc2Z2jnbHIPsbNFqrVJIZm1uL8OhRH8uodM9k6Sjb/tgUp3du
      h8lICfGsTdesRTgjKXcqOD7C1NxtXovF8nXRCMCbczo+1cK3DTFP/Y//41e/pRgLd72o1Ewq
      xO2/d7vH44Q6XxQZ7WFh9CLj8ybNbbuZGB0g3PNtdtemCrlImxWxKv4NoMpvsTp7nes9Y9Q0
      7Hogh7Y9SEgpiUQi/ON/+79ocg2hukOYwo9bjePVkiTVZgLBO0UhIQTC4WN6PonQ/NiKn9/5
      g29SVl6BoqjcuvY+N6+eZ24+wsD5X7E0F8d2KFT4FG7N2ZzY56bMo1AdUJlYMGl1bZ+j5wl/
      q8Rv2ZLuBYveWYvJBYtdQhKLWcyaUO+/fWrPQkpQ5txa6cP8/G927UYVvgEShqBb3c1ObRH3
      Nhz+W7q0+EVzKzZ9kxYZQ3C0XSEUUO7IJy7tUNAnKPNIboTDAGQNkyqfsU70yQ986QAUhzNI
      KRFIVuI28ZUBhvpvcODwqYcqxGF8fIyut77NwSaTuYjN3mOH2bXvOF1v/DVHq5e4fv0HVNf8
      u4I/QEpZOICvvr6RZ5//MkIIDMMgHo/Tff0SWvwmu2ti1AYkMys97G4zkdLD8JLBXMwmVK3j
      c99mEns63Fy8FeNkrbZhwYKPAiklXbMW0aQNGajX4JgT1LXcZF2RXFg0+faixcE6jZWYzfSq
      ze8edt6zysSWF95aNfDCfcCoUU5NuRvPFizlpi3JmLlq6NumnP4pi4EZ2NP5KPPRy4QC1qbE
      XwxFwNLCLEOD/YRqGxkdUQn6busRxUF2pYF2xd9ZNjg0eOaQg+G5l7lyIcbJR5/fbjc+Njid
      TgSC03t1luNgVtTz1ms/pdYRQwABPUbPrRscOXoCTdMYHx/n/Td/RE1tPUdPPVvop8PhwLZt
      zPA1TnbkFX/Bbo8Ecr6EtCk52uEsJBDloWswnlHYb7Ct8uNbtfaMrtocFJIm352iiksVPBFU
      WTVshhdMOn2CzgrBhTGDU63aHZXCi7ERZ99KW6cMP2b7kwR7XsIZvPt916ZMpmdMrISNXqGx
      bUmtuVpFSpOAK0VC24Flbz0Bob4szkokTDAYJJrW7iDujVD6u6YK9jSqKAq0hcDKrD5USrFh
      mNRXmNgSlmMaukPHTIXZV58BJA2VCsrczxjo6cK2ba5efo9kdAZp3a5wva5QlLqxF1vKnOMs
      lbFJpNczoFRW4rNs+iMW2QdsGUqa4DUlVfrdd5Zyh8LRMgWnInAqgpBpMxyxP1INoFi2lDHC
      UkajJ1NF+ehr7A/cPQcglpUMjBrsWbU5YAnaF63t7wCtNQoepyC1cI2BOZ1GXdJYtbVtdl+D
      xc35y4wMV1DuWm8dKhZ7YmnB3IrKztrN/QnprGR8UZJ4CGJ8ijExPsbUbAKt/BiVB04Sj8cQ
      RpjhWYu2WhXdARYOKkON9Pb0EJ69yY4GnbKqnXc8S1EUcFZiy8UN7dWpjKSrJ4lTEzhdCk6n
      gmELVlYMmlp0ylyCG1NZjtfefZqLc7wThuTchIlTg+aASlv5eh45FZNoNjjvwsk3Qr1T4fyC
      xc4KJZdTva27oXfJYiVukUHQWK7SFlD4+YSC5Q7yiHeEOtfWnlgubiuvKkV1gbYKRcCXTzl5
      v8dkZ63BQlShsWpr9woBe6pmWZ74R3bWrT/qfn1yjcQWOlIa667JYymmEXadZTQ2RKj+zhj6
      TxOnzzxK8vARvB4PiqqSTqcZ7S5nOpzCtCVZ20nC9PDBW79kZfoWRxpsume97H5kB7BeFFyY
      m2F5aYEbqTR7m3R0R3EFbait0Gh0QXWZhmFJkhlJxrTpKFMJelUsWzIwozIQNtkRUFEVsSHh
      CSHIGCbzccn1cYMTXgEWzM9keX1RIehWWI5ZqKqgMaiScSmsGpLgNqyCQsAeHX54I4vfo+DR
      oKFcZWfl7QUmpcSwBbNxm6QhqfcrlDtzdDEXs3m8RsNG4cZSljlN4+l6SBkLBDaxg5Qaaq5M
      mrSk1n93X9pjuVcQCig0V4PLYbOSyJlJ8w/OmnB1zMHJ9jtT9nQN6jbYqoq3xYAHAp4ksxGY
      M3aSSKYxjRRBvxNTOmjoOEFjsIGJ3nfx+I8/VPZrVVXx+/0ApFIpPjz3JmWVTVTWPoXmcFFV
      Xc3o8CDVkz+DJpvBeYugM00qlSrUTRJC0HvrOnrkdT63XzI6p/L61SRNIQcHW50IAbaUpNM2
      7jVzp0PNzcG6tiiCx/fpXBrKMrlg45OSXUGVYBG3FEJgS8n7YyYTqzZfCOREFoBWt0qlJZFp
      mz1uhZQliYZNjqo5EWe7qHAIvhAUJEwbXQh65g10zUG1BzwOhXBa8uGUQbtPodKl0DVlYilQ
      6VkzhEhQhc2+oMr1sEW/ZeEUElsRNJbsVsspm+4FC4+u4HMIGvwQX7RpKg3xH7n0D9II31w3
      IDlrC+uWiiCnba+7fS2A64fnLL7xpINQeY5DJTOSC4OCUzslbufGXOdeGF3UmEp3UFvfjLes
      kq7LF6muDvHUZz6Poiicf+tFOlyXGYv4SanNdBx4jIbGrWeOfRKwbRvTMFA1jdXVVd569SW8
      DosGemmrtBFAPANv3MpQ0X6W3YdO4vP5EUKwvDRPYvj7NAazpLMShwaX+jNkDInfLVhNSPZW
      KXTUbM2JaEtJKguv3sjwXK2y7mSWSMri6pDBfje4lU/OIWZLyc24zWhWUFkm0IXgkepcdev8
      74YNcUPiUgXeoh1HSokkF4ZjS8mNsEVaKKhCsJKyqXBAZ6XCUhre6s4SlLDDlOglfdPMlEVm
      9f4SpuXainhyp+DGQIpQpYrPreJxaXir9jKlNuBcfpeWyu1FcQ4vOOibL2dPaBA93M3kdANf
      /71vkkomUVWVlZUIWvw6nnLBvto40eQtlhZ3PXQLQFEUTMviJz/4exp8SfxGlJPVq2t1PnMT
      4XfBV465mI9eYnQoQOfR3HnLlZUhhm40MTvdTdAtGQ3bPH7Yx3zEZD5ikkzZeHSwpYJtS97t
      ydJYqbGrXrsjFVTKXMFbrxMqXeBcWzP5OkoZCzQp8agP1rF4ryoPihBUa4K5RQszKTixXy8Q
      f66UTq6tG+kbQtxmrIoQdFZoZGxJxpSUB28zhemoxV4TyqTc0CSsVfsFuv3RAotyGrlGPCPp
      mlKh5gSh2kY6du9hZqqK7qGfcqAhtaVnzUUsLvVleepQmupylXd7dOr2HEfTNPxlZUgpmRof
      JmF4uDIpwEqSSWeYz37Inv2H71nk9pOGy+WivqmV2Ni7HKlLbVjkFmA2YjIvBzmfjBEMVpCI
      zFFl9nJgl0YiYzOybHOhL83eJpWz+91cG8kwmYTxqI1pS0yhkpzOcjklOd6+3jAghMC2JR8M
      GMi0jSqUte9ypsRqN9x0KwylJe1OgPWHF94v7kb8SSvHwYdWLPaZ4LDg8tUs/jqFR1r0bVuK
      hMiZYF0li8WQglk/eP0actmmNW2vWwgPxIOUU2JhJQUxrYlGp8XElZdwCJOspTA4q9BelROH
      7oaROZPuMZNaj8n4uEBtdXF2j6RraYKx0XoaGhu5fvUy+w90smvvIRRF4eKF83h0jWjfOaR8
      uKIWIbcLPPrEZ5nddYArv/q/eaL9zt12KWYRR+Gzu6Z55fIQE90mNRUafh9MRRRuTFocbPfQ
      Xp+brtllE6dDcKD1tva3mrAY7jKZnskQLNOIpWwON6vYUjK0AMuylr7FMF9uTKIq63UuIQTP
      tDt4a8zESEns9k7sVIK28DC+kmix7djq82bd4mtt20YC7y/YqGmJKgUaOZF7pw3DMxbLNTaV
      W7Tq3AunahVS1TpdCzZDLkFlSlJeLNpHrv6d1Fdv3uURW4eUkLVydeUF0L+gMJUMMj4bIWq6
      KXcbnNrrY1coti6nwJaSa8MGLl3kok3TBiCw3Q7qKlXe7bYYmpPs3n+Mwb6bvPC7f0RrW/va
      O29bTT6txJetQErJ9atduMf/iaaKEtPissn5MQu/L2e5Ob3Xhdel8Mo1QVnDKeT8TdTsAopb
      IRy1MKTgS6e9KEXyesaQfPdXq7i9Lg4/9XuE5ydJTneRTKU49vyfUh4Icv2H/4nHqxIbcveE
      ATeMWprPfo2Wth2MjAyT/MF/oknPja9pSyayghqnik9Z73fYSNTJE3/xuQ0FM7ct6Bo22LNm
      pim+c1DAocM6NQ+gbmnWliym4FJvlj2Z3I7joqQ6+Ed+SxGEAOfaE+MZyZWlWnbsPsBB5Q3M
      8h3UtB1heWme8cW32LGW15JM27x2JUXWlPhcuYSOoy0aWUPy+oiDkVgtoeAMexptehen+dJv
      /2uamluL3inW/X1YIYQgWFnFTI+kqWL9b/UVKsElyVNH3YVre6ZUAo3HuHzubfZXZdAUWFq2
      aKxx4nYKppZMmkJagXh0TVBb5yRKC0eOHmdlpZ0PftZHkyvNe+++jSMV5oubEL+Ukl5aOPn1
      P8Pt8XD9vbdYuvgmDeScVr0Jm1VVoT+hsNe0OOqROIoY2EZjn3fkFTMoW8K7ixbZpKRmE/3A
      JyXnh7LoHpVjdbmzhLcDKSVXl2wMWxBfNmHV5qAUhaOZSvGxBdFkDGhoaiGweo6dTRbvzUWw
      LAN/4h2CZTC5JJmK6CRWYnxhv1Y4QdCWgv+fu/cOkvM+7zw/vzd07p7p7sk5B2CQAZIASZBg
      FEUxS7IC7ZV9693buvPtJVe5ylU+/3N7Vbd1ofbuavdqT177fJZLtmUFi5IoMYMESeSMCZic
      U3dP93R4+w2/+6NnBjODGWAgIQz1rUIVpsPbb3ie3++J32cwpjKl7eLxFx/n2skfoIdaETUP
      8fIznQ9sYN2dQMrCREWXy4XjOCtsdAvzU1QXK+s+W9gtHVtyZjSMoqjsLJ9DUSS79uyjraOL
      0z/597SXmDzRrHN8zOFwq87bl7LMJt00lasYpmQybqOoGl/9+u+jKAqRSJSOw6/gSJUjbe3k
      clkuHv8F9bMnCGkm2ioBNhyBUlSJ2+MhHotx4YNf8mVPEtUFUgqSQuHJWo2WrEKlT+PT0Tyd
      moOCQFPAtUlXyXozSRGgOdCW39ghBaiQUJGUkLK5MmNxrUrjiTptyz6J4cD4iEVrTlICmwr+
      Mu6ZAqiqwO8vRo9bCKBan+DsZ+/w0j6H09dhOlNGsV9jd3UWXb1huw/EvYT2/R67GlsKF5R7
      joqqRnwPsLH9TtHf18Po5R/jdWvYtoWjBhGKzvDQOE/WO1h2gfL8eiLIvFKHM3+NipaH2fnI
      CyQScXpO/l901sC1M39N17H/ivYjr/CTf/oHnqi3mE0JLo1DR6VGTwqceQh4VWrrPCxMNhJa
      NT+hpf0GnYzP5+ehZ1/j7MchfvXBTwjrebrKdSr8hbj/4sAZbPurRKJR2g8fJXXmLYpVCUv2
      uaYq1PokqgIPVymcmwZTSvI5yQHvjUiNlJK8U1jdry46lOtgLyWkSt0KQgMD2Cx9uXpXaJKC
      3gmL+TKVyCpyQMHNu05B1yTTaUnAkrg3+Mzy+d0zE2g1HAc0zYUUGopiIB0LIQ0+HGwgMTvE
      Cx1jFG+wvSVllJbyqpWTbGq9M06g7YB4fB7VnKU0pFIeVoEFAHZEJNdGVJKzDqZhQ3E1L3/9
      97GsQl/00EAf509/SnHkCLHMWVrL0vRc+IDa1kN89Z/9EZ8cfx+pXGZM3UO8/wxPHvFSWaJj
      WpJLfQadu46snINpmszNzpLPG1RVVaO7XCiKwsGjzxKMlqN+9F1iCyZXpyQul0JrFPqvXqBj
      z0EefuYFfpY2kKfepsJVUIErMYszUzbtEYUDpSqPVBV24pgh6R632BMsPK/ejGQmD1lH0u5X
      SDqCCxkFXdcpzmZYSDq03IG52iYFJ8/lMZA4FBTJF1ZpLFMJewVeFa7O2swtSIQjKU46NK6f
      zH0LqH/yn7/656oxQyILA/OCEv+t6/y3CrcO8ekhGouzqApMLIDqr6bOPcXhuiz+dUOSxxNw
      bkyhd1YnUlZFSckW6yu2IdLpNDM9J5mcy1Ma1leqNVVFUBFWqYyo5AjQvO/LFIdLVgrgFhYS
      xOJxnv/yayxYpYwN9VLjHeLypfOUN+zn0cefYHCoB3eym9ZSh0+u5ZmLZPihPQAAIABJREFU
      W1zuz+EeTDE1F2fRVkgm4vT88h9wTv4U2f0pPb29zBoSj89HKplkZmyEnosX8WqFIXq9CZuY
      CbMzI1S37cPr9ZJOp7HL6piZGmU0ZaBK+FK5wmxW0rcoKfEIXKpAUwSXExJsh8EcXMoJ3EiO
      FiuUuAQlOtS4HLBMsguSVhPcmwjYZnmDUqASQRWCSgThjEN83mFg2mJs1iE671BjQKkBwdtJ
      vlhFcC/ljSiQlDA4J2ksuTsx4DvB8LzD2cVdHHrkCK2tbUvnub2d2luhr/sSrut/yflxk6cP
      rqWLdCScmWzg0LFvomkaQhQYraWU/OxH/y9KdogXvvU/ABCPx/j0vb9jd+kwJ3p1ajueYGH6
      LInZcUpDOtMLAhHqYmZmmlBqhpxwUWYvsD/kULIq5CwBw4bhnIJLgRLdIajBJ3EHylwkMpLn
      ugqDPz6ebuDFb/wXDA8Ncfr7/zdtboN6l4nCjYUxbUlOJuHZpQmgGVtwYc5mMGUxlxe0BgT5
      jEOnT6FvwSFvSKoMSfl9fKYbKZMFTNbUYFZWUnfqFClFuVEOLQQ0ld5d4d9sWMXyP8eBz/ot
      xtMhXv/aN2hra3+goUzDMFaGbW+lx2EzTA5dQ0gHl/tmh71nXLDv8a+RSiV56yc/YH7+Bmlt
      JFwEyg1amXA4wjMv/QFX5hspqe6isroeV9FumspdtFZpOL5Wdu89QCRcwg53lq8VxXm2RK4I
      /3IltAA8KrT7HRq9BeGXEuo9gutDBuMxkxPdBheGLUor6xBCUFlVha17aHSZqGKtVeDXBK1e
      +HzaxpbgURxipoPwawR1SOYcQrrgypRNa9Jh130W/o2QFILx9nY6v/MdkmNjjO/ZQ/D3f//e
      +QCw8Sq++rWPek1mFwU7HvsSXu/W+ITuJVwu1wq9+okTn7Bz505KS8vuuPfYNlJ4vQJV3KxA
      Fi4ymQxut4fXvvqtNceuad5Ly47DQIE5IxabY2EhScrQqC0vpaGxhYrKGv7mL84xPj/Dlb4r
      1NQ3EwyFmBlT2RFYHZuH0ymNh0LWhkbBqKFwOa1QqxloiqQrb/H+nMpzzxeKCz0eD7ueeYXY
      +98lZxfGLVWu6jqr8QqKLcmFWZv6kELUI3isy81ixiFtQEVE4b3jWexp66b6m/uBNW28wOC+
      fTz/9a+jKAo7X3+dXbt34zjODR/gQSBvQXeynGeef/HXHlxxN7G8+6iqSk1NDUVFRfT09BAK
      he4o/JpMG8yPXkJxa0tOcKF5YyKuYhY/TnvnHrxe7wq7hmPb5PN5AsEQiVgM3eVianqSk+/9
      DbmZ0/hKd3H40SdWZqRlciZaboh4LsDCQpq6unqGhgZp9xRWa1sWQo7VbgeWCHQlElsWTLBE
      3iFn2RiWQ3daoTPips4jKXNJRhwfpdV1aJrG+NgYvRfPoigCUwrOxW1cCoS0gqXgUgTDCw4f
      TdhIYCYLPe+lSeYFqk+QEYKZWZuKe/K07gza7Cwzfj+jZ86QB8KlpVi2fXczwXeKWFpyItbB
      19/8wwfy+1vBMh3jndQYzc/PMTI0QDYdx5/6gJRowEGnvHE/bR176L54jpkr55DzkwjpoGka
      WipG96KgMZVmdtd+nv3a19E0jbMnP6Cz6yDRkrKV49u2zY9+8DcUhcvQXV6y2QwLCwskh3vZ
      p8ZJlrZQlBzHl0+RLmulf3QCmY7jUwWagLwsrI67igTn4g77wwqlS2ZTzoZeWYRV1kQ+Pk2X
      OUFglZ1wNSlJmpJDEcGCCRc+zOLPSGIucEtByJRcqdaY1wT1UuJyaVTYkgopyTsOrgfI5BFT
      FJJ+P/6nnuLAE0/gDwTurQl0O0gpmJ6dJ5fL4dniFJj7jV+nuC4aLSEaLSERj/Ozv/iUgy88
      WqjIlIKP/p//ncr4EF3CvGGaGCAFzOQcKhyJaeTw+3yomkZr5wEi0bXM26qq8tpX3+TixQvM
      TE8RCYcJhUK0Pf0M0rYJFRczMzXJiU8+ZM/+h/Clf86RQIrlmdonYw5dQfDpgqOlKu/N2LxY
      WdhdPCrsZgE5f65g96+TkM6g4K1xhxOTkslBk6YMaEKhfKld0QEifoX6sEo44VAhYEQVfGo4
      FLlU9LxN6wNSgrzXS8e//Jc0tLaulGbcVwVY7ZnnTElvqpwXX3pt2wr/b4ru05/yjD7Lwi/+
      AwpwctbmSxGBRLK+SyIvJU5eYioKocYmxJKQlJdvzIWqKAodHZ3oqsCRgs4dO9ewYxj5HBVl
      IWpra+l16WQzEl2HrA2LFnh1hYQpcQmo2MD6XJ4Ptz4QkHckxrSNMmHR4hSuY/VnYnqhWaot
      qtCXLPQ81Auo96qMOZLUA3SG8x4PnlVjsqSUaLZTGPep3WGP51axuhBq+Yfn0gqTvsd59NVn
      t4Xt/+tgmc5E1/WbnH0jl+PcOz8l3P8JXg28akFAgnqh8G99GYCUkpgJIamgAoPXrlK3bz/B
      YBC3x3OT/2FZFnnDwOP1bkoZ39LaQUtrB6OjI8yM9OEJF8yXeF7ycEQBCVOGoMUnMaXAlnJN
      2cBmETBbgp2y8TmwPttkIZlqcnG4VCFjSXKWRKo3us6GTcmBLdzbe4Xa+Xku/OQnVPyrf7Xi
      72nXR0wm+nJUlGu0VGj4l2xBy5ZkTYlHF7eksrgd1herTaU0ctUv8dDewwixPZndtoqhoUFa
      Wm6ejHPhvZ/RMvj+SmEgwGSuUPQzaUiq15X6CiGocMOIx8bOCSIDvXz27/4NYa8Lu6aZ3S99
      jehSYjC5sMDZH/wNYmwAZe8RGvYeoKa2btO0/8XzZzGyJqeQxPJQpBcSQUKwEtus88GpmORQ
      5Pa1MwBig6pzG0l/SOUrTRoBrZCh9Veo9EzZdGiCBcBAILeepL3rEMDi4CATIyNU19cXFKDF
      J5h2RZhOuklOTWC5FaQiyGQdokLiuBX2d7rx3oYGYzWWF4/199KwJHPBxzm098gXOtEFBaFt
      a2u/6fVUKgX9p3Gv0u3xjENPQrLLLwhu0hAjgF0RlU/GLQI+lYfdFoq0sEYucf7vs5QeOELz
      zl2M9fdRNXKFYkWSO/cOFz9/j0sNNYQq6ylt2IGiqkxdOYGntB4HheHrZ2gLqmRzNnVSErEl
      5yYlpUUK7cHCrlzlFSxYMJmVVHtvnQtyqQK1WmOxzySw1No954V0jYvWMpXi5ay3AJcCy1XN
      LgrDKEwpN80E3w/oySQXTp6kqq6waGjdaZ2ALtj5xj9n+of/C62eXOGTwcITNGzJZ1cNju71
      MLVgE/YruNc9REdCxpBoKrg1Qe+sSkKtRZMGPiWNjyRhn0BTJJrb/4UX/lvBcWyk46yMHkma
      kv6kZF9QELjNTupTIakJDnhv0HZrArpmrrP41nVOfxDF5fXRuNSk4hHgEhb7vRP405PMnv4M
      CRzyQmzoMpoCZxIW5X6YcwThvKRUVyjVYTLtcMEU7IqIQqJLSj5LKLQID12eHJrYeNi4CoXJ
      9Et/Z4Uk3+Di5TZ9DclUxpLE4w7tSxfiF4LDHsGpbMHXadIFdzZU6+7AVlW0VROOtKaHn2bg
      7UnOvvtTFq0wzXJyDQeNWxW06pJ3zmQpkQ59msrh3R40pUBfEssIzi600ty+m4VkEhJ9zOUF
      T7/0Jl6vDyOXZTGVZGr4CpXJX5KcvAI8ed8v/G4jl8uhKAJV1cjlcmTSaSLRKP2nP6GaFCfn
      HXKGjV9VOBQUaFtU+iqfQlBZbyJBUIXO3DxOdm6NDyEciWFDwAVlq0osx9PgViCqwdWYQ5cO
      pauYHCpdCkFb8smUg1BhQihUH3mOrsOP0/2X/xNd7swmC5XE0QWTLS50BSr8gkdL1TXC70g4
      Pe1Qb7CGgF+XEsNw6Ew6jHlVxj2CDpVC5ebK0Qv/t6VkSDokFYViCbWw5Xt4K7RZFtemp1f+
      1jxeH6nynXi736HkoVe51PMxO8T0GnbfKp+gyicAhbjhcGkgz74WF+fGVKzKZ3jlG8+sYux9
      buV7Qgh0XScQDCEUjeH33savTZJMJteU7X7RIKVkdHSU0dERSkuiZDIZPC43x9/6RyqmL3Pd
      Bp8D+4rvPMimK5CTEu8mD3u9Ay0cMDewyTsjgrdHVSx3EY84MYIbZKUDquCQWhC2esuhu+8a
      gee+jGvfMwyf/Sn1npsPLITgSKnCJ8Kmq0hdU3MEcCXhEDOgLCXxrVdkoMGv0i8FVWkHkZOc
      8SloLoFHKZBUJe1CqQWqoNWl0ybg/bxkwpY8zG9evpzweGg/fHhFudU/+7M/+3OXy8XCSC/W
      wgwNz36bof5eSpTMhs6KVxNMJ2zyboVTsxW88TtvrknnL3vXGzE8j16/QC6ziOWtpe/6dZLJ
      JKWlpV9Ik6ioqIjGxibC4TDVNbXkcgbBaBnu1v3kog2M9V6jwiU3bRbZDJMGRARrOq5uhTlL
      Eo5qBNb5aKoAA42D3/zv6JucpSQ5s6ltrwiBXxWU5JL0JXPsffpLOHW7GBgaJpvJcirnx4ND
      cKlvQ11qqJ80Cv7DMgbSkrlxmzoDghuQcAkgoggq3QpzPpWkV6DnHMJZhylHMiME0azNtKZw
      0KsSRNJng2k61EvJlBD8ujXCUkoyQiCfeYYDTz+9InMKQHNLK49850/AE2Ss+zzhx77OQGrz
      g3UWKcwO5vCpypbrZHw+H5GOF/C5FYy8STRaQk9Pz4bT6Lc7hBBomoaiKLhcbtLpNEXFxQxf
      Os/4J++RuniKDl1wLeEwmLmzgrqMKfHeQXDMucXhmwMmQ90X2Pni6wwpt6+18gtJ/sxxfvqP
      38MXDLHzW/8a/2v/msWyVnoCjfSmBeM5wVDaYTArqPUJZg3J3BLrTa1XsOAS6Nw60uMS0KnB
      QbdCZ4mOr1xHC2m4Iir+qM4xvyAoYFEWhP+QEGhs3kSzGrdaTMdDIXY999ya19Q//dM//fPl
      mbpT8wli1y/S/tATpPxVGOM9BNWbBVRTBBVehXzTEeqabua03Awer48Zo4i2jh1cvXwRr9fH
      1atXqKuvXyoN/mLtBMu5AMMwAJj44OfsT45TnV8gKGA8B+cG8iw4UO4Xa9oQN4MjYDjjUKRt
      zW+YMSWRkpt3AABNSGZn5yjf9RizWRPv5CC3m5ddpDicn5mnvLkDTXcxdP5T+s+e5Knf+Q7l
      h19ANu8nW9GOXtWK0voQtD9CLFSLHO8lZznkVYGVlgS2+CzdAooVQV46NDW7cIdVuiW4s5Jx
      CVV2oSOtWwialhThVthMhga9Xipee42yqipM00RRFBYXF28oAEB1fROpvOT8R7/ksRdeY0Yp
      Jj9yGf8Gv5o0JU7Lo5RVVm3pQg3DYGEhQThSQjQaxe3x4nK5iM3HyOZylJeXb9uJL7dCKlXY
      KlPJJPMXT1ElDZZD7GNZSdmIiWvO5kpWEixSCdxGAos1QV4RHI8X6AN9ClzNFgTFs4EC3UoB
      hBD4yTJkFdPx8FGujoxRsjh3y9VZFVDhmJy9dgmn7ziuuX68i3mMoV7m8jbtew9QVVNLXUMj
      5VXVlJSVU1nXwNnpNL3nBglkHMrE1vIJq6FJMIsVdpapfDRgYdgSlw3VS2ebkAUTqZIbjrIl
      JXMUdobNBF8CE6EQDb/3e+x66CHS6fRK5bGUcq0CCCGorKmjuLyaUFERJZU19MUtQomBlab1
      ZaRMEG2PEinZOJhl2/ZK9vf69T5+/Hd/RX9fD4neXzE6eI142mTX7n1UVVUxNTVFIhGnuDi8
      rYZd3A65XA7TNAuUJz//MXsSI2siaHFLkp63CdqC0KLD4JxDzCMo8W7MUmBJyfVFyeCYTWdK
      kk05nFh0KDIkk4sOYw6EdAXPqmcxbUpybgXDgnhOEs9JYlmH+WxhCEQiazMwk6KyZRfeyhoS
      Fz7Hf5t1xqsIiiyTsbjJWMKmWhc0kcMz3k9PTlLbujb/oSgKje2ddM/Ok52eogLJrBAENjn+
      ekgARXDNgmnHTd7tZ24hxyOyYKMrQlAuBONLOYQB6TAUVEhHVeraXZyM25RaNyhWbGBEVemv
      rsb93HO0v/zymvofz1J23eVy3byjCCGoqqld+buyYx+z/e9Tq66lKo+6Bef6r9HS3rnm9Xw+
      z8l3f4aYG0B6ijj08rfxeDw8+dzL+PwBHNsmMT/FyKV3OfmzHoJ1D3Pw4EGuXL70hWB8WIaU
      kg/f/jnO7GThhekx1p99sS6YVwWYhZqZiowkfTnPe3UaTzbqeFZ9IWlJTk3ZRBKSjqXgi0vC
      zrwk4RG0C0E25XA5I1EDCvsChWZ2KSX5eRtj1ZMUFIRqXha4MOsZ5tI7P6XrqS8TExpweyrM
      iCZ4SBNMm5KEVTBDMo6gpKZuw88risKxF17g4vgwvbEYea+PilR8S/dyyuunv7qeYFk5Bx89
      QveVK8yM/AB1JWVdQAfwmZQ4qkqZW2FnrUZtSGGqwU2fuxWP7iYzMED5gQO07NrFYzU1K0TF
      y/D5fCsTZsQWTCrMvIG2QQhNEVA0cYbY/FEi0Ru+ec/VKzSNvEPIJfjM2YeiqNTW1q1JqtTW
      1VNd18wHP/4u+e5f8lZ/Hzt2H+LS2TPomqCmsYXicGSFvs8wjG3RMLMelbV1+M69Q2hJkNcv
      6kEVjHWrrd8GddjiAwsaq1SagwrTOUnvmE1rVt5knoSAcUfiqAKvELQ7YCzYnFgUhIMKk47g
      MY8gvOGTXC76gngmSbS0lMmnXmXuwx9RIm+tBI6UzFpwNSt5NCCIO4KhPU/ydFvHpt8pLS/n
      8H/935PP5zn9t/8f9NxeARaEguzaw5vfenMlehiORPnupcvM9/VRsiQ3s47DhLtAoHtUASvt
      cOKiwYEuL8GHXuPo4aOc+egjrmSzPP7GG7dcTIeHh2lqKtDR31YBausbuNTyNGrv25StY+tq
      UJKc/8Xf0nLsdYRQmJocZ+Hqp7S4BSOLkqIdnaw2r1ZDd7nY+egrlJdXYORyvP/Or5g/8xlP
      Nim880GIAy9+C90XpPfCRxTLCfyNx+jYdei2N/R+QQhBIBAgW6iH3PAzigBTvfk9jwM1oxaX
      Fm0uRjQqsw5N9sYs2g6FLX1ZjwTgEYLdDgzHLWqqdCL6rac6CgHawiypVIo9R4/x6WKK4Klf
      sJ6pct6SDBoQNxxyCFq8cMhfEMrrrjBHnnzqtpW7Pr8fn9+PuXRXbuUJzGk63q99m4f3r52c
      6fP5eP0b3+Ctf/tveTybJS8l40Uqx+pUZnIwMGrTJAqKfSHu4huHjxaa/X/0I0obG2/pS46O
      jjAxMbGiAGt8gI2gKAoVjW3EI+2kihuYz0EqEcOnSnQFKu15Zi59QurKcSpnzzM9OUM67fC5
      XcyxL39103r6uZlp0okpIqWVmKaFpghqdnThajlITdchiiJRxkb6mb72LgdqDEanU/hKWvB6
      vfc1WpRIJIjNz6O7XCvb5jLylknPiY8IKHKFU389Bhcl4fTGvdHFOUlOF7TLzSnkLQTzGlRt
      cM15KdFCKqW3aVlwpGQikaHv7BUq9+6juqWNs1eu0T+dYDInGc9JpnMOqbhDTcah2gLDdPD6
      NTL+YrzHXmH3a98kEAxu+d7HEgnUnmsbRp0MILlzD9XfeJPmri7UDfy+YDBIOp9H9PUxpGnY
      SJqjhfGrSSEhJPC5FIpSBudmY+zYuw+lqYm9Tz216eRQKSWfff/fowx8Tqj9IXw+39YSa0II
      GptbgBas3Y8wMTbC5StncAZOg3QQ0VpKF4eYyxr0xR12+gT5cDGXLpwnbxiEggF27t3PakWr
      rq2jurZgTwYCwQ3r3qMlpejCpHu2j9rdT1NUVHTfQ6Ver5f5uTmmpqaoqalZ46T3X+tmcT7P
      JQWiRSrVnkJdTdxaYnsDHJfA4cYKLpd2CykEOVUWyh42WbyllAzpgsYNlEtKSUJKtjKdKutA
      fMaiUZng5IcfcvT55/HuPQxXB6mWgJRYgC4EUhTOl/IKKt58k9KyMorDt5k8twGq2zsY+7mG
      x17rO84oKsahwxx4+VUCgc3dZCEEMdPkVDTKQ889R8+Pf0zfYp5dRYJD5YVnMG9Irg3ZOJ9/
      yodueOaN372l6TPQfx1vZhZXtBL/0m/fcchF0zTqGpqoa2jCNF8FChMNx8fG+Ogv/x1vlC3S
      l3bonB6g9p0h8o7kXEZy+vhH/PP/9o/v6LeEEOx9+CngqTs9zbsGXdeRQHpxcY3wpxcXSR4/
      ThcCHBiP2fzUEhQt2GiOZJlUOWpJFArlwhN+hYxHISvA7dEodiStSzThG8nxlCoI64J1VKII
      IZhFolXodGwhOzSRk5gIxh2H8V/8Ao/HQ3ldHfOKirBtEIXkVR6YrKjAs38/Dx8+TNkmzThb
      QWV1Nb07diMvnV25NgfIHX2ao6+8uqWQ96tvvAFvvIFt2/R8/jml2sjKe0lTkjRhQoVyWyKG
      TnPu4woOPrH5xNDicJhLto4tInRms7jd7t+stGLNil5Tw7N/+N9w7bPjDPT1kkxPM7do4hGw
      xyvoV0wcx8G2bTYzudZTdq+HZVkMDQ5SW1d33xpphBA0NzffdD5enw+jvoG3RkYJKYJHhGA0
      a9O4aN/U7TWvw3RQpcOlUOxIzuuCTtNBl5JuDUxVUJaXqEARMKOAx5b0+Tx0UmiaXy0uUkrm
      NMHhkLIlGpucIwgCYSEosSx6fvhDkseOYXq9hBYXGfJ4kLW1lO3axdGjR/H5fCvUML8uTY2q
      qlQ8fJjkpXMULW9xEmQqdVvhl1IyMjJCbW0tilKYQ13e2Mip04M0lbop1yxO91lEFx1CCmQl
      RDRJbnoAx3E2PX4kEmXUDpIfHuI//p//G7sOHb67LZEl5ZU8/srXeRyYn5/ngx/+PaGhy7hU
      ByrrsSxr0y3Ktm0unjtDtLScVCpJXX3DTSGsXC5HRWUlhmHcVwXYCIqioIaCWKpCHPjUlph+
      hcGsjRTQmJEoCLIKTEdU9iNwL4X1mmzJSZdCQEKTJigDxpcCDMMSShVBDjggbd5XVV6wbdbH
      wLJSkndY03ewDAlMGZKcDSUumInZ7BBiRYkO2jYfv/cuoqGB8mef5eljx1acW9M0mZ6cpKyi
      gtMnT1JdU0N1Tc0d3TPDMHC5XLR1dvJLX5CiTBIoZLm1LTD+mfk8586epbb2RjheCwYZzKqE
      O44xn5jBuHqOKJJiWzKoFThLhWPeUgEWEgnqW9qYmpwkazmcOnny3vUER6NRXvz2P+N7/+m7
      9A9dozUS2dAhzuWynD7xEZnxbi5c7adtz0GUyW4W9z7JjoOH0TSV+fkYuWwGEORyOXbs3Hmv
      TvuO0LV3L9fPnSM0PsUuw0EKMIp0kkIwIiyq0w5DfsFuBEkkMV1g2Q6mUIi6FBQh8ZoOCEH1
      0jGrBSsdRQnHISAdkhtUhyoWDGclOwMCG1bq95fNqWvzDoYotGE2GmvbMC0pWRCCCrebzkce
      YXRwkNmxMRaGhmBmhqwQvPTHf8z+gwd/rdzMMqmYpmlUPf8Ciz/8PgEggyBad/sxVpZt07Ru
      11VVFeH2cPDwo4TDEX6a+S7JE6e5rgtqd3jwBd3QdGDTRKqUkvfef5+6+iYc2+J6by95w7h9
      FOg3gabrqBpIcwAtP4mntAOfz8/42Cj5fB6f38/pj9+nafQtFuPz+P1FhBdHeSycRUz3MXjy
      XWIDVxnvuUj+8nt89PkZAtEymlq2Xn90LxEOhzn42GMkMxkSw8NMCPBJKHckA0EVO6yiBVQW
      bUmfS/BMrU44pHHVEuzXJIaUhKRgoyCOIyWXFRCKgteRhJeEwZGSESAIzOQlKenw+ZiN4hYs
      2nB2xmE0LVGmHayUg+lAnRBr8jCqEFRIMOfmmDl+nPwnnxC8coXoxATFCwssVFfT9vDDv3Z9
      1uo+aT0QZPjUSUJWntGSCkR1NdU1tbc9bigUWtnlhRCMj41h5lIcPPI4LpeLhq4uzuQzuPVZ
      5vyN7HnpD2nu2JxIeWxslKmJCQ4fOYLL4+PEJx/jcnvurQIAlFVUUVS9i3Nnz9B/4VNmBs7T
      ffUSAxc/YWRsmpLpz6n2msxmJcI0aQiAX5X4NSj3QgkpatUUFV7YGXIYS+YhECUciW6L4jlV
      VSlvaebiuXO0xVNc0wrJmjSSQ36VJk1Q5FGQAmoCKsWaQveiTc5xcOwbK/96zAjwu1VcUlLq
      FCI0c8CVpZLgCiGYsyWTi7Aj5pCZc5ifs6lISHwLDsWWZF4ThN0Kq2M4y8PlPBQiUROmieY4
      +ClEqtKKQsnrr1NRvdmZ3Rk8Hg+j8/MkFhJEX3yFoY//kUBZDcXRzfvBlgvVPB7PjV7ysVGi
      g5+SCVVQVlmNpmkURyLMp/O8+NU31yRj12NmZobzZ8/w7PNfwuVyUVRcTDI+RyQUuPcKIITA
      HwhQ1bgT4QmTnB1j/7HXkZoX2fsueyMWioCgSzAat/AIB6/GSuXkahFXhWR8JkZ28DzZYCXR
      0vJtoQS6rpOxbaZ6ryPSeYZVge5WaNIEiij0w84gqfQpuDWFK8k8FgpRyya8zl7NS8kCBS6d
      3brAJeC0JVlcen+nEASXhLhMCGxFYcFyKLUg4BTsfHUpCTXrUihzCfywoTPrp5BfMITgjBCU
      A3NtbRx5/fW7dl+FENTt7MK3o4uiSAT63md2dpb63Yc3/Q0hBKlUak3jlNvjZS6xwMTwADVt
      O3G5XAUupJ17bsndJKXk3LlzPPzII3i9XhRF4bMTHzM7OkS9MXLvFWAZPr+f6to6GnYcJBIt
      obSimsXhK1RqaaDQbB30KOQQ9CQk/QkLtypW5tkCpC0YTTsciEh6rl1lOlegFJ+fnSUcLXmg
      xLqVDQ2E9u9hbniU6sk4KZeg2qUsURVKJjWFJp/AQjCKG6eiGndzCxldJ7iwgKAg/NcVEC6V
      Wk3gFXDVlByQggohiIibF4ViIOMSJE1JYFUDl0BQYsGwlIRcyoZmFixRsgANQpD3eGj5zncI
      R6N39d4IIQgEg7jdbi5eOE+oupXq5s5bPiufz4euaWRzOVRVJRCWMiHgAAAcx0lEQVQIoBWX
      8e7bbzFx7QJlja0E1gVJNsLszDT9736PyWSeqtp6zp8/T29fH1/91u8yPjaKSKfT0ufbSqvB
      3UUmk+HS9/9n9vo3rhfpjTlopkNDUMGwJW5VkDAkvxi1OFCqEtJhYBHKvArXrDBPfPu/LPDo
      uN0PtKw6m8lw8vv/SN9Hn1AUcVNUX4/w+pjKZKm1k7ja99C07xAVVYUy8nQ6zbv/5t8QmZtj
      HGh1C4pXycUJw2a/U1jxM1IyoAjKbIcAMAZklsp0FxxBVdzEI6HYWa4Bkgy4YTqk8ajjEFi6
      L6aUOEIwJCUZoI5CiHTm6FGe/Pa378oislFDPbASCdzKb1iWxT99/68oU9OEG3fTcego733v
      /6A+d51ptYyH3/yTlZD6+sig4zhcOH+WnuM/5VBgnpPTArNyD1W19Rw5cgSfz4dpmg+QGlFK
      kubmghpwQSxbuInvTzhI6RByqzxbo3J+3qHcK2gICEo8kmQ2j2EYnP3wl1Q3NLLr0KP36ypu
      gtfn47Hf+yZtzz+F2+2mqLh4ZVqiZZq419XS+Hw+HvmjP2IhFkOPxxk4/gH7JkdXVvlGXWEk
      Y5HRVSYQPOFSmHIUpqWkXhV4KUSAbCmZLNcxJVxJWugIDE1QHNV51q8ylLYYTTtYgOVScLKS
      5qWSZQWYaGzk8TfeuGs7qGUVMsDrrYs7KXfXNI0nnn+JwV/9FfLST7gsNAINe4kM9ZPOJlhc
      XFwR5PPnzvLI4SOoqophGAxcu0D8+PfIJ/KcWJDIukO8+vrXCK4q59A07cEogJSSd/7pB3Rq
      sQ3fz5iSRE6SXOKbbC8SxA3YV6KQdyR+TdBepPDjEZuoG2Ydk4WzJ2mcPc1ENoa9/5EHWlqt
      qiqVVVU3vbbROQkhKKuooKyigmwmQy6d5sKPhxFSogoFt4ABXeFghYqSdPBakmZVsD53rAnB
      0rwKZos0Hg6o6AJOGg7FquRQSCEbUHCAz+M2e5YY6vLAbEsLD/2Lf4HnLlbcqqr6a89XWI1s
      Lo9Rd4TYxZ+xs/sf6Akd5IN4MR2eJD3d12hpbcOyLA4cPERPdzclJSVc/Kf/SIs2x46wg19R
      aCxWuRAKrHGql3HXFWCzMTfLcByH86c+IzN0lnCNjeWsbRU0LMnfXjPZVSQYT0uuxGzihmRX
      REWIAk1LyAWfztjsDgsibkHQZWDPfoDXC3ayj77uq3Ts3HW3L+2eQUrJ4uIifr+fqStXSOUl
      nW6FXimJBBV26BolLhg3JMr6zqR1WHAkxbqCLsCSIJZGnSJY6TXO2wXhz2gauWPHOPKVr9xV
      4QfumhlaVV1NPm/Qk3iEoZEP2a2e4t2sxj9NKQRSx9m7bz9CCPL5PP2f/YLjk1NUu7NcdCSK
      gCfrNHRFMN9/kfm5xxns7yWTTlNVW89AX+/dVYB4LMbFixd45JHDuNzuDRUhHpvHvvhjvlTr
      cHbaIZaTtBQrdEQLc7KydoGsdV+Jyu6IQsyQtBUra1gSdoQ3Xt0zluRXUyrhT0/g8fqIlJR+
      IehX8vk8Ri5X2M6zafZ7VUJAwJEkNdgZFMTyW+uzHZKwwwWD0SqM0kpE93l0bu7rzgiB/ZWv
      8OiXv3wPrujuQQhBTW0dc3NzTMZaaJHX+HKtxTvS5vOZOMlkkmg0im3bKLbB6w0GqlAIuG4o
      4FRa0nDoWaanp5mdnsS0bDI5g4b6Ou6qt+j2ePC4dEZHRzdle7j2+fvsDOXw6oJHazRqA4LF
      hE33nIMjJUGXQFGXqPVUQYVP2TJFSNKEh6MOtfFLnPr7/0D3X/+PfPjDv2Z6YuxuXuZdhZQS
      RVEoKS1ldmaG+kSMYlHoAfAogskcmI7kWsym5jb3QUpJzJH8IiMxdx2iqKUd07RZsNeaIkGP
      Rvappzjw/PP38MruHnRdp6OjE3e0mj5Zg67CkSqVA81lJBcS2LaN2+0m6a9j0VLXCL/lSEZF
      Ge07ulicuE4wP48xM8TQ4CBef+juhkF1Xaemto5INLrpFjg5Mcb86HUibsnpKQdXzqErpDC7
      KOmZdxhJOMTzgh3Fd66bAV3gUyWWhENhm0q3SUlmnJ+f7iE9PcxMsjBIQlEEPt/2mDsshFiZ
      EukPBJhYXEQM9XPCkSy6BZUBlek8lKYhcBsFiDuSPgRBRbBgGExdPMej5Lmek0zZkjJdkJYC
      19EXOPDiV9C0ex/+vltwu91IB+byCp54P1GvwGOleOvDk8wtLJJYSLJn3z76Lp9DlyaaUsgb
      JQxIND5HbX0j8XM/w5eZwvSEeea1b5FIJO7/fIC8JbENhw8HTLp8grC/8FDbAwLDlnwy7+D5
      DdioQ66Cj7AMtwrHAnMUJ+Yw5k+Tc2DC8TK970U6Dj2+LZgoVjNoH3rpFT5IpSi6epL9xYWu
      sssxh8ot3JKwpqLmJbUqtM0PI2RhNGuXWzBjSS5mJFptA0ef/tKmFbnrIaUkn89vCxr7lrY2
      /MEg8yEvnsG3qPPbPFWvonbuQlUEVVXV+L75xwxf7yFumcwPXSWbnqYpWopQBDGlmJjtpiQ7
      QW/3VY4++dT9V4DU5U8JZfI0uRUiq5JcMcOmJytoLdGI3OV7HV06nk8rUGhEyJK4+AM+GerB
      V9vBgSNH7+4P/gbQdJ3Hfueb/M3/Osr742MEBDQjtmQGSilJu1y0ua3Cg131lTJNYNiCkXDV
      HUXIbNteYfB70BBCUFVVRXFxMdcsm1DfW8zmVA43NrKcywqHI4QPHcZxHFI7dmOaFsXFxWQy
      GZRQBeGQwsCQwvynn7H/4EP3LxO8fAGTU1O0ZMcpWZeavJiU7C7XqfCK32gH2Co8KlSY0yyO
      92FVdRHcRs6ypmksZAxmPr+IlZFMGJKcS1CqCDKywOmgiZubaCQwWRSmzsmx0RNNCQV9516a
      Wlq2HO9XFAW/f3uYi8tQFIWKuibi/kZOdI+TuPIRs1PjuItKGBkaxMjliMcTuN0eXC4Xbre7
      MKk+WsbA4DCvf/2bNDY2IOUWeoLvNqpbOrkyPk90cXyFQydvO8w4Ki1F97eMQQiBSzhMhZqp
      2CLB1/1CpCTK7Ief0pzMU27CqAroglOLNnNZSU5XKFlnvRU4cSTjuptaYd8Uh/cimS8uoalr
      17aoofp1oSgFSs5ItITS8nKyC3OoU1e4ePpTXJPncA2f4J0TZ+kbn0PTdSKRCLlcjkAwiMfr
      LRQwlleg6/r9T4RpmkbXc6/S/Z+u0akVWNV0RZDNO6RNBV2R6OqNnqrlR3gvHpcQgjlLp7Si
      8h4c/TdDIBjE1dqInLuIAJoXbKbTNl0WeBAMBxTW35UhW7JgZUjhptuxKVcFIXEjL+MAnsDt
      62e+KCh067XQ2NiEbdsckpLRoQEmx8forDOYnJ6l++IZTn70LllL4vMHSC+mCEeiuFxuFtOL
      DyYTHAoVkW/Yhz36EcvWTldQ8NmEScKC5+o0XAqcnbaZWZQcrdcIr+fwuEMsF8otT6mHQnGd
      0fYkFdtQAYQQKD7vSoOLjqBmqb9cAvmcg9TVNSoQR3KsWAMs4hb8MuHQ7NHZvcTv6hJg9lwm
      +9Qz3En9Vz6fR1GUbcvat7wjADS3ddC8xF203NaZy2bRXS4+fv8dFhdiPPOV1xkbG+WXP/nB
      /TeBluEtjjJ56STFioUQAq8qqPcpCEfy7oTNXMyhA4HqgMsvCK1ymG+Xbd4Iy8K/DMOGgcrH
      2fPUy9uSkU4IQc6js3D8JK51FQUCSADnbMm0KlCWhmFPOpLmQOFavIpg1oRh4UI1TFISejMO
      41MJfA0NlFdVMjk5id9/+4k9ywL2RTOblkPMriVKm4bmFtp27GJxcZGFhQVeeOnVu5sIuxNE
      y8pJtT62ZriDANpDKk+WqpSKAmd9vVuhd8rhw3GbnL1xheFWsFr4czacM6PsPPaVDTlptgOk
      lMT7h3Btwn9embOpSpqU+BUIKsx6C4Pofhm3MWWhDMJ0JJrU0GIW1qxFbcJmryHJLxa6C1LJ
      JJMTEyvHHOi+xolf/eom3+FBlpnfTSwrRCQSYefOLlRVfXDVoIqisPuJ57jY/Qld7uya96xV
      D10XcNAlMEzJ59ctpFdwpFrF9RtEisazCs0vfQev9/6XgW8V169eI/O3PyG8ST3ZlYhKZ4lO
      q0csNcYL6jyCq0v0itcNSVhKFswcmqRAVCsEGQHa0o7X1n6D5DaXy3Hi775PUTKBfezYtjV3
      7iaklA9uB4BCKbDWcoCMvcq8ASZyULWO7tutCPZ7FbwZh8Xbc7tuCiklNoUGne2M8d7rFFub
      V1P6FOjyiTWsEBEVdnsF789YzE9ayISDZuYZWHUvvRJSsRtVuMszDj56+xd0zU8TzRuMj47e
      k2vabrjvmeD1EEKw/8Wvc/Hzaoxz79Boz+NWYMp2UypN/BtQpkV1hTOTNjXFCp1hZY0/sBXf
      QAiBIh2cW41WecCwLIv4iVM3UaGshiLXXqeUknHDoR9QNJBCUmpBXLLSDSaB6aIAew/sX/md
      U7/6JQvXrhAZHiCE5GK4lJ2/BhPcFwlSSoaHBjj5ydsPVgGgUDe+78hRUl176T7xHuHu9yh2
      skQ3cUzLNEHIkVyds2kMrU2abdVOzet+PNsgtb8ZhBBMuRyMEpVc2lmKBElcEipzEjeCUNLm
      eELBpyvUuSQpqeD4VZ4vKmTI+hclAz0mlWkbr4SkprF4YDd7X36JsqVehZnJSey336JV2ksD
      J6Bxxw5CRUUP9PrvNYaHBrj40V/QWWo/eAVYRjAU4tCXXuVUqITEL77HguXgcd1soQlRIIOq
      FHB9QdIVuTNfwJZgVO/dVpnf9VBVlfbGWtqcOKxqz007MGRKzhsOPpcghCSA5IQBh0sF9atc
      miINdKBUClK6RvAP3uSxR9cOKFc0DVveoGTPAUX1Db8VDu9mcByH6bEeHm13cOvK9lGAZZTX
      1OErVekbl1R6Cq2EyxgwHEY9CsEijZFJk5cDd/6gcjZ4K5u2/UNuefo5Jq5fpkrcuH6/Ajvd
      goQteaxYQReFBcKTtbEdiZQ3dkHDAdWWzEaKqfr279B56OBN1xwIBjGLimGh4BMkPF7aGxo3
      PJ9UKoXP51sJGUspSafTtyS43S6QUmIYBoP93SzMDlEpzuBemmi/7RTA7XKRECqaaq0Jx1lS
      EivReHF/oaf2Y3eh3PVO0a3U8Mje/XftfO8VauobGNr9ENbFz2472K7Tq3I14eBSFGqWdoGZ
      tEPQgbTPR0PXzg0VfqK/n6Lkwsrf2epaSsvK1nxmmeUtNj+/Ek+HG/MRtjvOnT3J4mwvWn6c
      mlCcKr9AXVVYuO0UQFJoZXP7BEMZmxGgyJFM25KqqhsJO49HcGnWptorqPXfOk4tKUy1nzdV
      wgef/EKE+BRFoePp57nec4m6fHrl9WnTZhGBsq4Mos0j+Gy2QMXoU2F+2qERMKemmRgZoaXj
      5skuQ++/Q4ssZIlNCUW7991UHr6cA6hvaLjr13gvYRgG7779Ixo9V2iOmCiKgA2Cng++GH4d
      kvOzFGk2zWGFi7rClx/1UL/LzStP+AhokulkwSQ42Ohi1x4v3aYgbW68E0hgNgef5cu5UPwQ
      C7tfp3Pf9pkyczuUlZezWL6WmDZmw6GQyvo0yFReEnQr7HCBk5d4l8h5/bZDfHyCDeG/sYKP
      KSode/fe9JEvahIsEY9RJs9SsyL8G2PbLYVGNkNAwJxhs6+ucHo1S91hO8tULk+bXBkV7KrV
      KAkKdjbqfNSb54XStTO6TAd69Dq0fUc4sufAbUf7bFeI9dEwUdgl5RLTtACmTMk0goeCBYHt
      9At+rksqDIeU20VTRcWGxw63tJK5fA6PBLOx+bcq+pOIzxIN3l55t50C5DMpdCEZsQTPVax9
      +ELArgoV05acGjVwalxUhVU+NCQZS+JfmpUlgfN6K4e++ofbOtu7FbiqanGGrq5s1Y6UTOYl
      YVVwLm0TUAQpITi6KhqWsiVpHeL7D9Ly3DM0NDdteOzOg4c43X8d0zTpeObZbdEdd7eQzuSZ
      mhOU3kant50CmItJPCpY9uYOrqYILAluXZDKOoT9gr4Fmz3RgsIkTYG/Y/8XXvgByusbWPgY
      wkuyKYDrebBUwd5IgXvHt84eOhWTJCRUPH6ExpbmTY8dCAZ5/Pf/s5Uamd8mCAGmZSHlrRmu
      t50CZEYuM5izaa28dYWqVxOc7TcxTRuPJWkN36DbUwXks5n7cbr3HPWtbXxeVIIanyGkKSAE
      +4oEDR6WBmbf/HD3hQVC17bE8bkdK2HvBjp3dHFm7B2ESN7yc9tK7WdnZ4mYMaaloLV081MT
      Ag7VauyvEFQKwdESFb++qr9YLaJ5xxeHGOtW8Hg8NHztdzmuujmZl+RUQYNHrJkWD5AwJe/M
      OEwbkqguaNy9l5Jt0Mf7oODxeHCVPUzWuHWofFspgLJEjKVtEPiWq6bxSilJ5yUfdJt0hW7E
      dU0HepICZ9/LlFVsrxbHXxdCCBpaW2nbuYNHy+BwqYJHYU1jD8CFhKTUlsTykj5fFXte/daW
      mR9+W1FR3cxs6ja9DvfpXLaEifExdMekJHTzacWzMBC7QR/SPWOzo9XNhzHJTLYQGh3LqpzW
      22jr2ndfz/t+oOXx55i0tZXw5/rw5L6wwB9SCPtcVD7z+m+F//Obory8gvnsrVtAt5UCBENF
      zOUFHv1mrY14Jc2RGytexnSojagc2uVhyqtxNW5zQa3na998E+23cOWrqq1jsbwZucmOHtIE
      RS6BPPY7NLZ33t+T26ZwuVwoofZN79kD7wdYj2w6RX1ArCS7NoOUEkeoxNKSnimb9lqN04aP
      h5/5CkXFxffpbO8vLNMEI7Pi80puEAbkHBjDCy/8ATseOvKFTFzdCziOg20aK/mhQo+wxHYk
      eVNyZbZ6e0WBFmanaXHDZPbWjosjwZA6EoX99QoLWcmeI88uTbP/7YTb48GoaGG2e5xFR5AL
      lWEVlUDu/2/v3H7juOo4/j0zszt7x+tL6iSOm1BCFDBK1dILfUAtogIkKqGq4qVC4g/gj+GR
      f4AX/gIQF6kPILUVAhXS3KC5gB07juN4vTszO+fGw+Z3Ojvexet47ZndPZ83r8/OObPndzu/
      cwtQuXQVK998GefGdK/XtBCGIdT+HWCxtxTm5kMfonwFSgOu52Ptre9ld0NMmjiO8fGvf4na
      3j3MLXtYHjAOSHK/5eHxC+/CKxRQKflYe+U7U5fLTqOkxJ1bN9GcX8D84qJ530ldrnDSaK2x
      tbmB29c/RcGVWHv1+6jVG32/VW48wKOtTSyEG9gR+sB2yEGs1gVa0RZee/tnM9P5juviyjfy
      cUfyJMAYw/LZ81g+O9wz5sZkfvHxH7BSktj3HDRKhws0Y4Bob/ftF7BYjkpuFEDsbqLgAHqE
      vboBBz7dKuP8K+9N7Uym5XTITQjkLlzA0+111MqDdVJr4PcbS2heuIq51Qt480fXZn6ix3J8
      cqEAUkp42//CvbbGlYv9TaIcrlDAucvX8NrbP86ghZZpJRcKsLe3h739Dh48UVhZ7f/ffhf4
      e/cl1DyB5csXM2mfZXrJhQLs7+3hdugjFCHmUofhMKbhN1fw0rU3cneEuWXyycUg+OHGOli5
      ga8U1IHFvXWfYefB572ZUItlzGTuAbTWUFrhbNXFnGDgCnATarm5D3z73Z9iZfXF7BppmVoy
      9wDdKAL+/QneqzxAARr3dr7M68cS2OJ1zDVnd1275WTJ3AOAMRQdDcjeHcHNigMuNe7uagSN
      q/j6Dz+Yqs3alnyRuQdYv/8F+M46drvAX584kBoouAznGwz+wiXMNednZqmD5fTJXAEazUU8
      Kp+D52gsVSVeeHbcYbXIcGb7j/jL735z4MIGi2VcZK4AW/+5i5f1fxEJjXLZ6RsA+45Avblk
      PYDlxMhcAYLWLhoFjRtPNUqJ2x5CATxofBffev2dDFtnGRWtNcIwRBzHWTflSGSuALSep82A
      N178cmHbnd0iVtfesovdJgjP8yZuT0bmrS035rEvGGoMuPWolwJ93NGov/ohFpfOHPJtS15g
      jPUunp6Ag4eTZK4AjYUldLWL1xcYdp72LsJtdYG5+cGxv5QSnU4HURSddlMtU0jmClCvNxAU
      6ih5Ds67DB99FuPG/Ri3rn82sDwd42eXQlvGQeb+qlqrIaqfAwuf4mLdwaVG74Db3979HFr/
      4IAXcBwH5fL/uz7OYhmdzD2A4zj42jvv4xbvn+198vghtjbXT6xerTWklHaOYcbJXAEAYGHp
      DCpvfoB/xk0jkA23g0cf/Qp/++TP2Hy4gfaz283HBd0bJaUc63Mtk0UuFAAALq9dw6Wf/ALX
      C1/FnnCgugx/uhFh+/EOgiAYe3aBQimbZp1tcnMuEBGGIe7f/Ac2793GTofj/Q9/bmeCLSdG
      7hSA6B1jp6yFtpwouQmB0jDGrPBbTpzcKoDFchpYBbDMNFYBLDONVQDLTGMVwDLTWAWwzDQT
      qQB2HY9lXEycAtD1oPZeAMs4mEgFYIyZtUFCCOsJLM9N5vsBjgpjvf0CQRDAdV07Y2w5FhOh
      ABTyaK0RxzHiOIbjOCiVShO3B9WSLyZCeqSUxuJzzlEul+F5nl0lajk2E6EAJOhxHKNer1ur
      P8PQGFBKOZbQN9eDYK01OOfgnEMIAd/3bbx/SlDYSaFnXoiiyLRpULuo3aOmyXNvSoUQiKII
      juNAKQXOOYrFYtbNmlpoq2hyu2ilUoHv+5mFnJxzcwpIsVhEq9WC1hqe56FYLKJYLPZFCUEQ
      QGuNSqWCUqk09Lla6/wqAOccjDHEcQylFBqNBlzXnbiTxyYJSikHQdD3eRiGcBznRAyPlBKO
      40BKCcYYhBDodrumn8mKB0EAx3H60t4UHQRBAN/34fs+ut1u33e01uYUEfqcIgspZT4VQGuN
      TqdjXrhardpB7wlCk4pxHA89JIBCj3F5AvI0nHMTshzGsDJaa0RRhCiKzBgBAFzXhZQS7Xbb
      pMullKZOIKchkBACrutCKQXP8zJ1v9OOEAJhGEIpZSwwCVEyhhZCmLKO45j+KRaLxjhprc3c
      zDCUUhBCmHQ2gL56nrefk2MCaouUEkII838Koxljpp5cKgCdMdnpdPo6xDI+KLV81Jn0tGDx
      Z5cXktA1m82BfUVWutvt9i1jOeoAO12e6koKdbo8nSYI4EAInSsFIC2mF6G/4zgGYwy+72fc
      wslBa208abLTlVKI4xhhGA4VPvrdDxtvUV8lvYVSauD3yHskrfSwZ4yTwwxnrkaUYRii1WoZ
      C5Fc9mBXfx4Nzjn29/eNpSbCMDSDQ4IEPimco3jcZDkS5EFparo7YFCdo3r2YWnPYWWTbRrm
      GYAceABqiJQSUkoopUwKjnNuXoJG99VqNeMWnz5pqzkKJIiUPXEcB4yxvrx+8nlJYRxV+NPf
      TR9YTDn5drttsnpk1JIW/yj1Url0pECx/aD2pUnWn7kCkGCXSiXjOunHSrpTyvtOA8MEOj2I
      I6IoOjSfnX4eeVGlFFqtlkljJmP+44yrkhacYuzkADiOY3S7XQAwKU4654neb5Qw67A20HuQ
      gh8GKYpZVfzctY8JshqMMZTLZROjUuYn+UOTh5iUuYBkKEeTOfQelPsmxabZbiklarUaOOeI
      ogiu60IIYcrQOIg+I+/oeR48z0MYhibLQnUDPSFMpwmJdAyeVsRhgpW0wJ7nGa+jlEIYhiZt
      Sc9L91s6fBo1JErKQ/KZw0KktGcgZWSMge3u7uosZ1YpH1woFOC6LjqdDrTWKBQKB+JXxphJ
      u00CJAA0n5EMEZJLDUixqVMKhYJJFwL9HVipVEx4SANc13XNoJeyMsPCjFF43rQkpaw55wfu
      ChuWvTkOSYVJG8ZRlep/9QnMjnFNIh8AAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
